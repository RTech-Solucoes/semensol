<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/components/drivers/add-driver-modal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/drivers/add-driver-modal.tsx" />
              <option name="originalContent" value="import { Dialog, DialogContent, DialogHeader, DialogTitle } from &quot;@/components/ui/dialog&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { Driver } from &quot;./driver-card&quot;;&#10;import { CameraCapture } from &quot;@/components/ui/camera-capture&quot;;&#10;import { CameraIcon, UserCircle } from &quot;@phosphor-icons/react&quot;;&#10;&#10;interface AddDriverModalProps {&#10;  open: boolean;&#10;  onOpenChange: (open: boolean) =&gt; void;&#10;  onSave: (driver: Omit&lt;Driver, &quot;id&quot;&gt;) =&gt; void;&#10;}&#10;&#10;export function AddDriverModal({ open, onOpenChange, onSave }: AddDriverModalProps) {&#10;  const [formData, setFormData] = useState({&#10;    name: &quot;&quot;,&#10;    document: &quot;&quot;,&#10;    cpf: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    email: &quot;&quot;,&#10;    status: &quot;Ativo&quot; as Driver[&quot;status&quot;],&#10;    company: &quot;&quot;,&#10;    experience: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;  });&#10;&#10;  const [photo, setPhoto] = useState&lt;Blob | null&gt;(null);&#10;  const [photoPreview, setPhotoPreview] = useState&lt;string | null&gt;(null);&#10;  const [cameraOpen, setCameraOpen] = useState(false);&#10;&#10;  const handleSave = () =&gt; {&#10;    if (!formData.name || !formData.document || !formData.cpf) {&#10;      alert(&quot;Por favor, preencha os campos obrigatórios&quot;);&#10;      return;&#10;    }&#10;&#10;    onSave({&#10;      ...formData,&#10;      document: `CNH: ${formData.document}`,&#10;    });&#10;&#10;    // Reset form&#10;    setFormData({&#10;      name: &quot;&quot;,&#10;      document: &quot;&quot;,&#10;      cpf: &quot;&quot;,&#10;      phone: &quot;&quot;,&#10;      email: &quot;&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;&quot;,&#10;      experience: &quot;&quot;,&#10;      category: &quot;&quot;,&#10;    });&#10;    setPhoto(null);&#10;    setPhotoPreview(null);&#10;&#10;    onOpenChange(false);&#10;  };&#10;&#10;  const handleChange = (field: string, value: string) =&gt; {&#10;    setFormData(prev =&gt; ({ ...prev, [field]: value }));&#10;  };&#10;&#10;  const handlePhotoCapture = (capturedPhoto: Blob) =&gt; {&#10;    setPhoto(capturedPhoto);&#10;    const previewUrl = URL.createObjectURL(capturedPhoto);&#10;    setPhotoPreview(previewUrl);&#10;  };&#10;&#10;  const removePhoto = () =&gt; {&#10;    if (photoPreview) {&#10;      URL.revokeObjectURL(photoPreview);&#10;    }&#10;    setPhoto(null);&#10;    setPhotoPreview(null);&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Dialog open={open} onOpenChange={onOpenChange}&gt;&#10;        &lt;DialogContent className=&quot;sm:max-w-[600px] max-h-[80vh] overflow-y-auto&quot;&gt;&#10;          &lt;DialogHeader&gt;&#10;            &lt;DialogTitle&gt;Novo Motorista&lt;/DialogTitle&gt;&#10;          &lt;/DialogHeader&gt;&#10;&#10;          &lt;div className=&quot;grid gap-4 py-4&quot;&gt;&#10;            {/* Photo Section */}&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label&gt;Foto do Motorista&lt;/Label&gt;&#10;              &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                &lt;div className=&quot;w-20 h-20 rounded-full border-2 border-dashed border-gray-300 flex items-center justify-center overflow-hidden bg-gray-50&quot;&gt;&#10;                  {photoPreview ? (&#10;                    &lt;img&#10;                      src={photoPreview}&#10;                      alt=&quot;Preview&quot;&#10;                      className=&quot;w-full h-full object-cover&quot;&#10;                    /&gt;&#10;                  ) : (&#10;                    &lt;UserCircle className=&quot;w-8 h-8 text-gray-400&quot; /&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                  &lt;Button&#10;                    type=&quot;button&quot;&#10;                    onClick={() =&gt; setCameraOpen(true)}&#10;                    variant=&quot;outline&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;flex items-center gap-2&quot;&#10;                  &gt;&#10;                    &lt;CameraIcon className=&quot;h-4 w-4&quot; /&gt;&#10;                    {photoPreview ? &quot;Trocar Foto&quot; : &quot;Tirar Foto&quot;}&#10;                  &lt;/Button&gt;&#10;                  {photoPreview &amp;&amp; (&#10;                    &lt;Button&#10;                      type=&quot;button&quot;&#10;                      onClick={removePhoto}&#10;                      variant=&quot;outline&quot;&#10;                      size=&quot;sm&quot;&#10;                    &gt;&#10;                      Remover&#10;                    &lt;/Button&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;name&quot;&gt;Nome *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;name&quot;&#10;                  value={formData.name}&#10;                  onChange={(e) =&gt; handleChange(&quot;name&quot;, e.target.value)}&#10;                  placeholder=&quot;Nome completo&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;document&quot;&gt;CNH *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;document&quot;&#10;                  value={formData.document}&#10;                  onChange={(e) =&gt; handleChange(&quot;document&quot;, e.target.value)}&#10;                  placeholder=&quot;Número da CNH&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;cpf&quot;&gt;CPF *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;cpf&quot;&#10;                  value={formData.cpf}&#10;                  onChange={(e) =&gt; handleChange(&quot;cpf&quot;, e.target.value)}&#10;                  placeholder=&quot;000.000.000-00&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;phone&quot;&gt;Telefone&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;phone&quot;&#10;                  value={formData.phone}&#10;                  onChange={(e) =&gt; handleChange(&quot;phone&quot;, e.target.value)}&#10;                  placeholder=&quot;(00) 00000-0000&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;email&quot;&#10;                type=&quot;email&quot;&#10;                value={formData.email}&#10;                onChange={(e) =&gt; handleChange(&quot;email&quot;, e.target.value)}&#10;                placeholder=&quot;email@exemplo.com&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;company&quot;&gt;Empresa&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;company&quot;&#10;                  value={formData.company}&#10;                  onChange={(e) =&gt; handleChange(&quot;company&quot;, e.target.value)}&#10;                  placeholder=&quot;Nome da empresa&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;experience&quot;&gt;Experiência&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;experience&quot;&#10;                  value={formData.experience}&#10;                  onChange={(e) =&gt; handleChange(&quot;experience&quot;, e.target.value)}&#10;                  placeholder=&quot;Ex: 5 anos&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;category&quot;&gt;Categoria CNH&lt;/Label&gt;&#10;                &lt;Select onValueChange={(value) =&gt; handleChange(&quot;category&quot;, value)}&gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue placeholder=&quot;Selecione a categoria&quot; /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;A&quot;&gt;A - Motocicleta&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;B&quot;&gt;B - Automóvel&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;C&quot;&gt;C - Caminhão&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;D&quot;&gt;D - Ônibus&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;E&quot;&gt;E - Carreta&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;status&quot;&gt;Status&lt;/Label&gt;&#10;                &lt;Select&#10;                  value={formData.status}&#10;                  onValueChange={(value: Driver[&quot;status&quot;]) =&gt; handleChange(&quot;status&quot;, value)}&#10;                &gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;Ativo&quot;&gt;Ativo&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;Inativo&quot;&gt;Inativo&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;Suspenso&quot;&gt;Suspenso&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex justify-end gap-3&quot;&gt;&#10;            &lt;Button variant=&quot;secondary&quot; onClick={() =&gt; onOpenChange(false)}&gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleSave} className=&quot;bg-primary-900 hover:bg-primary-900/80&quot;&gt;&#10;              Salvar&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogContent&gt;&#10;      &lt;/Dialog&gt;&#10;&#10;      {/* Camera Capture Component */}&#10;      &lt;CameraCapture&#10;        open={cameraOpen}&#10;        onOpenChange={setCameraOpen}&#10;        onCapture={handlePhotoCapture}&#10;        title=&quot;Foto do Motorista&quot;&#10;        description=&quot;Posicione-se adequadamente e tire uma foto para o cadastro&quot;&#10;      /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { Dialog, DialogContent, DialogHeader, DialogTitle } from &quot;@/components/ui/dialog&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { Driver } from &quot;./driver-card&quot;;&#10;import { CameraCapture } from &quot;@/components/ui/camera-capture&quot;;&#10;import { CameraIcon, UserCircle } from &quot;@phosphor-icons/react&quot;;&#10;&#10;interface AddDriverModalProps {&#10;  open: boolean;&#10;  onOpenChange: (open: boolean) =&gt; void;&#10;  onSave: (driver: Omit&lt;Driver, &quot;id&quot;&gt;) =&gt; void;&#10;}&#10;&#10;export function AddDriverModal({ open, onOpenChange, onSave }: AddDriverModalProps) {&#10;  const [formData, setFormData] = useState({&#10;    name: &quot;&quot;,&#10;    document: &quot;&quot;,&#10;    cpf: &quot;&quot;,&#10;    phone: &quot;&quot;,&#10;    email: &quot;&quot;,&#10;    status: &quot;Ativo&quot; as Driver[&quot;status&quot;],&#10;    company: &quot;&quot;,&#10;    experience: &quot;&quot;,&#10;    category: &quot;&quot;,&#10;  });&#10;&#10;  const [photo, setPhoto] = useState&lt;File | null&gt;(null);&#10;  const [photoPreview, setPhotoPreview] = useState&lt;string | null&gt;(null);&#10;  const [cameraOpen, setCameraOpen] = useState(false);&#10;&#10;  const handleSave = () =&gt; {&#10;    if (!formData.name || !formData.document || !formData.cpf) {&#10;      alert(&quot;Por favor, preencha os campos obrigatórios&quot;);&#10;      return;&#10;    }&#10;&#10;    onSave({&#10;      ...formData,&#10;      document: `CNH: ${formData.document}`,&#10;    });&#10;&#10;    // Reset form&#10;    setFormData({&#10;      name: &quot;&quot;,&#10;      document: &quot;&quot;,&#10;      cpf: &quot;&quot;,&#10;      phone: &quot;&quot;,&#10;      email: &quot;&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;&quot;,&#10;      experience: &quot;&quot;,&#10;      category: &quot;&quot;,&#10;    });&#10;    setPhoto(null);&#10;    setPhotoPreview(null);&#10;&#10;    onOpenChange(false);&#10;  };&#10;&#10;  const handleChange = (field: string, value: string) =&gt; {&#10;    setFormData(prev =&gt; ({ ...prev, [field]: value }));&#10;  };&#10;&#10;  const handlePhotoCapture = (capturedPhoto: File) =&gt; {&#10;    setPhoto(capturedPhoto);&#10;    const previewUrl = URL.createObjectURL(capturedPhoto);&#10;    setPhotoPreview(previewUrl);&#10;  };&#10;&#10;  const removePhoto = () =&gt; {&#10;    if (photoPreview) {&#10;      URL.revokeObjectURL(photoPreview);&#10;    }&#10;    setPhoto(null);&#10;    setPhotoPreview(null);&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Dialog open={open} onOpenChange={onOpenChange}&gt;&#10;        &lt;DialogContent className=&quot;sm:max-w-[600px] max-h-[80vh] overflow-y-auto&quot;&gt;&#10;          &lt;DialogHeader&gt;&#10;            &lt;DialogTitle&gt;Novo Motorista&lt;/DialogTitle&gt;&#10;          &lt;/DialogHeader&gt;&#10;&#10;          &lt;div className=&quot;grid gap-4 py-4&quot;&gt;&#10;            {/* Photo Section */}&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label&gt;Foto do Motorista&lt;/Label&gt;&#10;              &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                &lt;div className=&quot;w-20 h-20 rounded-full border-2 border-dashed border-gray-300 flex items-center justify-center overflow-hidden bg-gray-50&quot;&gt;&#10;                  {photoPreview ? (&#10;                    &lt;img&#10;                      src={photoPreview}&#10;                      alt=&quot;Preview&quot;&#10;                      className=&quot;w-full h-full object-cover&quot;&#10;                    /&gt;&#10;                  ) : (&#10;                    &lt;UserCircle className=&quot;w-8 h-8 text-gray-400&quot; /&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                  &lt;Button&#10;                    type=&quot;button&quot;&#10;                    onClick={() =&gt; setCameraOpen(true)}&#10;                    variant=&quot;outline&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;flex items-center gap-2&quot;&#10;                  &gt;&#10;                    &lt;CameraIcon className=&quot;h-4 w-4&quot; /&gt;&#10;                    {photoPreview ? &quot;Trocar Foto&quot; : &quot;Tirar Foto&quot;}&#10;                  &lt;/Button&gt;&#10;                  {photoPreview &amp;&amp; (&#10;                    &lt;Button&#10;                      type=&quot;button&quot;&#10;                      onClick={removePhoto}&#10;                      variant=&quot;outline&quot;&#10;                      size=&quot;sm&quot;&#10;                    &gt;&#10;                      Remover&#10;                    &lt;/Button&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;name&quot;&gt;Nome *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;name&quot;&#10;                  value={formData.name}&#10;                  onChange={(e) =&gt; handleChange(&quot;name&quot;, e.target.value)}&#10;                  placeholder=&quot;Nome completo&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;document&quot;&gt;CNH *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;document&quot;&#10;                  value={formData.document}&#10;                  onChange={(e) =&gt; handleChange(&quot;document&quot;, e.target.value)}&#10;                  placeholder=&quot;Número da CNH&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;cpf&quot;&gt;CPF *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;cpf&quot;&#10;                  value={formData.cpf}&#10;                  onChange={(e) =&gt; handleChange(&quot;cpf&quot;, e.target.value)}&#10;                  placeholder=&quot;000.000.000-00&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;phone&quot;&gt;Telefone&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;phone&quot;&#10;                  value={formData.phone}&#10;                  onChange={(e) =&gt; handleChange(&quot;phone&quot;, e.target.value)}&#10;                  placeholder=&quot;(00) 00000-0000&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;email&quot;&gt;Email&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;email&quot;&#10;                type=&quot;email&quot;&#10;                value={formData.email}&#10;                onChange={(e) =&gt; handleChange(&quot;email&quot;, e.target.value)}&#10;                placeholder=&quot;email@exemplo.com&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;company&quot;&gt;Empresa&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;company&quot;&#10;                  value={formData.company}&#10;                  onChange={(e) =&gt; handleChange(&quot;company&quot;, e.target.value)}&#10;                  placeholder=&quot;Nome da empresa&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;experience&quot;&gt;Experiência&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;experience&quot;&#10;                  value={formData.experience}&#10;                  onChange={(e) =&gt; handleChange(&quot;experience&quot;, e.target.value)}&#10;                  placeholder=&quot;Ex: 5 anos&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;category&quot;&gt;Categoria CNH&lt;/Label&gt;&#10;                &lt;Select onValueChange={(value) =&gt; handleChange(&quot;category&quot;, value)}&gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue placeholder=&quot;Selecione a categoria&quot; /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;A&quot;&gt;A - Motocicleta&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;B&quot;&gt;B - Automóvel&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;C&quot;&gt;C - Caminhão&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;D&quot;&gt;D - Ônibus&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;E&quot;&gt;E - Carreta&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;status&quot;&gt;Status&lt;/Label&gt;&#10;                &lt;Select&#10;                  value={formData.status}&#10;                  onValueChange={(value: Driver[&quot;status&quot;]) =&gt; handleChange(&quot;status&quot;, value)}&#10;                &gt;&#10;                  &lt;SelectTrigger&gt;&#10;                    &lt;SelectValue /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;Ativo&quot;&gt;Ativo&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;Inativo&quot;&gt;Inativo&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;Suspenso&quot;&gt;Suspenso&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex justify-end gap-3&quot;&gt;&#10;            &lt;Button variant=&quot;secondary&quot; onClick={() =&gt; onOpenChange(false)}&gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleSave} className=&quot;bg-primary-900 hover:bg-primary-900/80&quot;&gt;&#10;              Salvar&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogContent&gt;&#10;      &lt;/Dialog&gt;&#10;&#10;      {/* Camera Capture Component */}&#10;      &lt;CameraCapture&#10;        open={cameraOpen}&#10;        onOpenChange={setCameraOpen}&#10;        onCapture={handlePhotoCapture}&#10;        title=&quot;Foto do Motorista&quot;&#10;        description=&quot;Posicione-se adequadamente e tire uma foto para o cadastro&quot;&#10;      /&gt;&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/fleet/add-truck-modal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/fleet/add-truck-modal.tsx" />
              <option name="originalContent" value="import { Dialog, DialogContent, DialogHeader, DialogTitle } from &quot;@/components/ui/dialog&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { CameraCapture } from &quot;@/components/ui/camera-capture&quot;;&#10;import { CameraIcon, Truck } from &quot;@phosphor-icons/react&quot;;&#10;&#10;interface Truck {&#10;  id: number;&#10;  plate: string;&#10;  model: string;&#10;  company: string;&#10;  capacity: string;&#10;  status: &quot;Ativo&quot; | &quot;Manutenção&quot; | &quot;Inativo&quot;;&#10;  observations: string;&#10;}&#10;&#10;interface AddTruckModalProps {&#10;  open: boolean;&#10;  onOpenChange: (open: boolean) =&gt; void;&#10;  onSave: (truck: Omit&lt;Truck, &quot;id&quot;&gt;) =&gt; void;&#10;}&#10;&#10;export function AddTruckModal({ open, onOpenChange, onSave }: AddTruckModalProps) {&#10;  const [formData, setFormData] = useState({&#10;    plate: &quot;&quot;,&#10;    model: &quot;&quot;,&#10;    company: &quot;&quot;,&#10;    capacity: &quot;&quot;,&#10;    status: &quot;Ativo&quot; as Truck[&quot;status&quot;],&#10;    observations: &quot;&quot;,&#10;  });&#10;&#10;  const [photo, setPhoto] = useState&lt;Blob | null&gt;(null);&#10;  const [photoPreview, setPhotoPreview] = useState&lt;string | null&gt;(null);&#10;  const [cameraOpen, setCameraOpen] = useState(false);&#10;&#10;  const handleSave = () =&gt; {&#10;    if (!formData.plate || !formData.model || !formData.company) {&#10;      alert(&quot;Por favor, preencha os campos obrigatórios&quot;);&#10;      return;&#10;    }&#10;&#10;    onSave(formData);&#10;&#10;    // Reset form&#10;    setFormData({&#10;      plate: &quot;&quot;,&#10;      model: &quot;&quot;,&#10;      company: &quot;&quot;,&#10;      capacity: &quot;&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      observations: &quot;&quot;,&#10;    });&#10;    setPhoto(null);&#10;    setPhotoPreview(null);&#10;&#10;    onOpenChange(false);&#10;  };&#10;&#10;  const handleChange = (field: string, value: string) =&gt; {&#10;    setFormData(prev =&gt; ({ ...prev, [field]: value }));&#10;  };&#10;&#10;  const handlePhotoCapture = (capturedPhoto: Blob) =&gt; {&#10;    setPhoto(capturedPhoto);&#10;    const previewUrl = URL.createObjectURL(capturedPhoto);&#10;    setPhotoPreview(previewUrl);&#10;  };&#10;&#10;  const removePhoto = () =&gt; {&#10;    if (photoPreview) {&#10;      URL.revokeObjectURL(photoPreview);&#10;    }&#10;    setPhoto(null);&#10;    setPhotoPreview(null);&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Dialog open={open} onOpenChange={onOpenChange}&gt;&#10;        &lt;DialogContent className=&quot;sm:max-w-[600px] max-h-[80vh] overflow-y-auto&quot;&gt;&#10;          &lt;DialogHeader&gt;&#10;            &lt;DialogTitle&gt;Novo Caminhão&lt;/DialogTitle&gt;&#10;          &lt;/DialogHeader&gt;&#10;&#10;          &lt;div className=&quot;grid gap-4 py-4&quot;&gt;&#10;            {/* Photo Section */}&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label&gt;Foto do Veículo&lt;/Label&gt;&#10;              &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                &lt;div className=&quot;w-20 h-20 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center overflow-hidden bg-gray-50&quot;&gt;&#10;                  {photoPreview ? (&#10;                    &lt;img&#10;                      src={photoPreview}&#10;                      alt=&quot;Preview&quot;&#10;                      className=&quot;w-full h-full object-cover&quot;&#10;                    /&gt;&#10;                  ) : (&#10;                    &lt;Truck className=&quot;w-8 h-8 text-gray-400&quot; /&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                  &lt;Button&#10;                    type=&quot;button&quot;&#10;                    onClick={() =&gt; setCameraOpen(true)}&#10;                    variant=&quot;outline&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;flex items-center gap-2&quot;&#10;                  &gt;&#10;                    &lt;CameraIcon className=&quot;h-4 w-4&quot; /&gt;&#10;                    {photoPreview ? &quot;Trocar Foto&quot; : &quot;Tirar Foto&quot;}&#10;                  &lt;/Button&gt;&#10;                  {photoPreview &amp;&amp; (&#10;                    &lt;Button&#10;                      type=&quot;button&quot;&#10;                      onClick={removePhoto}&#10;                      variant=&quot;outline&quot;&#10;                      size=&quot;sm&quot;&#10;                    &gt;&#10;                      Remover&#10;                    &lt;/Button&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;plate&quot;&gt;Placa *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;plate&quot;&#10;                  value={formData.plate}&#10;                  onChange={(e) =&gt; handleChange(&quot;plate&quot;, e.target.value.toUpperCase())}&#10;                  placeholder=&quot;ABC-1234&quot;&#10;                  maxLength={8}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;model&quot;&gt;Modelo *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;model&quot;&#10;                  value={formData.model}&#10;                  onChange={(e) =&gt; handleChange(&quot;model&quot;, e.target.value)}&#10;                  placeholder=&quot;Ex: Mercedes-Benz Axor 2644&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;company&quot;&gt;Empresa *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;company&quot;&#10;                  value={formData.company}&#10;                  onChange={(e) =&gt; handleChange(&quot;company&quot;, e.target.value)}&#10;                  placeholder=&quot;Nome da empresa proprietária&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;capacity&quot;&gt;Capacidade&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;capacity&quot;&#10;                  value={formData.capacity}&#10;                  onChange={(e) =&gt; handleChange(&quot;capacity&quot;, e.target.value)}&#10;                  placeholder=&quot;Ex: 30.000 kg&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;status&quot;&gt;Status&lt;/Label&gt;&#10;              &lt;Select&#10;                value={formData.status}&#10;                onValueChange={(value: Truck[&quot;status&quot;]) =&gt; handleChange(&quot;status&quot;, value)}&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;Ativo&quot;&gt;Ativo&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;Manutenção&quot;&gt;Manutenção&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;Inativo&quot;&gt;Inativo&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;observations&quot;&gt;Observações&lt;/Label&gt;&#10;              &lt;Textarea&#10;                id=&quot;observations&quot;&#10;                value={formData.observations}&#10;                onChange={(e) =&gt; handleChange(&quot;observations&quot;, e.target.value)}&#10;                placeholder=&quot;Informações adicionais sobre o caminhão&quot;&#10;                rows={3}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex justify-end gap-3&quot;&gt;&#10;            &lt;Button variant=&quot;secondary&quot; onClick={() =&gt; onOpenChange(false)}&gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleSave} className=&quot;bg-primary-900 hover:bg-primary-900/80&quot;&gt;&#10;              Salvar&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogContent&gt;&#10;      &lt;/Dialog&gt;&#10;&#10;      {/* Camera Capture Dialog */}&#10;      {cameraOpen &amp;&amp; (&#10;        &lt;CameraCapture&#10;          open={cameraOpen}&#10;          onOpenChange={setCameraOpen}&#10;          onCapture={handlePhotoCapture}&#10;        /&gt;&#10;      )}&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { Dialog, DialogContent, DialogHeader, DialogTitle } from &quot;@/components/ui/dialog&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { CameraCapture } from &quot;@/components/ui/camera-capture&quot;;&#10;import { CameraIcon, Truck } from &quot;@phosphor-icons/react&quot;;&#10;&#10;interface Truck {&#10;  id: number;&#10;  plate: string;&#10;  model: string;&#10;  company: string;&#10;  capacity: string;&#10;  status: &quot;Ativo&quot; | &quot;Manutenção&quot; | &quot;Inativo&quot;;&#10;  observations: string;&#10;}&#10;&#10;interface AddTruckModalProps {&#10;  open: boolean;&#10;  onOpenChange: (open: boolean) =&gt; void;&#10;  onSave: (truck: Omit&lt;Truck, &quot;id&quot;&gt;) =&gt; void;&#10;}&#10;&#10;export function AddTruckModal({ open, onOpenChange, onSave }: AddTruckModalProps) {&#10;  const [formData, setFormData] = useState({&#10;    plate: &quot;&quot;,&#10;    model: &quot;&quot;,&#10;    company: &quot;&quot;,&#10;    capacity: &quot;&quot;,&#10;    status: &quot;Ativo&quot; as Truck[&quot;status&quot;],&#10;    observations: &quot;&quot;,&#10;  });&#10;&#10;  const [photo, setPhoto] = useState&lt;File | null&gt;(null);&#10;  const [photoPreview, setPhotoPreview] = useState&lt;string | null&gt;(null);&#10;  const [cameraOpen, setCameraOpen] = useState(false);&#10;&#10;  const handleSave = () =&gt; {&#10;    if (!formData.plate || !formData.model || !formData.company) {&#10;      alert(&quot;Por favor, preencha os campos obrigatórios&quot;);&#10;      return;&#10;    }&#10;&#10;    onSave(formData);&#10;&#10;    // Reset form&#10;    setFormData({&#10;      plate: &quot;&quot;,&#10;      model: &quot;&quot;,&#10;      company: &quot;&quot;,&#10;      capacity: &quot;&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      observations: &quot;&quot;,&#10;    });&#10;    setPhoto(null);&#10;    setPhotoPreview(null);&#10;&#10;    onOpenChange(false);&#10;  };&#10;&#10;  const handleChange = (field: string, value: string) =&gt; {&#10;    setFormData(prev =&gt; ({ ...prev, [field]: value }));&#10;  };&#10;&#10;  const handlePhotoCapture = (capturedPhoto: File) =&gt; {&#10;    setPhoto(capturedPhoto);&#10;    const previewUrl = URL.createObjectURL(capturedPhoto);&#10;    setPhotoPreview(previewUrl);&#10;  };&#10;&#10;  const removePhoto = () =&gt; {&#10;    if (photoPreview) {&#10;      URL.revokeObjectURL(photoPreview);&#10;    }&#10;    setPhoto(null);&#10;    setPhotoPreview(null);&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Dialog open={open} onOpenChange={onOpenChange}&gt;&#10;        &lt;DialogContent className=&quot;sm:max-w-[600px] max-h-[80vh] overflow-y-auto&quot;&gt;&#10;          &lt;DialogHeader&gt;&#10;            &lt;DialogTitle&gt;Novo Caminhão&lt;/DialogTitle&gt;&#10;          &lt;/DialogHeader&gt;&#10;&#10;          &lt;div className=&quot;grid gap-4 py-4&quot;&gt;&#10;            {/* Photo Section */}&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label&gt;Foto do Veículo&lt;/Label&gt;&#10;              &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                &lt;div className=&quot;w-20 h-20 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center overflow-hidden bg-gray-50&quot;&gt;&#10;                  {photoPreview ? (&#10;                    &lt;img&#10;                      src={photoPreview}&#10;                      alt=&quot;Preview&quot;&#10;                      className=&quot;w-full h-full object-cover&quot;&#10;                    /&gt;&#10;                  ) : (&#10;                    &lt;Truck className=&quot;w-8 h-8 text-gray-400&quot; /&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                  &lt;Button&#10;                    type=&quot;button&quot;&#10;                    onClick={() =&gt; setCameraOpen(true)}&#10;                    variant=&quot;outline&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;flex items-center gap-2&quot;&#10;                  &gt;&#10;                    &lt;CameraIcon className=&quot;h-4 w-4&quot; /&gt;&#10;                    {photoPreview ? &quot;Trocar Foto&quot; : &quot;Tirar Foto&quot;}&#10;                  &lt;/Button&gt;&#10;                  {photoPreview &amp;&amp; (&#10;                    &lt;Button&#10;                      type=&quot;button&quot;&#10;                      onClick={removePhoto}&#10;                      variant=&quot;outline&quot;&#10;                      size=&quot;sm&quot;&#10;                    &gt;&#10;                      Remover&#10;                    &lt;/Button&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;plate&quot;&gt;Placa *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;plate&quot;&#10;                  value={formData.plate}&#10;                  onChange={(e) =&gt; handleChange(&quot;plate&quot;, e.target.value.toUpperCase())}&#10;                  placeholder=&quot;ABC-1234&quot;&#10;                  maxLength={8}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;model&quot;&gt;Modelo *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;model&quot;&#10;                  value={formData.model}&#10;                  onChange={(e) =&gt; handleChange(&quot;model&quot;, e.target.value)}&#10;                  placeholder=&quot;Ex: Mercedes-Benz Axor 2644&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;company&quot;&gt;Empresa *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;company&quot;&#10;                  value={formData.company}&#10;                  onChange={(e) =&gt; handleChange(&quot;company&quot;, e.target.value)}&#10;                  placeholder=&quot;Nome da empresa proprietária&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;capacity&quot;&gt;Capacidade&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;capacity&quot;&#10;                  value={formData.capacity}&#10;                  onChange={(e) =&gt; handleChange(&quot;capacity&quot;, e.target.value)}&#10;                  placeholder=&quot;Ex: 30.000 kg&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;status&quot;&gt;Status&lt;/Label&gt;&#10;              &lt;Select&#10;                value={formData.status}&#10;                onValueChange={(value: Truck[&quot;status&quot;]) =&gt; handleChange(&quot;status&quot;, value)}&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;Ativo&quot;&gt;Ativo&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;Manutenção&quot;&gt;Manutenção&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;Inativo&quot;&gt;Inativo&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;observations&quot;&gt;Observações&lt;/Label&gt;&#10;              &lt;Textarea&#10;                id=&quot;observations&quot;&#10;                value={formData.observations}&#10;                onChange={(e) =&gt; handleChange(&quot;observations&quot;, e.target.value)}&#10;                placeholder=&quot;Informações adicionais sobre o caminhão&quot;&#10;                rows={3}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex justify-end gap-3&quot;&gt;&#10;            &lt;Button variant=&quot;secondary&quot; onClick={() =&gt; onOpenChange(false)}&gt;&#10;              Cancelar&#10;            &lt;/Button&gt;&#10;            &lt;Button onClick={handleSave} className=&quot;bg-primary-900 hover:bg-primary-900/80&quot;&gt;&#10;              Salvar&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogContent&gt;&#10;      &lt;/Dialog&gt;&#10;&#10;      {/* Camera Capture Dialog */}&#10;      {cameraOpen &amp;&amp; (&#10;        &lt;CameraCapture&#10;          open={cameraOpen}&#10;          onOpenChange={setCameraOpen}&#10;          onCapture={handlePhotoCapture}&#10;        /&gt;&#10;      )}&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/filters-card.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/filters-card.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import {&#10;  Select,&#10;  SelectContent,&#10;  SelectItem,&#10;  SelectTrigger,&#10;  SelectValue,&#10;} from &quot;@/components/ui/select&quot;;&#10;import { Filter, X } from &quot;lucide-react&quot;;&#10;&#10;interface FilterState {&#10;  startDate: string;&#10;  endDate: string;&#10;  driver: string;&#10;  company: string;&#10;  cargoType: string;&#10;  plate: string;&#10;}&#10;&#10;interface FiltersCardProps {&#10;  filters: FilterState;&#10;  setFilters: (filters: FilterState) =&gt; void;&#10;  onClearFilters: () =&gt; void;&#10;}&#10;&#10;export function FiltersCard({ filters, setFilters, onClearFilters }: FiltersCardProps) {&#10;  return (&#10;    &lt;Card className=&quot;w-full lg:w-80 h-fit&quot;&gt;&#10;      &lt;CardHeader className=&quot;flex flex-row justify-between pb-4&quot;&gt;&#10;        &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;          &lt;Filter className=&quot;h-5 w-5 text-primary-600&quot; /&gt;&#10;          Filtros&#10;        &lt;/CardTitle&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;startDate&quot;&gt;Data Início&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;startDate&quot;&#10;              type=&quot;date&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.startDate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, startDate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;endDate&quot;&gt;Data Fim&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;endDate&quot;&#10;              type=&quot;date&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.endDate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, endDate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;plate&quot;&gt;Placa do Veículo&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;plate&quot;&#10;              placeholder=&quot;ABC-1234&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.plate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, plate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;driver-filter&quot;&gt;Motorista&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;driver-filter&quot;&#10;              placeholder=&quot;Nome do motorista&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.driver}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, driver: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;company-filter&quot;&gt;Empresa&lt;/Label&gt;&#10;            &lt;Select value={filters.company} onValueChange={(value) =&gt; setFilters({ ...filters, company: value })}&gt;&#10;              &lt;SelectTrigger className=&quot;mt-1&quot;&gt;&#10;                &lt;SelectValue placeholder=&quot;Todas as empresas&quot; /&gt;&#10;              &lt;/SelectTrigger&gt;&#10;              &lt;SelectContent&gt;&#10;                &lt;SelectItem value=&quot;all&quot;&gt;Todas as empresas&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Agro Brasil Ltda&quot;&gt;Agro Brasil Ltda&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Transportes Campo&quot;&gt;Transportes Campo&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Rural Express&quot;&gt;Rural Express&lt;/SelectItem&gt;&#10;              &lt;/SelectContent&gt;&#10;            &lt;/Select&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;cargo-filter&quot;&gt;Tipo de Carga&lt;/Label&gt;&#10;            &lt;Select value={filters.cargoType} onValueChange={(value) =&gt; setFilters({ ...filters, cargoType: value })}&gt;&#10;              &lt;SelectTrigger className=&quot;mt-1&quot;&gt;&#10;                &lt;SelectValue placeholder=&quot;Todos os tipos&quot; /&gt;&#10;              &lt;/SelectTrigger&gt;&#10;              &lt;SelectContent&gt;&#10;                &lt;SelectItem value=&quot;all&quot;&gt;Todos os tipos&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Soja&quot;&gt;Soja&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Milho&quot;&gt;Milho&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Fertilizante&quot;&gt;Fertilizante&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Ração&quot;&gt;Ração&lt;/SelectItem&gt;&#10;              &lt;/SelectContent&gt;&#10;            &lt;/Select&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;outline&quot;&#10;            onClick={onClearFilters}&#10;            className=&quot;w-full&quot;&#10;          &gt;&#10;            &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Limpar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/history-header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/history-header.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Download } from &quot;lucide-react&quot;;&#10;&#10;interface WeighingHistoryHeaderProps {&#10;  onExport: () =&gt; void;&#10;}&#10;&#10;export default function Component({ onExport }: WeighingHistoryHeaderProps) {&#10;  return (&#10;    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;      &lt;div&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold  text-white&quot;&gt;&#10;          Histórico de Pesagens&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#10;          Consulte o histórico completo de pesagens&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;Button className=&quot;bg-primary-900 hover:bg-primary-900/70&quot; onClick={onExport}&gt;&#10;        &lt;Download className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;        Exportar&#10;      &lt;/Button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;export default function Component() {&#13;&#10;  return (&#13;&#10;    &lt;div&gt;&#13;&#10;      &lt;div&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#13;&#10;          Histórico de Pesagens&#13;&#10;        &lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#13;&#10;          Consulte o histórico completo de pesagens&#13;&#10;        &lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/weighing-history-header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/weighing-history-header.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Download } from &quot;lucide-react&quot;;&#10;&#10;interface WeighingHistoryHeaderProps {&#10;  onExport: () =&gt; void;&#10;}&#10;&#10;export function WeighingHistoryHeader({ onExport }: WeighingHistoryHeaderProps) {&#10;  return (&#10;    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;      &lt;div&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#10;          Histórico de Pesagens&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#10;          Consulte o histórico completo de pesagens&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;Button className=&quot;bg-primary-900 hover:bg-primary-900/70&quot; onClick={onExport}&gt;&#10;        &lt;Download className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;        Exportar&#10;      &lt;/Button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/weighing-table.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/weighing-table.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from &quot;@/components/ui/table&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import {&#10;  Weight,&#10;  CheckCircle,&#10;  Clock,&#10;  ChevronUp,&#10;  ChevronDown,&#10;  ChevronsUpDown,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;&#10;interface WeighingRecord {&#10;  id: number;&#10;  date: string;&#10;  time: string;&#10;  plate: string;&#10;  driver: string;&#10;  company: string;&#10;  cargo: string;&#10;  entryWeight: string;&#10;  exitWeight: string;&#10;  netWeight: string;&#10;  status: string;&#10;}&#10;&#10;interface SortConfig {&#10;  key: string;&#10;  direction: &quot;asc&quot; | &quot;desc&quot;;&#10;}&#10;&#10;interface WeighingTableProps {&#10;  records: WeighingRecord[];&#10;  sortConfig: SortConfig;&#10;  onSort: (key: string) =&gt; void;&#10;}&#10;&#10;const tableCols = [&#10;  { label: &quot;Data/Hora&quot;, key: &quot;date&quot; },&#10;  { label: &quot;Caminhão&quot;, key: &quot;plate&quot; },&#10;  { label: &quot;Motorista&quot;, key: &quot;driver&quot; },&#10;  { label: &quot;Empresa&quot;, key: &quot;company&quot; },&#10;  { label: &quot;Carga&quot;, key: &quot;cargo&quot; },&#10;  { label: &quot;Entrada (kg)&quot;, key: &quot;entryWeight&quot; },&#10;  { label: &quot;Saída (kg)&quot;, key: &quot;exitWeight&quot; },&#10;  { label: &quot;Líquido (kg)&quot;, key: &quot;netWeight&quot; },&#10;  { label: &quot;Status&quot;, key: &quot;status&quot; },&#10;];&#10;&#10;export function WeighingTable({ records, sortConfig, onSort }: WeighingTableProps) {&#10;  const getSortIcon = (columnKey: string) =&gt; {&#10;    if (sortConfig.key !== columnKey) {&#10;      return &lt;ChevronsUpDown className=&quot;h-4 w-4 text-gray-400&quot; /&gt;;&#10;    }&#10;    return sortConfig.direction === &quot;asc&quot; &#10;      ? &lt;ChevronUp className=&quot;h-4 w-4 text-primary-600&quot; /&gt;&#10;      : &lt;ChevronDown className=&quot;h-4 w-4 text-primary-600&quot; /&gt;;&#10;  };&#10;&#10;  return (&#10;    &lt;Card className=&quot;flex-1&quot;&gt;&#10;      &lt;CardHeader&gt;&#10;        &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;          &lt;Weight className=&quot;h-5 w-5 text-primary-600&quot; /&gt;&#10;          Registros de Pesagem&#10;        &lt;/CardTitle&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent&gt;&#10;        &lt;div className=&quot;overflow-x-auto rounded-2xl&quot;&gt;&#10;          &lt;Table&gt;&#10;            &lt;TableHeader&gt;&#10;              &lt;TableRow&gt;&#10;                {tableCols.map((col, index) =&gt; (&#10;                  &lt;TableHead &#10;                    key={index} &#10;                    className=&quot;cursor-pointer hover:bg-gray-50 select-none&quot;&#10;                    onClick={() =&gt; onSort(col.key)}&#10;                  &gt;&#10;                    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                      {col.label}&#10;                      {getSortIcon(col.key)}&#10;                    &lt;/div&gt;&#10;                  &lt;/TableHead&gt;&#10;                ))}&#10;              &lt;/TableRow&gt;&#10;            &lt;/TableHeader&gt;&#10;            &lt;TableBody&gt;&#10;              {records.map((record) =&gt; (&#10;                &lt;TableRow key={record.id}&gt;&#10;                  &lt;TableCell&gt;&#10;                    &lt;div className=&quot;text-sm&quot;&gt;&#10;                      &lt;div className=&quot;font-medium&quot;&gt;{record.date}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-gray-500&quot;&gt;{record.time}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;&#10;                    {record.plate}&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.driver}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.company}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.cargo}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.entryWeight}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.exitWeight}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;&#10;                    {record.netWeight}&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;&#10;                    &lt;Badge&#10;                      variant=&quot;secondary&quot;&#10;                      className={cn(&#10;                        &quot;flex items-center w-fit space-x-1&quot;,&#10;                        record.status === &quot;Concluído&quot;&#10;                        ? &quot;bg-green-100 text-green-700&quot;&#10;                        : &quot;bg-amber-100 text-amber-700&quot;&#10;                      )}&#10;                    &gt;&#10;                      &lt;span&gt;&#10;                        {record.status}&#10;                      &lt;/span&gt;&#10;                      {&#10;                        record.status === &quot;Concluído&quot;&#10;                          ? &lt;CheckCircle className=&quot;w-4 h-4&quot;/&gt;&#10;                          : &lt;Clock className=&quot;w-4 h-4&quot;/&gt;&#10;                      }&#10;                    &lt;/Badge&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))}&#10;            &lt;/TableBody&gt;&#10;          &lt;/Table&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/layout/sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/layout/sidebar.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Fragment, useState, useEffect } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { Dialog } from &quot;@radix-ui/react-dialog&quot;;&#10;import { Transition } from &quot;@headlessui/react&quot;;&#10;import {&#10;  LayoutDashboard,&#10;  Weight,&#10;  History,&#10;  Truck,&#10;  IdCardLanyard,&#10;  Handshake,&#10;  Settings,&#10;  X, LucideIcon,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface NavItem {&#10;  name: string;&#10;  href: string;&#10;  icon: LucideIcon;&#10;}&#10;&#10;const navigation: NavItem[] = [&#10;  { name: &quot;Dashboard&quot;, href: &quot;/&quot;, icon: LayoutDashboard },&#10;  { name: &quot;Pesagem Ativa&quot;, href: &quot;/weighing&quot;, icon: Weight },&#10;  { name: &quot;Histórico&quot;, href: &quot;/history&quot;, icon: History },&#10;  { name: &quot;Frota&quot;, href: &quot;/fleet&quot;, icon: Truck },&#10;  { name: &quot;Motoristas&quot;, href: &quot;/drivers&quot;, icon: IdCardLanyard },&#10;  { name: &quot;Parceiros&quot;, href: &quot;/partners&quot;, icon: Handshake },&#10;];&#10;&#10;const systemNavigation: NavItem[] = [&#10;  { name: &quot;Configurações&quot;, href: &quot;/settings&quot;, icon: Settings },&#10;];&#10;&#10;interface SidebarProps {&#10;  open: boolean;&#10;  setOpen: (open: boolean) =&gt; void;&#10;}&#10;&#10;export function Sidebar({ open, setOpen }: SidebarProps) {&#10;  const pathname = usePathname();&#10;&#10;  const selectedLinkIndex = navigation.findIndex((item) =&gt; item.href === pathname);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;teste&quot;)&#10;  }, [])&#10;&#10;  const NavItem = ({item} : {item: NavItem}) =&gt; {&#10;    return (&#10;      &lt;Link&#10;        href={item.href}&#10;        className={cn(&#10;          &quot;flex items-center gap-x-3 py-3.5 px-6&quot;,&#10;          &quot;text-sm leading-6 text-gray-700&quot;,&#10;          &quot;transition-colors group&quot;,&#10;          &quot;hover:text-black hover:bg-gray-100&quot;,&#10;          pathname === item.href &amp;&amp; &quot;text-primary-600&quot;&#10;        )}&#10;      &gt;&#10;        &lt;item.icon&#10;          className={cn(&#10;            pathname === item.href&#10;              ? &quot;text-primary-600&quot;&#10;              : &quot;text-gray-400 group-hover:text-black&quot;,&#10;            &quot;h-5 w-5 shrink-0 transition-colors&quot;&#10;          )}&#10;          aria-hidden=&quot;true&quot;&#10;        /&gt;&#10;        {item.name}&#10;      &lt;/Link&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col w-[230px] z-20 fixed min-h-screen gap-y-7 bg-white shadow-lg&quot;&gt;&#10;      &lt;div className=&quot;flex items-center gap-3 px-6 pt-4 shrink-0&quot;&gt;&#10;        &lt;Image&#10;          src=&quot;/images/logo.png&quot;&#10;          alt=&quot;Logo&quot;&#10;          width={74}&#10;          height={74}&#10;          className=&quot;h-10 w-auto&quot;&#10;        /&gt;&#10;        &lt;div className=&quot;flex flex-col&quot;&gt;&#10;          &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;Semensol&lt;/h1&gt;&#10;          &lt;p className=&quot;text-xs text-gray-500 font-medium&quot;&gt;Sistema de pesagem&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;nav className=&quot;flex flex-col h-full gap-y-7 relative&quot;&gt;&#10;        &lt;div&#10;          style={{&#10;            top: selectedLinkIndex === 0 ? 32 : (52 * selectedLinkIndex) + 32&#10;          }}&#10;          className=&quot;&#10;            absolute bg-primary-100 w-full h-[52px]&#10;            border-l-4 border-primary-500&#10;            transition-all duration-300&#10;            z-0&#10;          &quot;&#10;        /&gt;&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            OPERAÇÕES&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {navigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mt-auto&quot;&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            SISTEMA&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {systemNavigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;      &lt;div className=&quot;flex flex-col mt-auto&quot;&gt;&#10;        &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;          STATUS&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center gap-3 mb-2 mt-auto px-6 py-4&quot;&gt;&#10;          &lt;div className=&quot;h-2 w-2 rounded-full bg-green-500&quot;&gt;&lt;/div&gt;&#10;          &lt;span className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;            Sistema Online&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Fragment, useState, useEffect } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { Dialog } from &quot;@radix-ui/react-dialog&quot;;&#10;import { Transition } from &quot;@headlessui/react&quot;;&#10;import {&#10;  LayoutDashboard,&#10;  Weight,&#10;  History,&#10;  Truck,&#10;  IdCardLanyard,&#10;  Handshake,&#10;  Settings,&#10;  X, LucideIcon,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface NavItem {&#10;  name: string;&#10;  href: string;&#10;  icon: LucideIcon;&#10;}&#10;&#10;const navigation: NavItem[] = [&#10;  { name: &quot;Dashboard&quot;, href: &quot;/&quot;, icon: LayoutDashboard },&#10;  { name: &quot;Pesagem Ativa&quot;, href: &quot;/weighing&quot;, icon: Weight },&#10;  { name: &quot;Histórico&quot;, href: &quot;/history&quot;, icon: History },&#10;  { name: &quot;Frota&quot;, href: &quot;/fleet&quot;, icon: Truck },&#10;  { name: &quot;Motoristas&quot;, href: &quot;/drivers&quot;, icon: IdCardLanyard },&#10;  { name: &quot;Parceiros&quot;, href: &quot;/partners&quot;, icon: Handshake },&#10;];&#10;&#10;const systemNavigation: NavItem[] = [&#10;  { name: &quot;Configurações&quot;, href: &quot;/settings&quot;, icon: Settings },&#10;];&#10;&#10;interface SidebarProps {&#10;  open: boolean;&#10;  setOpen: (open: boolean) =&gt; void;&#10;}&#10;&#10;export function Sidebar({ open, setOpen }: SidebarProps) {&#10;  const pathname = usePathname();&#10;&#10;  const selectedLinkIndex = navigation.findIndex((item) =&gt; item.href === pathname);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;teste&quot;)&#10;  }, [])&#10;&#10;  const NavItem = ({item} : {item: NavItem}) =&gt; {&#10;    return (&#10;      &lt;Link&#10;        href={item.href}&#10;        className={cn(&#10;          &quot;flex items-center gap-x-3 py-3.5 px-6&quot;,&#10;          &quot;text-sm leading-6 text-gray-700&quot;,&#10;          &quot;transition-colors group&quot;,&#10;          &quot;hover:text-black hover:bg-gray-100&quot;,&#10;          pathname === item.href &amp;&amp; &quot;text-primary-600&quot;&#10;        )}&#10;      &gt;&#10;        &lt;item.icon&#10;          className={cn(&#10;            pathname === item.href&#10;              ? &quot;text-primary-600&quot;&#10;              : &quot;text-gray-400 group-hover:text-black&quot;,&#10;            &quot;h-5 w-5 shrink-0 transition-colors&quot;&#10;          )}&#10;          aria-hidden=&quot;true&quot;&#10;        /&gt;&#10;        {item.name}&#10;      &lt;/Link&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col w-[230px] z-20 fixed min-h-screen gap-y-7 bg-white shadow-lg&quot;&gt;&#10;      &lt;div className=&quot;flex items-center gap-3 px-6 pt-4 shrink-0&quot;&gt;&#10;        &lt;Image&#10;          src=&quot;/images/logo.png&quot;&#10;          alt=&quot;Logo&quot;&#10;          width={74}&#10;          height={74}&#10;          className=&quot;h-10 w-auto&quot;&#10;        /&gt;&#10;        &lt;div className=&quot;flex flex-col&quot;&gt;&#10;          &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;Semensol&lt;/h1&gt;&#10;          &lt;p className=&quot;text-xs text-gray-500 font-medium&quot;&gt;Sistema de pesagem&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;nav className=&quot;flex flex-col h-full gap-y-7 relative&quot;&gt;&#10;        &lt;div&#10;          style={{&#10;            top: selectedLinkIndex === 0 ? 32 : (52 * selectedLinkIndex) + 32&#10;          }}&#10;          className=&quot;&#10;            absolute bg-primary-100 w-full h-[52px]&#10;            border-l-4 border-primary-500&#10;            transition-all duration-300&#10;            z-0&#10;          &quot;&#10;        /&gt;&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            OPERAÇÕES&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {navigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mt-auto&quot;&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            SISTEMA&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {systemNavigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;      &lt;div className=&quot;flex flex-col mt-auto&quot;&gt;&#10;        &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;          STATUS&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center gap-3 mb-2 mt-auto px-6 py-4&quot;&gt;&#10;          &lt;div className=&quot;h-2 w-2 rounded-full bg-green-500&quot;&gt;&lt;/div&gt;&#10;          &lt;span className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;            Sistema Online&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/accordion.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/accordion.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as AccordionPrimitive from '@radix-ui/react-accordion';&#10;import { ChevronDown } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Accordion = AccordionPrimitive.Root;&#10;&#10;const AccordionItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Item&#10;    ref={ref}&#10;    className={cn('border-b', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;AccordionItem.displayName = 'AccordionItem';&#10;&#10;const AccordionTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Trigger&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Header className=&quot;flex&quot;&gt;&#10;    &lt;AccordionPrimitive.Trigger&#10;      ref={ref}&#10;      className={cn(&#10;        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&amp;[data-state=open]&gt;svg]:rotate-180',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;ChevronDown className=&quot;h-4 w-4 shrink-0 transition-transform duration-200&quot; /&gt;&#10;    &lt;/AccordionPrimitive.Trigger&gt;&#10;  &lt;/AccordionPrimitive.Header&gt;&#10;));&#10;AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;&#10;&#10;const AccordionContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Content&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Content&#10;    ref={ref}&#10;    className=&quot;overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down&quot;&#10;    {...props}&#10;  &gt;&#10;    &lt;div className={cn('pb-4 pt-0', className)}&gt;{children}&lt;/div&gt;&#10;  &lt;/AccordionPrimitive.Content&gt;&#10;));&#10;&#10;AccordionContent.displayName = AccordionPrimitive.Content.displayName;&#10;&#10;export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as AccordionPrimitive from '@radix-ui/react-accordion';&#10;import { ChevronDownIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Accordion = AccordionPrimitive.Root;&#10;&#10;const AccordionItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Item&#10;    ref={ref}&#10;    className={cn('border-b', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;AccordionItem.displayName = 'AccordionItem';&#10;&#10;const AccordionTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Trigger&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Header className=&quot;flex&quot;&gt;&#10;    &lt;AccordionPrimitive.Trigger&#10;      ref={ref}&#10;      className={cn(&#10;        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&amp;[data-state=open]&gt;svg]:rotate-180',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;ChevronDownIcon className=&quot;h-4 w-4 shrink-0 transition-transform duration-200&quot; /&gt;&#10;    &lt;/AccordionPrimitive.Trigger&gt;&#10;  &lt;/AccordionPrimitive.Header&gt;&#10;));&#10;AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;&#10;&#10;const AccordionContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Content&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Content&#10;    ref={ref}&#10;    className=&quot;overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down&quot;&#10;    {...props}&#10;  &gt;&#10;    &lt;div className={cn('pb-4 pt-0', className)}&gt;{children}&lt;/div&gt;&#10;  &lt;/AccordionPrimitive.Content&gt;&#10;));&#10;&#10;AccordionContent.displayName = AccordionPrimitive.Content.displayName;&#10;&#10;export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/breadcrumb.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/breadcrumb.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import { Slot } from '@radix-ui/react-slot';&#10;import { ChevronRight, MoreHorizontal } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Breadcrumb = React.forwardRef&lt;&#10;  HTMLElement,&#10;  React.ComponentPropsWithoutRef&lt;'nav'&gt; &amp; {&#10;    separator?: React.ReactNode;&#10;  }&#10;&gt;(({ ...props }, ref) =&gt; &lt;nav ref={ref} aria-label=&quot;breadcrumb&quot; {...props} /&gt;);&#10;Breadcrumb.displayName = 'Breadcrumb';&#10;&#10;const BreadcrumbList = React.forwardRef&lt;&#10;  HTMLOListElement,&#10;  React.ComponentPropsWithoutRef&lt;'ol'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ol&#10;    ref={ref}&#10;    className={cn(&#10;      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbList.displayName = 'BreadcrumbList';&#10;&#10;const BreadcrumbItem = React.forwardRef&lt;&#10;  HTMLLIElement,&#10;  React.ComponentPropsWithoutRef&lt;'li'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;li&#10;    ref={ref}&#10;    className={cn('inline-flex items-center gap-1.5', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbItem.displayName = 'BreadcrumbItem';&#10;&#10;const BreadcrumbLink = React.forwardRef&lt;&#10;  HTMLAnchorElement,&#10;  React.ComponentPropsWithoutRef&lt;'a'&gt; &amp; {&#10;    asChild?: boolean;&#10;  }&#10;&gt;(({ asChild, className, ...props }, ref) =&gt; {&#10;  const Comp = asChild ? Slot : 'a';&#10;&#10;  return (&#10;    &lt;Comp&#10;      ref={ref}&#10;      className={cn('transition-colors hover:text-foreground', className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;BreadcrumbLink.displayName = 'BreadcrumbLink';&#10;&#10;const BreadcrumbPage = React.forwardRef&lt;&#10;  HTMLSpanElement,&#10;  React.ComponentPropsWithoutRef&lt;'span'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;span&#10;    ref={ref}&#10;    role=&quot;link&quot;&#10;    aria-disabled=&quot;true&quot;&#10;    aria-current=&quot;page&quot;&#10;    className={cn('font-normal text-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbPage.displayName = 'BreadcrumbPage';&#10;&#10;const BreadcrumbSeparator = ({&#10;  children,&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'li'&gt;) =&gt; (&#10;  &lt;li&#10;    role=&quot;presentation&quot;&#10;    aria-hidden=&quot;true&quot;&#10;    className={cn('[&amp;&gt;svg]:size-3.5', className)}&#10;    {...props}&#10;  &gt;&#10;    {children ?? &lt;ChevronRight /&gt;}&#10;  &lt;/li&gt;&#10;);&#10;BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';&#10;&#10;const BreadcrumbEllipsis = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'span'&gt;) =&gt; (&#10;  &lt;span&#10;    role=&quot;presentation&quot;&#10;    aria-hidden=&quot;true&quot;&#10;    className={cn('flex h-9 w-9 items-center justify-center', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span className=&quot;sr-only&quot;&gt;More&lt;/span&gt;&#10;  &lt;/span&gt;&#10;);&#10;BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';&#10;&#10;export {&#10;  Breadcrumb,&#10;  BreadcrumbList,&#10;  BreadcrumbItem,&#10;  BreadcrumbLink,&#10;  BreadcrumbPage,&#10;  BreadcrumbSeparator,&#10;  BreadcrumbEllipsis,&#10;};&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import { Slot } from '@radix-ui/react-slot';&#10;import { ChevronRightIcon, MoreHorizontalIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Breadcrumb = React.forwardRef&lt;&#10;  HTMLElement,&#10;  React.ComponentPropsWithoutRef&lt;'nav'&gt; &amp; {&#10;    separator?: React.ReactNode;&#10;  }&#10;&gt;(({ ...props }, ref) =&gt; &lt;nav ref={ref} aria-label=&quot;breadcrumb&quot; {...props} /&gt;);&#10;Breadcrumb.displayName = 'Breadcrumb';&#10;&#10;const BreadcrumbList = React.forwardRef&lt;&#10;  HTMLOListElement,&#10;  React.ComponentPropsWithoutRef&lt;'ol'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ol&#10;    ref={ref}&#10;    className={cn(&#10;      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbList.displayName = 'BreadcrumbList';&#10;&#10;const BreadcrumbItem = React.forwardRef&lt;&#10;  HTMLLIElement,&#10;  React.ComponentPropsWithoutRef&lt;'li'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;li&#10;    ref={ref}&#10;    className={cn('inline-flex items-center gap-1.5', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbItem.displayName = 'BreadcrumbItem';&#10;&#10;const BreadcrumbLink = React.forwardRef&lt;&#10;  HTMLAnchorElement,&#10;  React.ComponentPropsWithoutRef&lt;'a'&gt; &amp; {&#10;    asChild?: boolean;&#10;  }&#10;&gt;(({ asChild, className, ...props }, ref) =&gt; {&#10;  const Comp = asChild ? Slot : 'a';&#10;&#10;  return (&#10;    &lt;Comp&#10;      ref={ref}&#10;      className={cn('transition-colors hover:text-foreground', className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;BreadcrumbLink.displayName = 'BreadcrumbLink';&#10;&#10;const BreadcrumbPage = React.forwardRef&lt;&#10;  HTMLSpanElement,&#10;  React.ComponentPropsWithoutRef&lt;'span'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;span&#10;    ref={ref}&#10;    role=&quot;link&quot;&#10;    aria-disabled=&quot;true&quot;&#10;    aria-current=&quot;page&quot;&#10;    className={cn('font-normal text-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbPage.displayName = 'BreadcrumbPage';&#10;&#10;const BreadcrumbSeparator = ({&#10;  children,&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'li'&gt;) =&gt; (&#10;  &lt;li&#10;    role=&quot;presentation&quot;&#10;    aria-hidden=&quot;true&quot;&#10;    className={cn('[&amp;&gt;svg]:size-3.5', className)}&#10;    {...props}&#10;  &gt;&#10;    {children ?? &lt;ChevronRightIcon /&gt;}&#10;  &lt;/li&gt;&#10;);&#10;BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';&#10;&#10;const BreadcrumbEllipsis = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'span'&gt;) =&gt; (&#10;  &lt;span&#10;    role=&quot;presentation&quot;&#10;    aria-hidden=&quot;true&quot;&#10;    className={cn('flex h-9 w-9 items-center justify-center', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;MoreHorizontalIcon className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span className=&quot;sr-only&quot;&gt;More&lt;/span&gt;&#10;  &lt;/span&gt;&#10;);&#10;BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';&#10;&#10;export {&#10;  Breadcrumb,&#10;  BreadcrumbList,&#10;  BreadcrumbItem,&#10;  BreadcrumbLink,&#10;  BreadcrumbPage,&#10;  BreadcrumbSeparator,&#10;  BreadcrumbEllipsis,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/camera-capture.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/camera-capture.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useRef, useCallback } from &quot;react&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Dialog, DialogContent, DialogHeader, DialogTitle } from &quot;@/components/ui/dialog&quot;;&#10;import { CameraIcon, CameraRotate, Check, Upload, X } from &quot;@phosphor-icons/react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { useToast } from &quot;@/hooks/use-toast&quot;;&#10;&#10;interface CameraCaptureProps {&#10;  open: boolean;&#10;  onOpenChange: (open: boolean) =&gt; void;&#10;  onCapture: (image: Blob) =&gt; void;&#10;  title?: string;&#10;  description?: string;&#10;}&#10;&#10;export function CameraCapture({&#10;  open,&#10;  onOpenChange,&#10;  onCapture,&#10;  title = &quot;Capturar Foto&quot;,&#10;  description = &quot;Posicione-se adequadamente e tire uma foto&quot;&#10;}: CameraCaptureProps) {&#10;  const videoRef = useRef&lt;HTMLVideoElement&gt;(null);&#10;  const canvasRef = useRef&lt;HTMLCanvasElement&gt;(null);&#10;  const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;  const [isStreaming, setIsStreaming] = useState(false);&#10;  const [facingMode, setFacingMode] = useState&lt;'user' | 'environment'&gt;('environment');&#10;  const [capturedImage, setCapturedImage] = useState&lt;string | null&gt;(null);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const { toast } = useToast();&#10;&#10;  const startCamera = useCallback(async () =&gt; {&#10;    try {&#10;      setIsLoading(true);&#10;      const stream = await navigator.mediaDevices.getUserMedia({&#10;        video: {&#10;          width: { ideal: 640 },&#10;          height: { ideal: 480 },&#10;          facingMode&#10;        }&#10;      });&#10;&#10;      if (videoRef.current) {&#10;        videoRef.current.srcObject = stream;&#10;        setIsStreaming(true);&#10;      }&#10;    } catch (error) {&#10;      console.error('Erro ao acessar câmera:', error);&#10;      toast({&#10;        title: &quot;Erro de câmera&quot;,&#10;        description: &quot;Não foi possível acessar a câmera. Verifique as permissões.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  }, [facingMode, toast]);&#10;&#10;  const stopCamera = useCallback(() =&gt; {&#10;    if (videoRef.current?.srcObject) {&#10;      const tracks = (videoRef.current.srcObject as MediaStream).getTracks();&#10;      tracks.forEach(track =&gt; track.stop());&#10;      videoRef.current.srcObject = null;&#10;      setIsStreaming(false);&#10;    }&#10;  }, []);&#10;&#10;  const capturePhoto = useCallback(() =&gt; {&#10;    if (!videoRef.current || !canvasRef.current) return;&#10;&#10;    const canvas = canvasRef.current;&#10;    const video = videoRef.current;&#10;    const context = canvas.getContext('2d');&#10;&#10;    if (!context) return;&#10;&#10;    canvas.width = video.videoWidth;&#10;    canvas.height = video.videoHeight;&#10;    context.drawImage(video, 0, 0, canvas.width, canvas.height);&#10;&#10;    const imageData = canvas.toDataURL('image/jpeg', 0.8);&#10;    setCapturedImage(imageData);&#10;    stopCamera();&#10;  }, [stopCamera]);&#10;&#10;  const confirmCapture = useCallback(() =&gt; {&#10;    if (!capturedImage || !canvasRef.current) return;&#10;&#10;    canvasRef.current.toBlob((blob) =&gt; {&#10;      if (blob) {&#10;        onCapture(blob);&#10;        setCapturedImage(null);&#10;        onOpenChange(false);&#10;      }&#10;    }, 'image/jpeg', 0.8);&#10;  }, [capturedImage, onCapture, onOpenChange]);&#10;&#10;  const retakePhoto = useCallback(() =&gt; {&#10;    setCapturedImage(null);&#10;    startCamera();&#10;  }, [startCamera]);&#10;&#10;  const flipCamera = useCallback(async () =&gt; {&#10;    if (isStreaming) {&#10;      stopCamera();&#10;      const newFacingMode = facingMode === 'user' ? 'environment' : 'user';&#10;      setFacingMode(newFacingMode);&#10;&#10;      setTimeout(async () =&gt; {&#10;        try {&#10;          const stream = await navigator.mediaDevices.getUserMedia({&#10;            video: {&#10;              width: { ideal: 640 },&#10;              height: { ideal: 480 },&#10;              facingMode: newFacingMode&#10;            }&#10;          });&#10;&#10;          if (videoRef.current) {&#10;            videoRef.current.srcObject = stream;&#10;            setIsStreaming(true);&#10;          }&#10;        } catch (error) {&#10;          console.error('Erro ao trocar câmera:', error);&#10;          toast({&#10;            title: &quot;Erro ao trocar câmera&quot;,&#10;            description: &quot;Não foi possível trocar a câmera. Tente novamente.&quot;,&#10;            variant: &quot;destructive&quot;,&#10;          });&#10;          setFacingMode(facingMode);&#10;        }&#10;      }, 500);&#10;    }&#10;  }, [isStreaming, facingMode, stopCamera, toast]);&#10;&#10;  const handleFileSelect = useCallback((event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    const file = event.target.files?.[0];&#10;    if (file) {&#10;      if (file.type.startsWith('image/')) {&#10;        onCapture(file);&#10;        onOpenChange(false);&#10;      } else {&#10;        toast({&#10;          title: &quot;Arquivo inválido&quot;,&#10;          description: &quot;Por favor, selecione uma imagem válida.&quot;,&#10;          variant: &quot;destructive&quot;,&#10;        });&#10;      }&#10;    }&#10;  }, [onCapture, onOpenChange, toast]);&#10;&#10;  const handleClose = useCallback(() =&gt; {&#10;    stopCamera();&#10;    setCapturedImage(null);&#10;    onOpenChange(false);&#10;  }, [stopCamera, onOpenChange]);&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={handleClose}&gt;&#10;      &lt;DialogContent className=&quot;sm:max-w-[500px]&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;DialogTitle&gt;{title}&lt;/DialogTitle&gt;&#10;          {description &amp;&amp; (&#10;            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{description}&lt;/p&gt;&#10;          )}&#10;        &lt;/DialogHeader&gt;&#10;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {/* Camera Preview or Captured Image */}&#10;          &lt;div className=&quot;relative aspect-video bg-gray-100 rounded-lg overflow-hidden&quot;&gt;&#10;            {capturedImage ? (&#10;              &lt;img&#10;                src={capturedImage}&#10;                alt=&quot;Captured&quot;&#10;                className=&quot;w-full h-full object-cover&quot;&#10;              /&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;video&#10;                  ref={videoRef}&#10;                  autoPlay&#10;                  playsInline&#10;                  muted&#10;                  className=&quot;w-full h-full object-cover&quot;&#10;                /&gt;&#10;                &lt;canvas ref={canvasRef} className=&quot;hidden&quot; /&gt;&#10;&#10;                {/* Floating Flip Camera Button */}&#10;                {isStreaming &amp;&amp; (&#10;                  &lt;Button&#10;                    onClick={flipCamera}&#10;                    size=&quot;sm&quot;&#10;                    variant=&quot;secondary&quot;&#10;                    className=&quot;absolute bottom-2 right-2 w-10 h-10 p-0 rounded-full shadow-lg bg-white/90 backdrop-blur-sm border border-gray-200&quot;&#10;                    title=&quot;Trocar câmera&quot;&#10;                  &gt;&#10;                    &lt;CameraRotate className=&quot;h-4 w-4 text-gray-700&quot; /&gt;&#10;                  &lt;/Button&gt;&#10;                )}&#10;&#10;                {!isStreaming &amp;&amp; !isLoading &amp;&amp; (&#10;                  &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;                    &lt;div className=&quot;text-center&quot;&gt;&#10;                      &lt;CameraIcon className=&quot;h-12 w-12 text-gray-400 mx-auto mb-2&quot;/&gt;&#10;                      &lt;p className=&quot;text-gray-500&quot;&gt;Câmera desligada&lt;/p&gt;&#10;                      &lt;p className=&quot;text-xs text-gray-400&quot;&gt;Clique em &quot;Iniciar Câmera&quot; para começar&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {isLoading &amp;&amp; (&#10;                  &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;                    &lt;div className=&quot;text-center&quot;&gt;&#10;                      &lt;div className=&quot;w-8 h-8 border-2 border-gray-400 border-t-transparent rounded-full animate-spin mx-auto mb-2&quot;/&gt;&#10;                      &lt;p className=&quot;text-gray-500&quot;&gt;Iniciando câmera...&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Action Buttons */}&#10;          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;            {capturedImage ? (&#10;              &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                &lt;Button&#10;                  onClick={retakePhoto}&#10;                  variant=&quot;outline&quot;&#10;                  className=&quot;flex-1 flex items-center gap-2&quot;&#10;                &gt;&#10;                  &lt;X className=&quot;h-4 w-4&quot;/&gt;&#10;                  Tirar Novamente&#10;                &lt;/Button&gt;&#10;                &lt;Button&#10;                  onClick={confirmCapture}&#10;                  className=&quot;flex-1 flex items-center gap-2&quot;&#10;                &gt;&#10;                  &lt;Check className=&quot;h-4 w-4&quot;/&gt;&#10;                  Confirmar&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                  &lt;Button&#10;                    onClick={isStreaming ? stopCamera : startCamera}&#10;                    variant={isStreaming ? &quot;destructive&quot; : &quot;default&quot;}&#10;                    className=&quot;flex-1 flex items-center gap-2&quot;&#10;                    disabled={isLoading}&#10;                  &gt;&#10;                    &lt;CameraIcon className=&quot;h-4 w-4&quot;/&gt;&#10;                    {isStreaming ? &quot;Parar Câmera&quot; : &quot;Iniciar Câmera&quot;}&#10;                  &lt;/Button&gt;&#10;&#10;                  {isStreaming &amp;&amp; (&#10;                    &lt;Button&#10;                      onClick={capturePhoto}&#10;                      className=&quot;flex-1 flex items-center gap-2&quot;&#10;                    &gt;&#10;                      &lt;CameraIcon className=&quot;h-4 w-4&quot;/&gt;&#10;                      Capturar&#10;                    &lt;/Button&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* File Upload Alternative */}&#10;                &lt;div className=&quot;text-center&quot;&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-500 mb-2&quot;&gt;ou&lt;/p&gt;&#10;                  &lt;Button&#10;                    onClick={() =&gt; fileInputRef.current?.click()}&#10;                    variant=&quot;outline&quot;&#10;                    className=&quot;w-full flex items-center gap-2&quot;&#10;                  &gt;&#10;                    &lt;Upload className=&quot;h-4 w-4&quot;/&gt;&#10;                    Selecionar do Dispositivo&#10;                  &lt;/Button&gt;&#10;                  &lt;input&#10;                    ref={fileInputRef}&#10;                    type=&quot;file&quot;&#10;                    accept=&quot;image/*&quot;&#10;                    onChange={handleFileSelect}&#10;                    className=&quot;hidden&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useRef, useCallback } from &quot;react&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Dialog, DialogContent, DialogHeader, DialogTitle } from &quot;@/components/ui/dialog&quot;;&#10;import { CameraIcon, CameraRotate, Check, Upload, X } from &quot;@phosphor-icons/react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { useToast } from &quot;@/hooks/use-toast&quot;;&#10;&#10;interface CameraCaptureProps {&#10;  open: boolean;&#10;  onOpenChange: (open: boolean) =&gt; void;&#10;  onCapture: (image: File) =&gt; void;&#10;  title?: string;&#10;  description?: string;&#10;}&#10;&#10;export function CameraCapture({&#10;  open,&#10;  onOpenChange,&#10;  onCapture,&#10;  title = &quot;Capturar Foto&quot;,&#10;  description = &quot;Posicione-se adequadamente e tire uma foto&quot;&#10;}: CameraCaptureProps) {&#10;  const videoRef = useRef&lt;HTMLVideoElement&gt;(null);&#10;  const canvasRef = useRef&lt;HTMLCanvasElement&gt;(null);&#10;  const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;  const [isStreaming, setIsStreaming] = useState(false);&#10;  const [facingMode, setFacingMode] = useState&lt;'user' | 'environment'&gt;('environment');&#10;  const [capturedImage, setCapturedImage] = useState&lt;string | null&gt;(null);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const { toast } = useToast();&#10;&#10;  const startCamera = useCallback(async () =&gt; {&#10;    try {&#10;      setIsLoading(true);&#10;      const stream = await navigator.mediaDevices.getUserMedia({&#10;        video: {&#10;          width: { ideal: 640 },&#10;          height: { ideal: 480 },&#10;          facingMode&#10;        }&#10;      });&#10;&#10;      if (videoRef.current) {&#10;        videoRef.current.srcObject = stream;&#10;        setIsStreaming(true);&#10;      }&#10;    } catch (error) {&#10;      console.error('Erro ao acessar câmera:', error);&#10;      toast({&#10;        title: &quot;Erro de câmera&quot;,&#10;        description: &quot;Não foi possível acessar a câmera. Verifique as permissões.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  }, [facingMode, toast]);&#10;&#10;  const stopCamera = useCallback(() =&gt; {&#10;    if (videoRef.current?.srcObject) {&#10;      const tracks = (videoRef.current.srcObject as MediaStream).getTracks();&#10;      tracks.forEach(track =&gt; track.stop());&#10;      videoRef.current.srcObject = null;&#10;      setIsStreaming(false);&#10;    }&#10;  }, []);&#10;&#10;  const capturePhoto = useCallback(() =&gt; {&#10;    if (!videoRef.current || !canvasRef.current) return;&#10;&#10;    const canvas = canvasRef.current;&#10;    const video = videoRef.current;&#10;    const context = canvas.getContext('2d');&#10;&#10;    if (!context) return;&#10;&#10;    canvas.width = video.videoWidth;&#10;    canvas.height = video.videoHeight;&#10;    context.drawImage(video, 0, 0, canvas.width, canvas.height);&#10;&#10;    const imageData = canvas.toDataURL('image/jpeg', 0.8);&#10;    setCapturedImage(imageData);&#10;    stopCamera();&#10;  }, [stopCamera]);&#10;&#10;  const confirmCapture = useCallback(() =&gt; {&#10;    if (!capturedImage || !canvasRef.current) return;&#10;&#10;    canvasRef.current.toBlob((blob) =&gt; {&#10;      if (blob) {&#10;        // Convert Blob to File&#10;        const file = new File([blob], 'camera-capture.jpg', {&#10;          type: 'image/jpeg',&#10;          lastModified: Date.now()&#10;        });&#10;        onCapture(file);&#10;        setCapturedImage(null);&#10;        onOpenChange(false);&#10;      }&#10;    }, 'image/jpeg', 0.8);&#10;  }, [capturedImage, onCapture, onOpenChange]);&#10;&#10;  const retakePhoto = useCallback(() =&gt; {&#10;    setCapturedImage(null);&#10;    startCamera();&#10;  }, [startCamera]);&#10;&#10;  const flipCamera = useCallback(async () =&gt; {&#10;    if (isStreaming) {&#10;      stopCamera();&#10;      const newFacingMode = facingMode === 'user' ? 'environment' : 'user';&#10;      setFacingMode(newFacingMode);&#10;&#10;      setTimeout(async () =&gt; {&#10;        try {&#10;          const stream = await navigator.mediaDevices.getUserMedia({&#10;            video: {&#10;              width: { ideal: 640 },&#10;              height: { ideal: 480 },&#10;              facingMode: newFacingMode&#10;            }&#10;          });&#10;&#10;          if (videoRef.current) {&#10;            videoRef.current.srcObject = stream;&#10;            setIsStreaming(true);&#10;          }&#10;        } catch (error) {&#10;          console.error('Erro ao trocar câmera:', error);&#10;          toast({&#10;            title: &quot;Erro ao trocar câmera&quot;,&#10;            description: &quot;Não foi possível trocar a câmera. Tente novamente.&quot;,&#10;            variant: &quot;destructive&quot;,&#10;          });&#10;          setFacingMode(facingMode);&#10;        }&#10;      }, 500);&#10;    }&#10;  }, [isStreaming, facingMode, stopCamera, toast]);&#10;&#10;  const handleFileSelect = useCallback((event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    const file = event.target.files?.[0];&#10;    if (file) {&#10;      if (file.type.startsWith('image/')) {&#10;        onCapture(file);&#10;        onOpenChange(false);&#10;      } else {&#10;        toast({&#10;          title: &quot;Arquivo inválido&quot;,&#10;          description: &quot;Por favor, selecione uma imagem válida.&quot;,&#10;          variant: &quot;destructive&quot;,&#10;        });&#10;      }&#10;    }&#10;  }, [onCapture, onOpenChange, toast]);&#10;&#10;  const handleClose = useCallback(() =&gt; {&#10;    stopCamera();&#10;    setCapturedImage(null);&#10;    onOpenChange(false);&#10;  }, [stopCamera, onOpenChange]);&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={handleClose}&gt;&#10;      &lt;DialogContent className=&quot;sm:max-w-[500px]&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;DialogTitle&gt;{title}&lt;/DialogTitle&gt;&#10;          {description &amp;&amp; (&#10;            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;{description}&lt;/p&gt;&#10;          )}&#10;        &lt;/DialogHeader&gt;&#10;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          {/* Camera Preview or Captured Image */}&#10;          &lt;div className=&quot;relative aspect-video bg-gray-100 rounded-lg overflow-hidden&quot;&gt;&#10;            {capturedImage ? (&#10;              &lt;img&#10;                src={capturedImage}&#10;                alt=&quot;Captured&quot;&#10;                className=&quot;w-full h-full object-cover&quot;&#10;              /&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;video&#10;                  ref={videoRef}&#10;                  autoPlay&#10;                  playsInline&#10;                  muted&#10;                  className=&quot;w-full h-full object-cover&quot;&#10;                /&gt;&#10;                &lt;canvas ref={canvasRef} className=&quot;hidden&quot; /&gt;&#10;&#10;                {/* Floating Flip Camera Button */}&#10;                {isStreaming &amp;&amp; (&#10;                  &lt;Button&#10;                    onClick={flipCamera}&#10;                    size=&quot;sm&quot;&#10;                    variant=&quot;secondary&quot;&#10;                    className=&quot;absolute bottom-2 right-2 w-10 h-10 p-0 rounded-full shadow-lg bg-white/90 backdrop-blur-sm border border-gray-200&quot;&#10;                    title=&quot;Trocar câmera&quot;&#10;                  &gt;&#10;                    &lt;CameraRotate className=&quot;h-4 w-4 text-gray-700&quot; /&gt;&#10;                  &lt;/Button&gt;&#10;                )}&#10;&#10;                {!isStreaming &amp;&amp; !isLoading &amp;&amp; (&#10;                  &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;                    &lt;div className=&quot;text-center&quot;&gt;&#10;                      &lt;CameraIcon className=&quot;h-12 w-12 text-gray-400 mx-auto mb-2&quot;/&gt;&#10;                      &lt;p className=&quot;text-gray-500&quot;&gt;Câmera desligada&lt;/p&gt;&#10;                      &lt;p className=&quot;text-xs text-gray-400&quot;&gt;Clique em &quot;Iniciar Câmera&quot; para começar&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {isLoading &amp;&amp; (&#10;                  &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;                    &lt;div className=&quot;text-center&quot;&gt;&#10;                      &lt;div className=&quot;w-8 h-8 border-2 border-gray-400 border-t-transparent rounded-full animate-spin mx-auto mb-2&quot;/&gt;&#10;                      &lt;p className=&quot;text-gray-500&quot;&gt;Iniciando câmera...&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Action Buttons */}&#10;          &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;            {capturedImage ? (&#10;              &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                &lt;Button&#10;                  onClick={retakePhoto}&#10;                  variant=&quot;outline&quot;&#10;                  className=&quot;flex-1 flex items-center gap-2&quot;&#10;                &gt;&#10;                  &lt;X className=&quot;h-4 w-4&quot;/&gt;&#10;                  Tirar Novamente&#10;                &lt;/Button&gt;&#10;                &lt;Button&#10;                  onClick={confirmCapture}&#10;                  className=&quot;flex-1 flex items-center gap-2&quot;&#10;                &gt;&#10;                  &lt;Check className=&quot;h-4 w-4&quot;/&gt;&#10;                  Confirmar&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                  &lt;Button&#10;                    onClick={isStreaming ? stopCamera : startCamera}&#10;                    variant={isStreaming ? &quot;destructive&quot; : &quot;default&quot;}&#10;                    className=&quot;flex-1 flex items-center gap-2&quot;&#10;                    disabled={isLoading}&#10;                  &gt;&#10;                    &lt;CameraIcon className=&quot;h-4 w-4&quot;/&gt;&#10;                    {isStreaming ? &quot;Parar Câmera&quot; : &quot;Iniciar Câmera&quot;}&#10;                  &lt;/Button&gt;&#10;&#10;                  {isStreaming &amp;&amp; (&#10;                    &lt;Button&#10;                      onClick={capturePhoto}&#10;                      className=&quot;flex-1 flex items-center gap-2&quot;&#10;                    &gt;&#10;                      &lt;CameraIcon className=&quot;h-4 w-4&quot;/&gt;&#10;                      Capturar&#10;                    &lt;/Button&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* File Upload Alternative */}&#10;                &lt;div className=&quot;text-center&quot;&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-500 mb-2&quot;&gt;ou&lt;/p&gt;&#10;                  &lt;Button&#10;                    onClick={() =&gt; fileInputRef.current?.click()}&#10;                    variant=&quot;outline&quot;&#10;                    className=&quot;w-full flex items-center gap-2&quot;&#10;                  &gt;&#10;                    &lt;Upload className=&quot;h-4 w-4&quot;/&gt;&#10;                    Selecionar do Dispositivo&#10;                  &lt;/Button&gt;&#10;                  &lt;input&#10;                    ref={fileInputRef}&#10;                    type=&quot;file&quot;&#10;                    accept=&quot;image/*&quot;&#10;                    onChange={handleFileSelect}&#10;                    className=&quot;hidden&quot;&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/carousel.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/carousel.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import useEmblaCarousel, {&#10;  type UseEmblaCarouselType,&#10;} from 'embla-carousel-react';&#10;import { ArrowLeft, ArrowRight } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { Button } from '@/components/ui/button';&#10;&#10;type CarouselApi = UseEmblaCarouselType[1];&#10;type UseCarouselParameters = Parameters&lt;typeof useEmblaCarousel&gt;;&#10;type CarouselOptions = UseCarouselParameters[0];&#10;type CarouselPlugin = UseCarouselParameters[1];&#10;&#10;type CarouselProps = {&#10;  opts?: CarouselOptions;&#10;  plugins?: CarouselPlugin;&#10;  orientation?: 'horizontal' | 'vertical';&#10;  setApi?: (api: CarouselApi) =&gt; void;&#10;};&#10;&#10;type CarouselContextProps = {&#10;  carouselRef: ReturnType&lt;typeof useEmblaCarousel&gt;[0];&#10;  api: ReturnType&lt;typeof useEmblaCarousel&gt;[1];&#10;  scrollPrev: () =&gt; void;&#10;  scrollNext: () =&gt; void;&#10;  canScrollPrev: boolean;&#10;  canScrollNext: boolean;&#10;} &amp; CarouselProps;&#10;&#10;const CarouselContext = React.createContext&lt;CarouselContextProps | null&gt;(null);&#10;&#10;function useCarousel() {&#10;  const context = React.useContext(CarouselContext);&#10;&#10;  if (!context) {&#10;    throw new Error('useCarousel must be used within a &lt;Carousel /&gt;');&#10;  }&#10;&#10;  return context;&#10;}&#10;&#10;const Carousel = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; CarouselProps&#10;&gt;(&#10;  (&#10;    {&#10;      orientation = 'horizontal',&#10;      opts,&#10;      setApi,&#10;      plugins,&#10;      className,&#10;      children,&#10;      ...props&#10;    },&#10;    ref&#10;  ) =&gt; {&#10;    const [carouselRef, api] = useEmblaCarousel(&#10;      {&#10;        ...opts,&#10;        axis: orientation === 'horizontal' ? 'x' : 'y',&#10;      },&#10;      plugins&#10;    );&#10;    const [canScrollPrev, setCanScrollPrev] = React.useState(false);&#10;    const [canScrollNext, setCanScrollNext] = React.useState(false);&#10;&#10;    const onSelect = React.useCallback((api: CarouselApi) =&gt; {&#10;      if (!api) {&#10;        return;&#10;      }&#10;&#10;      setCanScrollPrev(api.canScrollPrev());&#10;      setCanScrollNext(api.canScrollNext());&#10;    }, []);&#10;&#10;    const scrollPrev = React.useCallback(() =&gt; {&#10;      api?.scrollPrev();&#10;    }, [api]);&#10;&#10;    const scrollNext = React.useCallback(() =&gt; {&#10;      api?.scrollNext();&#10;    }, [api]);&#10;&#10;    const handleKeyDown = React.useCallback(&#10;      (event: React.KeyboardEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;        if (event.key === 'ArrowLeft') {&#10;          event.preventDefault();&#10;          scrollPrev();&#10;        } else if (event.key === 'ArrowRight') {&#10;          event.preventDefault();&#10;          scrollNext();&#10;        }&#10;      },&#10;      [scrollPrev, scrollNext]&#10;    );&#10;&#10;    React.useEffect(() =&gt; {&#10;      if (!api || !setApi) {&#10;        return;&#10;      }&#10;&#10;      setApi(api);&#10;    }, [api, setApi]);&#10;&#10;    React.useEffect(() =&gt; {&#10;      if (!api) {&#10;        return;&#10;      }&#10;&#10;      onSelect(api);&#10;      api.on('reInit', onSelect);&#10;      api.on('select', onSelect);&#10;&#10;      return () =&gt; {&#10;        api?.off('select', onSelect);&#10;      };&#10;    }, [api, onSelect]);&#10;&#10;    return (&#10;      &lt;CarouselContext.Provider&#10;        value={{&#10;          carouselRef,&#10;          api: api,&#10;          opts,&#10;          orientation:&#10;            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),&#10;          scrollPrev,&#10;          scrollNext,&#10;          canScrollPrev,&#10;          canScrollNext,&#10;        }}&#10;      &gt;&#10;        &lt;div&#10;          ref={ref}&#10;          onKeyDownCapture={handleKeyDown}&#10;          className={cn('relative', className)}&#10;          role=&quot;region&quot;&#10;          aria-roledescription=&quot;carousel&quot;&#10;          {...props}&#10;        &gt;&#10;          {children}&#10;        &lt;/div&gt;&#10;      &lt;/CarouselContext.Provider&gt;&#10;    );&#10;  }&#10;);&#10;Carousel.displayName = 'Carousel';&#10;&#10;const CarouselContent = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  const { carouselRef, orientation } = useCarousel();&#10;&#10;  return (&#10;    &lt;div ref={carouselRef} className=&quot;overflow-hidden&quot;&gt;&#10;      &lt;div&#10;        ref={ref}&#10;        className={cn(&#10;          'flex',&#10;          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',&#10;          className&#10;        )}&#10;        {...props}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;CarouselContent.displayName = 'CarouselContent';&#10;&#10;const CarouselItem = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  const { orientation } = useCarousel();&#10;&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      role=&quot;group&quot;&#10;      aria-roledescription=&quot;slide&quot;&#10;      className={cn(&#10;        'min-w-0 shrink-0 grow-0 basis-full',&#10;        orientation === 'horizontal' ? 'pl-4' : 'pt-4',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;CarouselItem.displayName = 'CarouselItem';&#10;&#10;const CarouselPrevious = React.forwardRef&lt;&#10;  HTMLButtonElement,&#10;  React.ComponentProps&lt;typeof Button&gt;&#10;&gt;(({ className, variant = 'outline', size = 'icon', ...props }, ref) =&gt; {&#10;  const { orientation, scrollPrev, canScrollPrev } = useCarousel();&#10;&#10;  return (&#10;    &lt;Button&#10;      ref={ref}&#10;      variant={variant}&#10;      size={size}&#10;      className={cn(&#10;        'absolute  h-8 w-8 rounded-full',&#10;        orientation === 'horizontal'&#10;          ? '-left-12 top-1/2 -translate-y-1/2'&#10;          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',&#10;        className&#10;      )}&#10;      disabled={!canScrollPrev}&#10;      onClick={scrollPrev}&#10;      {...props}&#10;    &gt;&#10;      &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;span className=&quot;sr-only&quot;&gt;Previous slide&lt;/span&gt;&#10;    &lt;/Button&gt;&#10;  );&#10;});&#10;CarouselPrevious.displayName = 'CarouselPrevious';&#10;&#10;const CarouselNext = React.forwardRef&lt;&#10;  HTMLButtonElement,&#10;  React.ComponentProps&lt;typeof Button&gt;&#10;&gt;(({ className, variant = 'outline', size = 'icon', ...props }, ref) =&gt; {&#10;  const { orientation, scrollNext, canScrollNext } = useCarousel();&#10;&#10;  return (&#10;    &lt;Button&#10;      ref={ref}&#10;      variant={variant}&#10;      size={size}&#10;      className={cn(&#10;        'absolute h-8 w-8 rounded-full',&#10;        orientation === 'horizontal'&#10;          ? '-right-12 top-1/2 -translate-y-1/2'&#10;          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',&#10;        className&#10;      )}&#10;      disabled={!canScrollNext}&#10;      onClick={scrollNext}&#10;      {...props}&#10;    &gt;&#10;      &lt;ArrowRight className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;span className=&quot;sr-only&quot;&gt;Next slide&lt;/span&gt;&#10;    &lt;/Button&gt;&#10;  );&#10;});&#10;CarouselNext.displayName = 'CarouselNext';&#10;&#10;export {&#10;  type CarouselApi,&#10;  Carousel,&#10;  CarouselContent,&#10;  CarouselItem,&#10;  CarouselPrevious,&#10;  CarouselNext,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import useEmblaCarousel, {&#10;  type UseEmblaCarouselType,&#10;} from 'embla-carousel-react';&#10;import { ArrowLeftIcon, ArrowRightIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { Button } from '@/components/ui/button';&#10;&#10;type CarouselApi = UseEmblaCarouselType[1];&#10;type UseCarouselParameters = Parameters&lt;typeof useEmblaCarousel&gt;;&#10;type CarouselOptions = UseCarouselParameters[0];&#10;type CarouselPlugin = UseCarouselParameters[1];&#10;&#10;type CarouselProps = {&#10;  opts?: CarouselOptions;&#10;  plugins?: CarouselPlugin;&#10;  orientation?: 'horizontal' | 'vertical';&#10;  setApi?: (api: CarouselApi) =&gt; void;&#10;};&#10;&#10;type CarouselContextProps = {&#10;  carouselRef: ReturnType&lt;typeof useEmblaCarousel&gt;[0];&#10;  api: ReturnType&lt;typeof useEmblaCarousel&gt;[1];&#10;  scrollPrev: () =&gt; void;&#10;  scrollNext: () =&gt; void;&#10;  canScrollPrev: boolean;&#10;  canScrollNext: boolean;&#10;} &amp; CarouselProps;&#10;&#10;const CarouselContext = React.createContext&lt;CarouselContextProps | null&gt;(null);&#10;&#10;function useCarousel() {&#10;  const context = React.useContext(CarouselContext);&#10;&#10;  if (!context) {&#10;    throw new Error('useCarousel must be used within a &lt;Carousel /&gt;');&#10;  }&#10;&#10;  return context;&#10;}&#10;&#10;const Carousel = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; CarouselProps&#10;&gt;(&#10;  (&#10;    {&#10;      orientation = 'horizontal',&#10;      opts,&#10;      setApi,&#10;      plugins,&#10;      className,&#10;      children,&#10;      ...props&#10;    },&#10;    ref&#10;  ) =&gt; {&#10;    const [carouselRef, api] = useEmblaCarousel(&#10;      {&#10;        ...opts,&#10;        axis: orientation === 'horizontal' ? 'x' : 'y',&#10;      },&#10;      plugins&#10;    );&#10;    const [canScrollPrev, setCanScrollPrev] = React.useState(false);&#10;    const [canScrollNext, setCanScrollNext] = React.useState(false);&#10;&#10;    const onSelect = React.useCallback((api: CarouselApi) =&gt; {&#10;      if (!api) {&#10;        return;&#10;      }&#10;&#10;      setCanScrollPrev(api.canScrollPrev());&#10;      setCanScrollNext(api.canScrollNext());&#10;    }, []);&#10;&#10;    const scrollPrev = React.useCallback(() =&gt; {&#10;      api?.scrollPrev();&#10;    }, [api]);&#10;&#10;    const scrollNext = React.useCallback(() =&gt; {&#10;      api?.scrollNext();&#10;    }, [api]);&#10;&#10;    const handleKeyDown = React.useCallback(&#10;      (event: React.KeyboardEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;        if (event.key === 'ArrowLeft') {&#10;          event.preventDefault();&#10;          scrollPrev();&#10;        } else if (event.key === 'ArrowRight') {&#10;          event.preventDefault();&#10;          scrollNext();&#10;        }&#10;      },&#10;      [scrollPrev, scrollNext]&#10;    );&#10;&#10;    React.useEffect(() =&gt; {&#10;      if (!api || !setApi) {&#10;        return;&#10;      }&#10;&#10;      setApi(api);&#10;    }, [api, setApi]);&#10;&#10;    React.useEffect(() =&gt; {&#10;      if (!api) {&#10;        return;&#10;      }&#10;&#10;      onSelect(api);&#10;      api.on('reInit', onSelect);&#10;      api.on('select', onSelect);&#10;&#10;      return () =&gt; {&#10;        api?.off('select', onSelect);&#10;      };&#10;    }, [api, onSelect]);&#10;&#10;    return (&#10;      &lt;CarouselContext.Provider&#10;        value={{&#10;          carouselRef,&#10;          api: api,&#10;          opts,&#10;          orientation:&#10;            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),&#10;          scrollPrev,&#10;          scrollNext,&#10;          canScrollPrev,&#10;          canScrollNext,&#10;        }}&#10;      &gt;&#10;        &lt;div&#10;          ref={ref}&#10;          onKeyDownCapture={handleKeyDown}&#10;          className={cn('relative', className)}&#10;          role=&quot;region&quot;&#10;          aria-roledescription=&quot;carousel&quot;&#10;          {...props}&#10;        &gt;&#10;          {children}&#10;        &lt;/div&gt;&#10;      &lt;/CarouselContext.Provider&gt;&#10;    );&#10;  }&#10;);&#10;Carousel.displayName = 'Carousel';&#10;&#10;const CarouselContent = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  const { carouselRef, orientation } = useCarousel();&#10;&#10;  return (&#10;    &lt;div ref={carouselRef} className=&quot;overflow-hidden&quot;&gt;&#10;      &lt;div&#10;        ref={ref}&#10;        className={cn(&#10;          'flex',&#10;          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',&#10;          className&#10;        )}&#10;        {...props}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;CarouselContent.displayName = 'CarouselContent';&#10;&#10;const CarouselItem = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  const { orientation } = useCarousel();&#10;&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      role=&quot;group&quot;&#10;      aria-roledescription=&quot;slide&quot;&#10;      className={cn(&#10;        'min-w-0 shrink-0 grow-0 basis-full',&#10;        orientation === 'horizontal' ? 'pl-4' : 'pt-4',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;CarouselItem.displayName = 'CarouselItem';&#10;&#10;const CarouselPrevious = React.forwardRef&lt;&#10;  HTMLButtonElement,&#10;  React.ComponentProps&lt;typeof Button&gt;&#10;&gt;(({ className, variant = 'outline', size = 'icon', ...props }, ref) =&gt; {&#10;  const { orientation, scrollPrev, canScrollPrev } = useCarousel();&#10;&#10;  return (&#10;    &lt;Button&#10;      ref={ref}&#10;      variant={variant}&#10;      size={size}&#10;      className={cn(&#10;        'absolute  h-8 w-8 rounded-full',&#10;        orientation === 'horizontal'&#10;          ? '-left-12 top-1/2 -translate-y-1/2'&#10;          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',&#10;        className&#10;      )}&#10;      disabled={!canScrollPrev}&#10;      onClick={scrollPrev}&#10;      {...props}&#10;    &gt;&#10;      &lt;ArrowLeftIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;span className=&quot;sr-only&quot;&gt;Previous slide&lt;/span&gt;&#10;    &lt;/Button&gt;&#10;  );&#10;});&#10;CarouselPrevious.displayName = 'CarouselPrevious';&#10;&#10;const CarouselNext = React.forwardRef&lt;&#10;  HTMLButtonElement,&#10;  React.ComponentProps&lt;typeof Button&gt;&#10;&gt;(({ className, variant = 'outline', size = 'icon', ...props }, ref) =&gt; {&#10;  const { orientation, scrollNext, canScrollNext } = useCarousel();&#10;&#10;  return (&#10;    &lt;Button&#10;      ref={ref}&#10;      variant={variant}&#10;      size={size}&#10;      className={cn(&#10;        'absolute h-8 w-8 rounded-full',&#10;        orientation === 'horizontal'&#10;          ? '-right-12 top-1/2 -translate-y-1/2'&#10;          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',&#10;        className&#10;      )}&#10;      disabled={!canScrollNext}&#10;      onClick={scrollNext}&#10;      {...props}&#10;    &gt;&#10;      &lt;ArrowRightIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;span className=&quot;sr-only&quot;&gt;Next slide&lt;/span&gt;&#10;    &lt;/Button&gt;&#10;  );&#10;});&#10;CarouselNext.displayName = 'CarouselNext';&#10;&#10;export {&#10;  type CarouselApi,&#10;  Carousel,&#10;  CarouselContent,&#10;  CarouselItem,&#10;  CarouselPrevious,&#10;  CarouselNext,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/command.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/command.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { type DialogProps } from '@radix-ui/react-dialog';&#10;import { Command as CommandPrimitive } from 'cmdk';&#10;import { Search } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { Dialog, DialogContent } from '@/components/ui/dialog';&#10;&#10;const Command = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive&#10;    ref={ref}&#10;    className={cn(&#10;      'flex h-full w-full flex-col overflow-hidden rounded-2xl bg-popover text-popover-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;Command.displayName = CommandPrimitive.displayName;&#10;&#10;interface CommandDialogProps extends DialogProps {}&#10;&#10;const CommandDialog = ({ children, ...props }: CommandDialogProps) =&gt; {&#10;  return (&#10;    &lt;Dialog {...props}&gt;&#10;      &lt;DialogContent className=&quot;overflow-hidden p-0 shadow-lg&quot;&gt;&#10;        &lt;Command className=&quot;[&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground [&amp;_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&amp;_[cmdk-group]]:px-2 [&amp;_[cmdk-input-wrapper]_svg]:h-5 [&amp;_[cmdk-input-wrapper]_svg]:w-5 [&amp;_[cmdk-input]]:h-12 [&amp;_[cmdk-item]]:px-2 [&amp;_[cmdk-item]]:py-3 [&amp;_[cmdk-item]_svg]:h-5 [&amp;_[cmdk-item]_svg]:w-5&quot;&gt;&#10;          {children}&#10;        &lt;/Command&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};&#10;&#10;const CommandInput = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Input&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Input&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div className=&quot;flex items-center border-b px-3&quot; cmdk-input-wrapper=&quot;&quot;&gt;&#10;    &lt;Search className=&quot;mr-2 h-4 w-4 shrink-0 opacity-50&quot; /&gt;&#10;    &lt;CommandPrimitive.Input&#10;      ref={ref}&#10;      className={cn(&#10;        'flex h-11 w-full rounded-2xl bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;));&#10;&#10;CommandInput.displayName = CommandPrimitive.Input.displayName;&#10;&#10;const CommandList = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.List&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.List&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.List&#10;    ref={ref}&#10;    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandList.displayName = CommandPrimitive.List.displayName;&#10;&#10;const CommandEmpty = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Empty&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Empty&gt;&#10;&gt;((props, ref) =&gt; (&#10;  &lt;CommandPrimitive.Empty&#10;    ref={ref}&#10;    className=&quot;py-6 text-center text-sm&quot;&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandEmpty.displayName = CommandPrimitive.Empty.displayName;&#10;&#10;const CommandGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Group&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Group&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Group&#10;    ref={ref}&#10;    className={cn(&#10;      'overflow-hidden p-1 text-foreground [&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:py-1.5 [&amp;_[cmdk-group-heading]]:text-xs [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandGroup.displayName = CommandPrimitive.Group.displayName;&#10;&#10;const CommandSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 h-px bg-border', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;CommandSeparator.displayName = CommandPrimitive.Separator.displayName;&#10;&#10;const CommandItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      &quot;relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50&quot;,&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandItem.displayName = CommandPrimitive.Item.displayName;&#10;&#10;const CommandShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;CommandShortcut.displayName = 'CommandShortcut';&#10;&#10;export {&#10;  Command,&#10;  CommandDialog,&#10;  CommandInput,&#10;  CommandList,&#10;  CommandEmpty,&#10;  CommandGroup,&#10;  CommandItem,&#10;  CommandShortcut,&#10;  CommandSeparator,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { type DialogProps } from '@radix-ui/react-dialog';&#10;import { Command as CommandPrimitive } from 'cmdk';&#10;import { SearchIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { Dialog, DialogContent } from '@/components/ui/dialog';&#10;&#10;const Command = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive&#10;    ref={ref}&#10;    className={cn(&#10;      'flex h-full w-full flex-col overflow-hidden rounded-2xl bg-popover text-popover-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;Command.displayName = CommandPrimitive.displayName;&#10;&#10;interface CommandDialogProps extends DialogProps {}&#10;&#10;const CommandDialog = ({ children, ...props }: CommandDialogProps) =&gt; {&#10;  return (&#10;    &lt;Dialog {...props}&gt;&#10;      &lt;DialogContent className=&quot;overflow-hidden p-0 shadow-lg&quot;&gt;&#10;        &lt;Command className=&quot;[&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground [&amp;_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&amp;_[cmdk-group]]:px-2 [&amp;_[cmdk-input-wrapper]_svg]:h-5 [&amp;_[cmdk-input-wrapper]_svg]:w-5 [&amp;_[cmdk-input]]:h-12 [&amp;_[cmdk-item]]:px-2 [&amp;_[cmdk-item]]:py-3 [&amp;_[cmdk-item]_svg]:h-5 [&amp;_[cmdk-item]_svg]:w-5&quot;&gt;&#10;          {children}&#10;        &lt;/Command&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};&#10;&#10;const CommandInput = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Input&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Input&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div className=&quot;flex items-center border-b px-3&quot; cmdk-input-wrapper=&quot;&quot;&gt;&#10;    &lt;SearchIcon className=&quot;mr-2 h-4 w-4 shrink-0 opacity-50&quot; /&gt;&#10;    &lt;CommandPrimitive.Input&#10;      ref={ref}&#10;      className={cn(&#10;        'flex h-11 w-full rounded-2xl bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;));&#10;&#10;CommandInput.displayName = CommandPrimitive.Input.displayName;&#10;&#10;const CommandList = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.List&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.List&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.List&#10;    ref={ref}&#10;    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandList.displayName = CommandPrimitive.List.displayName;&#10;&#10;const CommandEmpty = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Empty&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Empty&gt;&#10;&gt;((props, ref) =&gt; (&#10;  &lt;CommandPrimitive.Empty&#10;    ref={ref}&#10;    className=&quot;py-6 text-center text-sm&quot;&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandEmpty.displayName = CommandPrimitive.Empty.displayName;&#10;&#10;const CommandGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Group&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Group&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Group&#10;    ref={ref}&#10;    className={cn(&#10;      'overflow-hidden p-1 text-foreground [&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:py-1.5 [&amp;_[cmdk-group-heading]]:text-xs [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandGroup.displayName = CommandPrimitive.Group.displayName;&#10;&#10;const CommandSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 h-px bg-border', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;CommandSeparator.displayName = CommandPrimitive.Separator.displayName;&#10;&#10;const CommandItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      &quot;relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50&quot;,&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandItem.displayName = CommandPrimitive.Item.displayName;&#10;&#10;const CommandShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;CommandShortcut.displayName = 'CommandShortcut';&#10;&#10;export {&#10;  Command,&#10;  CommandDialog,&#10;  CommandInput,&#10;  CommandList,&#10;  CommandEmpty,&#10;  CommandGroup,&#10;  CommandItem,&#10;  CommandShortcut,&#10;  CommandSeparator,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/context-menu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/context-menu.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';&#10;import { Check, ChevronRight, Circle } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ContextMenu = ContextMenuPrimitive.Root;&#10;&#10;const ContextMenuTrigger = ContextMenuPrimitive.Trigger;&#10;&#10;const ContextMenuGroup = ContextMenuPrimitive.Group;&#10;&#10;const ContextMenuPortal = ContextMenuPrimitive.Portal;&#10;&#10;const ContextMenuSub = ContextMenuPrimitive.Sub;&#10;&#10;const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;&#10;&#10;const ContextMenuSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRight className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/ContextMenuPrimitive.SubTrigger&gt;&#10;));&#10;ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;&#10;&#10;const ContextMenuSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;&#10;&#10;const ContextMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Content&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Portal&gt;&#10;    &lt;ContextMenuPrimitive.Content&#10;      ref={ref}&#10;      className={cn(&#10;        'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/ContextMenuPrimitive.Portal&gt;&#10;));&#10;ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;&#10;&#10;const ContextMenuItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;&#10;&#10;const ContextMenuCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;ContextMenuPrimitive.ItemIndicator&gt;&#10;        &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/ContextMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/ContextMenuPrimitive.CheckboxItem&gt;&#10;));&#10;ContextMenuCheckboxItem.displayName =&#10;  ContextMenuPrimitive.CheckboxItem.displayName;&#10;&#10;const ContextMenuRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;ContextMenuPrimitive.ItemIndicator&gt;&#10;        &lt;Circle className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/ContextMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/ContextMenuPrimitive.RadioItem&gt;&#10;));&#10;ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;&#10;&#10;const ContextMenuLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold text-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;&#10;&#10;const ContextMenuSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-border', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;&#10;&#10;const ContextMenuShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;ContextMenuShortcut.displayName = 'ContextMenuShortcut';&#10;&#10;export {&#10;  ContextMenu,&#10;  ContextMenuTrigger,&#10;  ContextMenuContent,&#10;  ContextMenuItem,&#10;  ContextMenuCheckboxItem,&#10;  ContextMenuRadioItem,&#10;  ContextMenuLabel,&#10;  ContextMenuSeparator,&#10;  ContextMenuShortcut,&#10;  ContextMenuGroup,&#10;  ContextMenuPortal,&#10;  ContextMenuSub,&#10;  ContextMenuSubContent,&#10;  ContextMenuSubTrigger,&#10;  ContextMenuRadioGroup,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';&#10;import { CheckIcon, ChevronRightIcon, CircleIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ContextMenu = ContextMenuPrimitive.Root;&#10;&#10;const ContextMenuTrigger = ContextMenuPrimitive.Trigger;&#10;&#10;const ContextMenuGroup = ContextMenuPrimitive.Group;&#10;&#10;const ContextMenuPortal = ContextMenuPrimitive.Portal;&#10;&#10;const ContextMenuSub = ContextMenuPrimitive.Sub;&#10;&#10;const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;&#10;&#10;const ContextMenuSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRightIcon className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/ContextMenuPrimitive.SubTrigger&gt;&#10;));&#10;ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;&#10;&#10;const ContextMenuSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;&#10;&#10;const ContextMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Content&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Portal&gt;&#10;    &lt;ContextMenuPrimitive.Content&#10;      ref={ref}&#10;      className={cn(&#10;        'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/ContextMenuPrimitive.Portal&gt;&#10;));&#10;ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;&#10;&#10;const ContextMenuItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;&#10;&#10;const ContextMenuCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;ContextMenuPrimitive.ItemIndicator&gt;&#10;        &lt;CheckIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/ContextMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/ContextMenuPrimitive.CheckboxItem&gt;&#10;));&#10;ContextMenuCheckboxItem.displayName =&#10;  ContextMenuPrimitive.CheckboxItem.displayName;&#10;&#10;const ContextMenuRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;ContextMenuPrimitive.ItemIndicator&gt;&#10;        &lt;CircleIcon className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/ContextMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/ContextMenuPrimitive.RadioItem&gt;&#10;));&#10;ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;&#10;&#10;const ContextMenuLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold text-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;&#10;&#10;const ContextMenuSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-border', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;&#10;&#10;const ContextMenuShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;ContextMenuShortcut.displayName = 'ContextMenuShortcut';&#10;&#10;export {&#10;  ContextMenu,&#10;  ContextMenuTrigger,&#10;  ContextMenuContent,&#10;  ContextMenuItem,&#10;  ContextMenuCheckboxItem,&#10;  ContextMenuRadioItem,&#10;  ContextMenuLabel,&#10;  ContextMenuSeparator,&#10;  ContextMenuShortcut,&#10;  ContextMenuGroup,&#10;  ContextMenuPortal,&#10;  ContextMenuSub,&#10;  ContextMenuSubContent,&#10;  ContextMenuSubTrigger,&#10;  ContextMenuRadioGroup,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/dropdown-menu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/dropdown-menu.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';&#10;import { Check, ChevronRight, Circle } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const DropdownMenu = DropdownMenuPrimitive.Root;&#10;&#10;const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;&#10;&#10;const DropdownMenuGroup = DropdownMenuPrimitive.Group;&#10;&#10;const DropdownMenuPortal = DropdownMenuPrimitive.Portal;&#10;&#10;const DropdownMenuSub = DropdownMenuPrimitive.Sub;&#10;&#10;const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;&#10;&#10;const DropdownMenuSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRight className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/DropdownMenuPrimitive.SubTrigger&gt;&#10;));&#10;DropdownMenuSubTrigger.displayName =&#10;  DropdownMenuPrimitive.SubTrigger.displayName;&#10;&#10;const DropdownMenuSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuSubContent.displayName =&#10;  DropdownMenuPrimitive.SubContent.displayName;&#10;&#10;const DropdownMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Content&gt;&#10;&gt;(({ className, sideOffset = 4, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Portal&gt;&#10;    &lt;DropdownMenuPrimitive.Content&#10;      ref={ref}&#10;      sideOffset={sideOffset}&#10;      className={cn(&#10;        'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/DropdownMenuPrimitive.Portal&gt;&#10;));&#10;DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;&#10;&#10;const DropdownMenuItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;&#10;&#10;const DropdownMenuCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;DropdownMenuPrimitive.ItemIndicator&gt;&#10;        &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/DropdownMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/DropdownMenuPrimitive.CheckboxItem&gt;&#10;));&#10;DropdownMenuCheckboxItem.displayName =&#10;  DropdownMenuPrimitive.CheckboxItem.displayName;&#10;&#10;const DropdownMenuRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;DropdownMenuPrimitive.ItemIndicator&gt;&#10;        &lt;Circle className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/DropdownMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/DropdownMenuPrimitive.RadioItem&gt;&#10;));&#10;DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;&#10;&#10;const DropdownMenuLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;&#10;&#10;const DropdownMenuSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-muted', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;&#10;&#10;const DropdownMenuShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn('ml-auto text-xs  opacity-60', className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';&#10;&#10;export {&#10;  DropdownMenu,&#10;  DropdownMenuTrigger,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuCheckboxItem,&#10;  DropdownMenuRadioItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuShortcut,&#10;  DropdownMenuGroup,&#10;  DropdownMenuPortal,&#10;  DropdownMenuSub,&#10;  DropdownMenuSubContent,&#10;  DropdownMenuSubTrigger,&#10;  DropdownMenuRadioGroup,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';&#10;import { CheckIcon, ChevronRightIcon, CircleIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const DropdownMenu = DropdownMenuPrimitive.Root;&#10;&#10;const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;&#10;&#10;const DropdownMenuGroup = DropdownMenuPrimitive.Group;&#10;&#10;const DropdownMenuPortal = DropdownMenuPrimitive.Portal;&#10;&#10;const DropdownMenuSub = DropdownMenuPrimitive.Sub;&#10;&#10;const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;&#10;&#10;const DropdownMenuSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRightIcon className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/DropdownMenuPrimitive.SubTrigger&gt;&#10;));&#10;DropdownMenuSubTrigger.displayName =&#10;  DropdownMenuPrimitive.SubTrigger.displayName;&#10;&#10;const DropdownMenuSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuSubContent.displayName =&#10;  DropdownMenuPrimitive.SubContent.displayName;&#10;&#10;const DropdownMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Content&gt;&#10;&gt;(({ className, sideOffset = 4, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Portal&gt;&#10;    &lt;DropdownMenuPrimitive.Content&#10;      ref={ref}&#10;      sideOffset={sideOffset}&#10;      className={cn(&#10;        'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/DropdownMenuPrimitive.Portal&gt;&#10;));&#10;DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;&#10;&#10;const DropdownMenuItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;&#10;&#10;const DropdownMenuCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;DropdownMenuPrimitive.ItemIndicator&gt;&#10;        &lt;CheckIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/DropdownMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/DropdownMenuPrimitive.CheckboxItem&gt;&#10;));&#10;DropdownMenuCheckboxItem.displayName =&#10;  DropdownMenuPrimitive.CheckboxItem.displayName;&#10;&#10;const DropdownMenuRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;DropdownMenuPrimitive.ItemIndicator&gt;&#10;        &lt;CircleIcon className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/DropdownMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/DropdownMenuPrimitive.RadioItem&gt;&#10;));&#10;DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;&#10;&#10;const DropdownMenuLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;&#10;&#10;const DropdownMenuSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-muted', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;&#10;&#10;const DropdownMenuShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn('ml-auto text-xs  opacity-60', className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';&#10;&#10;export {&#10;  DropdownMenu,&#10;  DropdownMenuTrigger,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuCheckboxItem,&#10;  DropdownMenuRadioItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuShortcut,&#10;  DropdownMenuGroup,&#10;  DropdownMenuPortal,&#10;  DropdownMenuSub,&#10;  DropdownMenuSubContent,&#10;  DropdownMenuSubTrigger,&#10;  DropdownMenuRadioGroup,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/input-otp.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/input-otp.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { OTPInput, OTPInputContext } from 'input-otp';&#10;import { Dot } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const InputOTP = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof OTPInput&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof OTPInput&gt;&#10;&gt;(({ className, containerClassName, ...props }, ref) =&gt; (&#10;  &lt;OTPInput&#10;    ref={ref}&#10;    containerClassName={cn(&#10;      'flex items-center gap-2 has-[:disabled]:opacity-50',&#10;      containerClassName&#10;    )}&#10;    className={cn('disabled:cursor-not-allowed', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;InputOTP.displayName = 'InputOTP';&#10;&#10;const InputOTPGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div ref={ref} className={cn('flex items-center', className)} {...props} /&gt;&#10;));&#10;InputOTPGroup.displayName = 'InputOTPGroup';&#10;&#10;const InputOTPSlot = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt; &amp; { index: number }&#10;&gt;(({ index, className, ...props }, ref) =&gt; {&#10;  const inputOTPContext = React.useContext(OTPInputContext);&#10;  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];&#10;&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={cn(&#10;        'relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',&#10;        isActive &amp;&amp; 'z-10 ring-2 ring-ring ring-offset-background',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {char}&#10;      {hasFakeCaret &amp;&amp; (&#10;        &lt;div className=&quot;pointer-events-none absolute inset-0 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;h-4 w-px animate-caret-blink bg-foreground duration-1000&quot; /&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;InputOTPSlot.displayName = 'InputOTPSlot';&#10;&#10;const InputOTPSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt;&#10;&gt;(({ ...props }, ref) =&gt; (&#10;  &lt;div ref={ref} role=&quot;separator&quot; {...props}&gt;&#10;    &lt;Dot /&gt;&#10;  &lt;/div&gt;&#10;));&#10;InputOTPSeparator.displayName = 'InputOTPSeparator';&#10;&#10;export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { OTPInput, OTPInputContext } from 'input-otp';&#10;import { DotIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const InputOTP = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof OTPInput&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof OTPInput&gt;&#10;&gt;(({ className, containerClassName, ...props }, ref) =&gt; (&#10;  &lt;OTPInput&#10;    ref={ref}&#10;    containerClassName={cn(&#10;      'flex items-center gap-2 has-[:disabled]:opacity-50',&#10;      containerClassName&#10;    )}&#10;    className={cn('disabled:cursor-not-allowed', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;InputOTP.displayName = 'InputOTP';&#10;&#10;const InputOTPGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div ref={ref} className={cn('flex items-center', className)} {...props} /&gt;&#10;));&#10;InputOTPGroup.displayName = 'InputOTPGroup';&#10;&#10;const InputOTPSlot = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt; &amp; { index: number }&#10;&gt;(({ index, className, ...props }, ref) =&gt; {&#10;  const inputOTPContext = React.useContext(OTPInputContext);&#10;  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];&#10;&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={cn(&#10;        'relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',&#10;        isActive &amp;&amp; 'z-10 ring-2 ring-ring ring-offset-background',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {char}&#10;      {hasFakeCaret &amp;&amp; (&#10;        &lt;div className=&quot;pointer-events-none absolute inset-0 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;h-4 w-px animate-caret-blink bg-foreground duration-1000&quot; /&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;InputOTPSlot.displayName = 'InputOTPSlot';&#10;&#10;const InputOTPSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt;&#10;&gt;(({ ...props }, ref) =&gt; (&#10;  &lt;div ref={ref} role=&quot;separator&quot; {...props}&gt;&#10;    &lt;DotIcon /&gt;&#10;  &lt;/div&gt;&#10;));&#10;InputOTPSeparator.displayName = 'InputOTPSeparator';&#10;&#10;export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/menubar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/menubar.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as MenubarPrimitive from '@radix-ui/react-menubar';&#10;import { Check, ChevronRight, Circle } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const MenubarMenu = MenubarPrimitive.Menu;&#10;&#10;const MenubarGroup = MenubarPrimitive.Group;&#10;&#10;const MenubarPortal = MenubarPrimitive.Portal;&#10;&#10;const MenubarSub = MenubarPrimitive.Sub;&#10;&#10;const MenubarRadioGroup = MenubarPrimitive.RadioGroup;&#10;&#10;const Menubar = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'flex h-10 items-center space-x-1 rounded-2xl border bg-background p-1',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;Menubar.displayName = MenubarPrimitive.Root.displayName;&#10;&#10;const MenubarTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Trigger&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Trigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;&#10;&#10;const MenubarSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRight className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/MenubarPrimitive.SubTrigger&gt;&#10;));&#10;MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;&#10;&#10;const MenubarSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;&#10;&#10;const MenubarContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Content&gt;&#10;&gt;(&#10;  (&#10;    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },&#10;    ref&#10;  ) =&gt; (&#10;    &lt;MenubarPrimitive.Portal&gt;&#10;      &lt;MenubarPrimitive.Content&#10;        ref={ref}&#10;        align={align}&#10;        alignOffset={alignOffset}&#10;        sideOffset={sideOffset}&#10;        className={cn(&#10;          'z-50 min-w-[12rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;          className&#10;        )}&#10;        {...props}&#10;      /&gt;&#10;    &lt;/MenubarPrimitive.Portal&gt;&#10;  )&#10;);&#10;MenubarContent.displayName = MenubarPrimitive.Content.displayName;&#10;&#10;const MenubarItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarItem.displayName = MenubarPrimitive.Item.displayName;&#10;&#10;const MenubarCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;MenubarPrimitive.ItemIndicator&gt;&#10;        &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/MenubarPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/MenubarPrimitive.CheckboxItem&gt;&#10;));&#10;MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;&#10;&#10;const MenubarRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;MenubarPrimitive.ItemIndicator&gt;&#10;        &lt;Circle className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/MenubarPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/MenubarPrimitive.RadioItem&gt;&#10;));&#10;MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;&#10;&#10;const MenubarLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarLabel.displayName = MenubarPrimitive.Label.displayName;&#10;&#10;const MenubarSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-muted', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;&#10;&#10;const MenubarShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;MenubarShortcut.displayname = 'MenubarShortcut';&#10;&#10;export {&#10;  Menubar,&#10;  MenubarMenu,&#10;  MenubarTrigger,&#10;  MenubarContent,&#10;  MenubarItem,&#10;  MenubarSeparator,&#10;  MenubarLabel,&#10;  MenubarCheckboxItem,&#10;  MenubarRadioGroup,&#10;  MenubarRadioItem,&#10;  MenubarPortal,&#10;  MenubarSubContent,&#10;  MenubarSubTrigger,&#10;  MenubarGroup,&#10;  MenubarSub,&#10;  MenubarShortcut,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as MenubarPrimitive from '@radix-ui/react-menubar';&#10;import { CheckIcon, ChevronRightIcon, CircleIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const MenubarMenu = MenubarPrimitive.Menu;&#10;&#10;const MenubarGroup = MenubarPrimitive.Group;&#10;&#10;const MenubarPortal = MenubarPrimitive.Portal;&#10;&#10;const MenubarSub = MenubarPrimitive.Sub;&#10;&#10;const MenubarRadioGroup = MenubarPrimitive.RadioGroup;&#10;&#10;const Menubar = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'flex h-10 items-center space-x-1 rounded-2xl border bg-background p-1',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;Menubar.displayName = MenubarPrimitive.Root.displayName;&#10;&#10;const MenubarTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Trigger&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Trigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;&#10;&#10;const MenubarSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRightIcon className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/MenubarPrimitive.SubTrigger&gt;&#10;));&#10;MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;&#10;&#10;const MenubarSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;&#10;&#10;const MenubarContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Content&gt;&#10;&gt;(&#10;  (&#10;    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },&#10;    ref&#10;  ) =&gt; (&#10;    &lt;MenubarPrimitive.Portal&gt;&#10;      &lt;MenubarPrimitive.Content&#10;        ref={ref}&#10;        align={align}&#10;        alignOffset={alignOffset}&#10;        sideOffset={sideOffset}&#10;        className={cn(&#10;          'z-50 min-w-[12rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;          className&#10;        )}&#10;        {...props}&#10;      /&gt;&#10;    &lt;/MenubarPrimitive.Portal&gt;&#10;  )&#10;);&#10;MenubarContent.displayName = MenubarPrimitive.Content.displayName;&#10;&#10;const MenubarItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarItem.displayName = MenubarPrimitive.Item.displayName;&#10;&#10;const MenubarCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;MenubarPrimitive.ItemIndicator&gt;&#10;        &lt;CheckIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/MenubarPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/MenubarPrimitive.CheckboxItem&gt;&#10;));&#10;MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;&#10;&#10;const MenubarRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;MenubarPrimitive.ItemIndicator&gt;&#10;        &lt;CircleIcon className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/MenubarPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/MenubarPrimitive.RadioItem&gt;&#10;));&#10;MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;&#10;&#10;const MenubarLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarLabel.displayName = MenubarPrimitive.Label.displayName;&#10;&#10;const MenubarSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-muted', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;&#10;&#10;const MenubarShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;MenubarShortcut.displayname = 'MenubarShortcut';&#10;&#10;export {&#10;  Menubar,&#10;  MenubarMenu,&#10;  MenubarTrigger,&#10;  MenubarContent,&#10;  MenubarItem,&#10;  MenubarSeparator,&#10;  MenubarLabel,&#10;  MenubarCheckboxItem,&#10;  MenubarRadioGroup,&#10;  MenubarRadioItem,&#10;  MenubarPortal,&#10;  MenubarSubContent,&#10;  MenubarSubTrigger,&#10;  MenubarGroup,&#10;  MenubarSub,&#10;  MenubarShortcut,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/navigation-menu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/navigation-menu.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';&#10;import { cva } from 'class-variance-authority';&#10;import { ChevronDown } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const NavigationMenu = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Root&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'relative z-10 flex max-w-max flex-1 items-center justify-center',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;NavigationMenuViewport /&gt;&#10;  &lt;/NavigationMenuPrimitive.Root&gt;&#10;));&#10;NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;&#10;&#10;const NavigationMenuList = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.List&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.List&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.List&#10;    ref={ref}&#10;    className={cn(&#10;      'group flex flex-1 list-none items-center justify-center space-x-1',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;&#10;&#10;const NavigationMenuItem = NavigationMenuPrimitive.Item;&#10;&#10;const navigationMenuTriggerStyle = cva(&#10;  'group inline-flex h-10 w-max items-center justify-center rounded-2xl bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'&#10;);&#10;&#10;const NavigationMenuTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Trigger&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Trigger&#10;    ref={ref}&#10;    className={cn(navigationMenuTriggerStyle(), 'group', className)}&#10;    {...props}&#10;  &gt;&#10;    {children}{' '}&#10;    &lt;ChevronDown&#10;      className=&quot;relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180&quot;&#10;      aria-hidden=&quot;true&quot;&#10;    /&gt;&#10;  &lt;/NavigationMenuPrimitive.Trigger&gt;&#10;));&#10;NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;&#10;&#10;const NavigationMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Content&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Content&#10;    ref={ref}&#10;    className={cn(&#10;      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;&#10;&#10;const NavigationMenuLink = NavigationMenuPrimitive.Link;&#10;&#10;const NavigationMenuViewport = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Viewport&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Viewport&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div className={cn('absolute left-0 top-full flex justify-center')}&gt;&#10;    &lt;NavigationMenuPrimitive.Viewport&#10;      className={cn(&#10;        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-2xl border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',&#10;        className&#10;      )}&#10;      ref={ref}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;));&#10;NavigationMenuViewport.displayName =&#10;  NavigationMenuPrimitive.Viewport.displayName;&#10;&#10;const NavigationMenuIndicator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Indicator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Indicator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Indicator&#10;    ref={ref}&#10;    className={cn(&#10;      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;div className=&quot;relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md&quot; /&gt;&#10;  &lt;/NavigationMenuPrimitive.Indicator&gt;&#10;));&#10;NavigationMenuIndicator.displayName =&#10;  NavigationMenuPrimitive.Indicator.displayName;&#10;&#10;export {&#10;  navigationMenuTriggerStyle,&#10;  NavigationMenu,&#10;  NavigationMenuList,&#10;  NavigationMenuItem,&#10;  NavigationMenuContent,&#10;  NavigationMenuTrigger,&#10;  NavigationMenuLink,&#10;  NavigationMenuIndicator,&#10;  NavigationMenuViewport,&#10;};&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';&#10;import { cva } from 'class-variance-authority';&#10;import { ChevronDownIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const NavigationMenu = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Root&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'relative z-10 flex max-w-max flex-1 items-center justify-center',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;NavigationMenuViewport /&gt;&#10;  &lt;/NavigationMenuPrimitive.Root&gt;&#10;));&#10;NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;&#10;&#10;const NavigationMenuList = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.List&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.List&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.List&#10;    ref={ref}&#10;    className={cn(&#10;      'group flex flex-1 list-none items-center justify-center space-x-1',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;&#10;&#10;const NavigationMenuItem = NavigationMenuPrimitive.Item;&#10;&#10;const navigationMenuTriggerStyle = cva(&#10;  'group inline-flex h-10 w-max items-center justify-center rounded-2xl bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'&#10;);&#10;&#10;const NavigationMenuTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Trigger&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Trigger&#10;    ref={ref}&#10;    className={cn(navigationMenuTriggerStyle(), 'group', className)}&#10;    {...props}&#10;  &gt;&#10;    {children}{' '}&#10;    &lt;ChevronDownIcon&#10;      className=&quot;relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180&quot;&#10;      aria-hidden=&quot;true&quot;&#10;    /&gt;&#10;  &lt;/NavigationMenuPrimitive.Trigger&gt;&#10;));&#10;NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;&#10;&#10;const NavigationMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Content&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Content&#10;    ref={ref}&#10;    className={cn(&#10;      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;&#10;&#10;const NavigationMenuLink = NavigationMenuPrimitive.Link;&#10;&#10;const NavigationMenuViewport = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Viewport&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Viewport&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div className={cn('absolute left-0 top-full flex justify-center')}&gt;&#10;    &lt;NavigationMenuPrimitive.Viewport&#10;      className={cn(&#10;        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-2xl border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',&#10;        className&#10;      )}&#10;      ref={ref}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;));&#10;NavigationMenuViewport.displayName =&#10;  NavigationMenuPrimitive.Viewport.displayName;&#10;&#10;const NavigationMenuIndicator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Indicator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Indicator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Indicator&#10;    ref={ref}&#10;    className={cn(&#10;      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;div className=&quot;relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md&quot; /&gt;&#10;  &lt;/NavigationMenuPrimitive.Indicator&gt;&#10;));&#10;NavigationMenuIndicator.displayName =&#10;  NavigationMenuPrimitive.Indicator.displayName;&#10;&#10;export {&#10;  navigationMenuTriggerStyle,&#10;  NavigationMenu,&#10;  NavigationMenuList,&#10;  NavigationMenuItem,&#10;  NavigationMenuContent,&#10;  NavigationMenuTrigger,&#10;  NavigationMenuLink,&#10;  NavigationMenuIndicator,&#10;  NavigationMenuViewport,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/pagination.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/pagination.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import { ChevronLeft, ChevronRight, MoreHorizontal } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { ButtonProps, buttonVariants } from '@/components/ui/button';&#10;&#10;const Pagination = ({ className, ...props }: React.ComponentProps&lt;'nav'&gt;) =&gt; (&#10;  &lt;nav&#10;    role=&quot;navigation&quot;&#10;    aria-label=&quot;pagination&quot;&#10;    className={cn('mx-auto flex w-full justify-center', className)}&#10;    {...props}&#10;  /&gt;&#10;);&#10;Pagination.displayName = 'Pagination';&#10;&#10;const PaginationContent = React.forwardRef&lt;&#10;  HTMLUListElement,&#10;  React.ComponentProps&lt;'ul'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ul&#10;    ref={ref}&#10;    className={cn('flex flex-row items-center gap-1', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;PaginationContent.displayName = 'PaginationContent';&#10;&#10;const PaginationItem = React.forwardRef&lt;&#10;  HTMLLIElement,&#10;  React.ComponentProps&lt;'li'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;li ref={ref} className={cn('', className)} {...props} /&gt;&#10;));&#10;PaginationItem.displayName = 'PaginationItem';&#10;&#10;type PaginationLinkProps = {&#10;  isActive?: boolean;&#10;} &amp; Pick&lt;ButtonProps, 'size'&gt; &amp;&#10;  React.ComponentProps&lt;'a'&gt;;&#10;&#10;const PaginationLink = ({&#10;  className,&#10;  isActive,&#10;  size = 'icon',&#10;  ...props&#10;}: PaginationLinkProps) =&gt; (&#10;  &lt;a&#10;    aria-current={isActive ? 'page' : undefined}&#10;    className={cn(&#10;      buttonVariants({&#10;        variant: isActive ? 'outline' : 'ghost',&#10;        size,&#10;      }),&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;PaginationLink.displayName = 'PaginationLink';&#10;&#10;const PaginationPrevious = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof PaginationLink&gt;) =&gt; (&#10;  &lt;PaginationLink&#10;    aria-label=&quot;Go to previous page&quot;&#10;    size=&quot;default&quot;&#10;    className={cn('gap-1 pl-2.5', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;ChevronLeft className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span&gt;Previous&lt;/span&gt;&#10;  &lt;/PaginationLink&gt;&#10;);&#10;PaginationPrevious.displayName = 'PaginationPrevious';&#10;&#10;const PaginationNext = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof PaginationLink&gt;) =&gt; (&#10;  &lt;PaginationLink&#10;    aria-label=&quot;Go to next page&quot;&#10;    size=&quot;default&quot;&#10;    className={cn('gap-1 pr-2.5', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;span&gt;Next&lt;/span&gt;&#10;    &lt;ChevronRight className=&quot;h-4 w-4&quot; /&gt;&#10;  &lt;/PaginationLink&gt;&#10;);&#10;PaginationNext.displayName = 'PaginationNext';&#10;&#10;const PaginationEllipsis = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'span'&gt;) =&gt; (&#10;  &lt;span&#10;    aria-hidden&#10;    className={cn('flex h-9 w-9 items-center justify-center', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span className=&quot;sr-only&quot;&gt;More pages&lt;/span&gt;&#10;  &lt;/span&gt;&#10;);&#10;PaginationEllipsis.displayName = 'PaginationEllipsis';&#10;&#10;export {&#10;  Pagination,&#10;  PaginationContent,&#10;  PaginationEllipsis,&#10;  PaginationItem,&#10;  PaginationLink,&#10;  PaginationNext,&#10;  PaginationPrevious,&#10;};&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import { ChevronLeftIcon, ChevronRightIcon, MoreHorizontalIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { ButtonProps, buttonVariants } from '@/components/ui/button';&#10;&#10;const Pagination = ({ className, ...props }: React.ComponentProps&lt;'nav'&gt;) =&gt; (&#10;  &lt;nav&#10;    role=&quot;navigation&quot;&#10;    aria-label=&quot;pagination&quot;&#10;    className={cn('mx-auto flex w-full justify-center', className)}&#10;    {...props}&#10;  /&gt;&#10;);&#10;Pagination.displayName = 'Pagination';&#10;&#10;const PaginationContent = React.forwardRef&lt;&#10;  HTMLUListElement,&#10;  React.ComponentProps&lt;'ul'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ul&#10;    ref={ref}&#10;    className={cn('flex flex-row items-center gap-1', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;PaginationContent.displayName = 'PaginationContent';&#10;&#10;const PaginationItem = React.forwardRef&lt;&#10;  HTMLLIElement,&#10;  React.ComponentProps&lt;'li'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;li ref={ref} className={cn('', className)} {...props} /&gt;&#10;));&#10;PaginationItem.displayName = 'PaginationItem';&#10;&#10;type PaginationLinkProps = {&#10;  isActive?: boolean;&#10;} &amp; Pick&lt;ButtonProps, 'size'&gt; &amp;&#10;  React.ComponentProps&lt;'a'&gt;;&#10;&#10;const PaginationLink = ({&#10;  className,&#10;  isActive,&#10;  size = 'icon',&#10;  ...props&#10;}: PaginationLinkProps) =&gt; (&#10;  &lt;a&#10;    aria-current={isActive ? 'page' : undefined}&#10;    className={cn(&#10;      buttonVariants({&#10;        variant: isActive ? 'outline' : 'ghost',&#10;        size,&#10;      }),&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;PaginationLink.displayName = 'PaginationLink';&#10;&#10;const PaginationPrevious = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof PaginationLink&gt;) =&gt; (&#10;  &lt;PaginationLink&#10;    aria-label=&quot;Go to previous page&quot;&#10;    size=&quot;default&quot;&#10;    className={cn('gap-1 pl-2.5', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;ChevronLeftIcon className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span&gt;Previous&lt;/span&gt;&#10;  &lt;/PaginationLink&gt;&#10;);&#10;PaginationPrevious.displayName = 'PaginationPrevious';&#10;&#10;const PaginationNext = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof PaginationLink&gt;) =&gt; (&#10;  &lt;PaginationLink&#10;    aria-label=&quot;Go to next page&quot;&#10;    size=&quot;default&quot;&#10;    className={cn('gap-1 pr-2.5', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;span&gt;Next&lt;/span&gt;&#10;    &lt;ChevronRightIcon className=&quot;h-4 w-4&quot; /&gt;&#10;  &lt;/PaginationLink&gt;&#10;);&#10;PaginationNext.displayName = 'PaginationNext';&#10;&#10;const PaginationEllipsis = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'span'&gt;) =&gt; (&#10;  &lt;span&#10;    aria-hidden&#10;    className={cn('flex h-9 w-9 items-center justify-center', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;MoreHorizontalIcon className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span className=&quot;sr-only&quot;&gt;More pages&lt;/span&gt;&#10;  &lt;/span&gt;&#10;);&#10;PaginationEllipsis.displayName = 'PaginationEllipsis';&#10;&#10;export {&#10;  Pagination,&#10;  PaginationContent,&#10;  PaginationEllipsis,&#10;  PaginationItem,&#10;  PaginationLink,&#10;  PaginationNext,&#10;  PaginationPrevious,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/radio-group.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/radio-group.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';&#10;import { Circle } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const RadioGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof RadioGroupPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;RadioGroupPrimitive.Root&#10;      className={cn('grid gap-2', className)}&#10;      {...props}&#10;      ref={ref}&#10;    /&gt;&#10;  );&#10;});&#10;RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;&#10;&#10;const RadioGroupItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof RadioGroupPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;RadioGroupPrimitive.Item&#10;      ref={ref}&#10;      className={cn(&#10;        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      &lt;RadioGroupPrimitive.Indicator className=&quot;flex items-center justify-center&quot;&gt;&#10;        &lt;Circle className=&quot;h-2.5 w-2.5 fill-current text-current&quot; /&gt;&#10;      &lt;/RadioGroupPrimitive.Indicator&gt;&#10;    &lt;/RadioGroupPrimitive.Item&gt;&#10;  );&#10;});&#10;RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;&#10;&#10;export { RadioGroup, RadioGroupItem };&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';&#10;import { CircleIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const RadioGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof RadioGroupPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;RadioGroupPrimitive.Root&#10;      className={cn('grid gap-2', className)}&#10;      {...props}&#10;      ref={ref}&#10;    /&gt;&#10;  );&#10;});&#10;RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;&#10;&#10;const RadioGroupItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof RadioGroupPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;RadioGroupPrimitive.Item&#10;      ref={ref}&#10;      className={cn(&#10;        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      &lt;RadioGroupPrimitive.Indicator className=&quot;flex items-center justify-center&quot;&gt;&#10;        &lt;CircleIcon className=&quot;h-2.5 w-2.5 fill-current text-current&quot; /&gt;&#10;      &lt;/RadioGroupPrimitive.Indicator&gt;&#10;    &lt;/RadioGroupPrimitive.Item&gt;&#10;  );&#10;});&#10;RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;&#10;&#10;export { RadioGroup, RadioGroupItem };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/resizable.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/resizable.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { GripVertical } from '@phosphor-icons/react';&#10;import * as ResizablePrimitive from 'react-resizable-panels';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ResizablePanelGroup = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof ResizablePrimitive.PanelGroup&gt;) =&gt; (&#10;  &lt;ResizablePrimitive.PanelGroup&#10;    className={cn(&#10;      'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;&#10;const ResizablePanel = ResizablePrimitive.Panel;&#10;&#10;const ResizableHandle = ({&#10;  withHandle,&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof ResizablePrimitive.PanelResizeHandle&gt; &amp; {&#10;  withHandle?: boolean;&#10;}) =&gt; (&#10;  &lt;ResizablePrimitive.PanelResizeHandle&#10;    className={cn(&#10;      'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&amp;[data-panel-group-direction=vertical]&gt;div]:rotate-90',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {withHandle &amp;&amp; (&#10;      &lt;div className=&quot;z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border&quot;&gt;&#10;        &lt;GripVertical className=&quot;h-2.5 w-2.5&quot; /&gt;&#10;      &lt;/div&gt;&#10;    )}&#10;  &lt;/ResizablePrimitive.PanelResizeHandle&gt;&#10;);&#10;&#10;export { ResizablePanelGroup, ResizablePanel, ResizableHandle };&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { GripVerticalIcon } from '@phosphor-icons/react';&#10;import * as ResizablePrimitive from 'react-resizable-panels';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ResizablePanelGroup = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof ResizablePrimitive.PanelGroup&gt;) =&gt; (&#10;  &lt;ResizablePrimitive.PanelGroup&#10;    className={cn(&#10;      'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;&#10;const ResizablePanel = ResizablePrimitive.Panel;&#10;&#10;const ResizableHandle = ({&#10;  withHandle,&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof ResizablePrimitive.PanelResizeHandle&gt; &amp; {&#10;  withHandle?: boolean;&#10;}) =&gt; (&#10;  &lt;ResizablePrimitive.PanelResizeHandle&#10;    className={cn(&#10;      'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&amp;[data-panel-group-direction=vertical]&gt;div]:rotate-90',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {withHandle &amp;&amp; (&#10;      &lt;div className=&quot;z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border&quot;&gt;&#10;        &lt;GripVerticalIcon className=&quot;h-2.5 w-2.5&quot; /&gt;&#10;      &lt;/div&gt;&#10;    )}&#10;  &lt;/ResizablePrimitive.PanelResizeHandle&gt;&#10;);&#10;&#10;export { ResizablePanelGroup, ResizablePanel, ResizableHandle };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/sheet.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/sheet.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as SheetPrimitive from '@radix-ui/react-dialog';&#10;import { cva, type VariantProps } from 'class-variance-authority';&#10;import { X } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Sheet = SheetPrimitive.Root;&#10;&#10;const SheetTrigger = SheetPrimitive.Trigger;&#10;&#10;const SheetClose = SheetPrimitive.Close;&#10;&#10;const SheetPortal = SheetPrimitive.Portal;&#10;&#10;const SheetOverlay = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Overlay&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Overlay&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Overlay&#10;    className={cn(&#10;      'fixed inset-0 z-50 bg-primary-900/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',&#10;      className&#10;    )}&#10;    {...props}&#10;    ref={ref}&#10;  /&gt;&#10;));&#10;SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;&#10;&#10;const sheetVariants = cva(&#10;  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',&#10;  {&#10;    variants: {&#10;      side: {&#10;        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',&#10;        bottom:&#10;          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',&#10;        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',&#10;        right:&#10;          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',&#10;      },&#10;    },&#10;    defaultVariants: {&#10;      side: 'right',&#10;    },&#10;  }&#10;);&#10;&#10;interface SheetContentProps&#10;  extends React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Content&gt;,&#10;    VariantProps&lt;typeof sheetVariants&gt; {}&#10;&#10;const SheetContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Content&gt;,&#10;  SheetContentProps&#10;&gt;(({ side = 'right', className, children, ...props }, ref) =&gt; (&#10;  &lt;SheetPortal&gt;&#10;    &lt;SheetOverlay /&gt;&#10;    &lt;SheetPrimitive.Content&#10;      ref={ref}&#10;      className={cn(sheetVariants({ side }), className)}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;SheetPrimitive.Close className=&quot;absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary&quot;&gt;&#10;        &lt;X className=&quot;h-4 w-4&quot; /&gt;&#10;        &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&#10;      &lt;/SheetPrimitive.Close&gt;&#10;    &lt;/SheetPrimitive.Content&gt;&#10;  &lt;/SheetPortal&gt;&#10;));&#10;SheetContent.displayName = SheetPrimitive.Content.displayName;&#10;&#10;const SheetHeader = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col space-y-2 text-center sm:text-left',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;SheetHeader.displayName = 'SheetHeader';&#10;&#10;const SheetFooter = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;SheetFooter.displayName = 'SheetFooter';&#10;&#10;const SheetTitle = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Title&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Title&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Title&#10;    ref={ref}&#10;    className={cn('text-lg font-semibold text-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;SheetTitle.displayName = SheetPrimitive.Title.displayName;&#10;&#10;const SheetDescription = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Description&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Description&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Description&#10;    ref={ref}&#10;    className={cn('text-sm text-muted-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;SheetDescription.displayName = SheetPrimitive.Description.displayName;&#10;&#10;export {&#10;  Sheet,&#10;  SheetPortal,&#10;  SheetOverlay,&#10;  SheetTrigger,&#10;  SheetClose,&#10;  SheetContent,&#10;  SheetHeader,&#10;  SheetFooter,&#10;  SheetTitle,&#10;  SheetDescription,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as SheetPrimitive from '@radix-ui/react-dialog';&#10;import { cva, type VariantProps } from 'class-variance-authority';&#10;import { XIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Sheet = SheetPrimitive.Root;&#10;&#10;const SheetTrigger = SheetPrimitive.Trigger;&#10;&#10;const SheetClose = SheetPrimitive.Close;&#10;&#10;const SheetPortal = SheetPrimitive.Portal;&#10;&#10;const SheetOverlay = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Overlay&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Overlay&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Overlay&#10;    className={cn(&#10;      'fixed inset-0 z-50 bg-primary-900/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',&#10;      className&#10;    )}&#10;    {...props}&#10;    ref={ref}&#10;  /&gt;&#10;));&#10;SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;&#10;&#10;const sheetVariants = cva(&#10;  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',&#10;  {&#10;    variants: {&#10;      side: {&#10;        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',&#10;        bottom:&#10;          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',&#10;        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',&#10;        right:&#10;          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',&#10;      },&#10;    },&#10;    defaultVariants: {&#10;      side: 'right',&#10;    },&#10;  }&#10;);&#10;&#10;interface SheetContentProps&#10;  extends React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Content&gt;,&#10;    VariantProps&lt;typeof sheetVariants&gt; {}&#10;&#10;const SheetContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Content&gt;,&#10;  SheetContentProps&#10;&gt;(({ side = 'right', className, children, ...props }, ref) =&gt; (&#10;  &lt;SheetPortal&gt;&#10;    &lt;SheetOverlay /&gt;&#10;    &lt;SheetPrimitive.Content&#10;      ref={ref}&#10;      className={cn(sheetVariants({ side }), className)}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;SheetPrimitive.Close className=&quot;absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary&quot;&gt;&#10;        &lt;XIcon className=&quot;h-4 w-4&quot; /&gt;&#10;        &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&#10;      &lt;/SheetPrimitive.Close&gt;&#10;    &lt;/SheetPrimitive.Content&gt;&#10;  &lt;/SheetPortal&gt;&#10;));&#10;SheetContent.displayName = SheetPrimitive.Content.displayName;&#10;&#10;const SheetHeader = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col space-y-2 text-center sm:text-left',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;SheetHeader.displayName = 'SheetHeader';&#10;&#10;const SheetFooter = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;SheetFooter.displayName = 'SheetFooter';&#10;&#10;const SheetTitle = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Title&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Title&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Title&#10;    ref={ref}&#10;    className={cn('text-lg font-semibold text-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;SheetTitle.displayName = SheetPrimitive.Title.displayName;&#10;&#10;const SheetDescription = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Description&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Description&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Description&#10;    ref={ref}&#10;    className={cn('text-sm text-muted-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;SheetDescription.displayName = SheetPrimitive.Description.displayName;&#10;&#10;export {&#10;  Sheet,&#10;  SheetPortal,&#10;  SheetOverlay,&#10;  SheetTrigger,&#10;  SheetClose,&#10;  SheetContent,&#10;  SheetHeader,&#10;  SheetFooter,&#10;  SheetTitle,&#10;  SheetDescription,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/table.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/table.tsx" />
              <option name="originalContent" value="import React from &quot;react&quot;;&#10;import {&#10;  Table as HeroTable,&#10;  TableHeader as HeroTableHeader,&#10;  TableColumn as HeroTableColumn,&#10;  TableBody as HeroTableBody,&#10;  TableRow as HeroTableRow,&#10;  TableCell as HeroTableCell,&#10;} from &quot;@heroui/table&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;&#10;const Table = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTable&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTable&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTable&#10;    ref={ref}&#10;    className={cn(&quot;w-full&quot;, className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;Table.displayName = &quot;Table&quot;;&#10;&#10;export {&#10;  Table,&#10;  HeroTableHeader as TableHeader,&#10;  HeroTableColumn as TableColumn,&#10;  HeroTableBody as TableBody,&#10;  HeroTableRow as TableRow,&#10;  HeroTableCell as TableCell,&#10;};&#10;" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import {&#10;  Table as HeroTable,&#10;  TableHeader as HeroTableHeader,&#10;  TableColumn as HeroTableColumn,&#10;  TableBody as HeroTableBody,&#10;  TableRow as HeroTableRow,&#10;  TableCell as HeroTableCell,&#10;} from &quot;@heroui/table&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;&#10;const Table = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTable&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTable&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTable&#10;    ref={ref}&#10;    className={cn(&quot;w-full&quot;, className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableHeader = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableHeader&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableHeader&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableHeader&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableColumn = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableColumn&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableColumn&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableColumn&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableBody = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableBody&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableBody&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableBody&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableRow = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableRow&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableRow&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableRow&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableCell = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableCell&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableCell&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableCell&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;Table.displayName = &quot;Table&quot;;&#10;TableHeader.displayName = &quot;TableHeader&quot;;&#10;TableColumn.displayName = &quot;TableColumn&quot;;&#10;TableBody.displayName = &quot;TableBody&quot;;&#10;TableRow.displayName = &quot;TableRow&quot;;&#10;TableCell.displayName = &quot;TableCell&quot;;&#10;&#10;export {&#10;  Table,&#10;  TableHeader,&#10;  TableColumn,&#10;  TableBody,&#10;  TableRow,&#10;  TableCell,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/manifest.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/manifest.json" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;Semensol Agro - Sistema de Pesagem&quot;,&#10;  &quot;short_name&quot;: &quot;Semensol Agro&quot;,&#10;  &quot;description&quot;: &quot;Sistema de controle e monitoramento de pesagem para operações agrícolas&quot;,&#10;  &quot;start_url&quot;: &quot;/&quot;,&#10;  &quot;display&quot;: &quot;standalone&quot;,&#10;  &quot;background_color&quot;: &quot;#ffffff&quot;,&#10;  &quot;theme_color&quot;: &quot;#059669&quot;,&#10;  &quot;orientation&quot;: &quot;portrait-primary&quot;,&#10;  &quot;scope&quot;: &quot;/&quot;,&#10;  &quot;categories&quot;: [&quot;business&quot;, &quot;productivity&quot;],&#10;  &quot;lang&quot;: &quot;pt-BR&quot;,&#10;  &quot;icons&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;/images/logo.png&quot;,&#10;      &quot;sizes&quot;: &quot;192x192&quot;,&#10;      &quot;type&quot;: &quot;image/png&quot;,&#10;      &quot;purpose&quot;: &quot;any&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/images/logo.png&quot;,&#10;      &quot;sizes&quot;: &quot;512x512&quot;,&#10;      &quot;type&quot;: &quot;image/png&quot;,&#10;      &quot;purpose&quot;: &quot;any&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/images/logo.png&quot;,&#10;      &quot;sizes&quot;: &quot;192x192&quot;,&#10;      &quot;type&quot;: &quot;image/png&quot;,&#10;      &quot;purpose&quot;: &quot;maskable&quot;&#10;    }&#10;  ],&#10;  &quot;screenshots&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;/images/screenshot-desktop.png&quot;,&#10;      &quot;sizes&quot;: &quot;1280x720&quot;,&#10;      &quot;type&quot;: &quot;image/png&quot;,&#10;      &quot;form_factor&quot;: &quot;wide&quot;,&#10;      &quot;label&quot;: &quot;Tela principal do sistema de pesagem&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/images/screenshot-mobile.png&quot;,&#10;      &quot;sizes&quot;: &quot;390x844&quot;,&#10;      &quot;type&quot;: &quot;image/png&quot;,&#10;      &quot;form_factor&quot;: &quot;narrow&quot;,&#10;      &quot;label&quot;: &quot;Interface mobile do sistema&quot;&#10;    }&#10;  ],&#10;  &quot;shortcuts&quot;: [&#10;    {&#10;      &quot;name&quot;: &quot;Pesagem Ativa&quot;,&#10;      &quot;short_name&quot;: &quot;Pesagem&quot;,&#10;      &quot;description&quot;: &quot;Acesso rápido à central de pesagem&quot;,&#10;      &quot;url&quot;: &quot;/weighing&quot;,&#10;      &quot;icons&quot;: [&#10;        {&#10;          &quot;src&quot;: &quot;/images/logo.png&quot;,&#10;          &quot;sizes&quot;: &quot;192x192&quot;&#10;        }&#10;      ]&#10;    },&#10;    {&#10;      &quot;name&quot;: &quot;Histórico&quot;,&#10;      &quot;short_name&quot;: &quot;Histórico&quot;,&#10;      &quot;description&quot;: &quot;Consultar histórico de pesagens&quot;,&#10;      &quot;url&quot;: &quot;/history&quot;,&#10;      &quot;icons&quot;: [&#10;        {&#10;          &quot;src&quot;: &quot;/images/logo.png&quot;,&#10;          &quot;sizes&quot;: &quot;192x192&quot;&#10;        }&#10;      ]&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/public/sw.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/sw.js" />
              <option name="updatedContent" value="const CACHE_NAME = 'semensol-agro-v1';&#10;const urlsToCache = [&#10;  '/',&#10;  '/weighing',&#10;  '/history',&#10;  '/drivers',&#10;  '/fleet',&#10;  '/images/logo.png',&#10;  '/images/favicon.ico',&#10;  '/manifest.json'&#10;];&#10;&#10;// Install event - cache resources&#10;self.addEventListener('install', (event) =&gt; {&#10;  event.waitUntil(&#10;    caches.open(CACHE_NAME)&#10;      .then((cache) =&gt; {&#10;        return cache.addAll(urlsToCache);&#10;      })&#10;  );&#10;});&#10;&#10;// Fetch event - serve from cache when offline&#10;self.addEventListener('fetch', (event) =&gt; {&#10;  event.respondWith(&#10;    caches.match(event.request)&#10;      .then((response) =&gt; {&#10;        // Return cached version or fetch from network&#10;        return response || fetch(event.request);&#10;      }&#10;    )&#10;  );&#10;});&#10;&#10;// Activate event - clean up old caches&#10;self.addEventListener('activate', (event) =&gt; {&#10;  event.waitUntil(&#10;    caches.keys().then((cacheNames) =&gt; {&#10;      return Promise.all(&#10;        cacheNames.map((cacheName) =&gt; {&#10;          if (cacheName !== CACHE_NAME) {&#10;            return caches.delete(cacheName);&#10;          }&#10;        })&#10;      );&#10;    })&#10;  );&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>