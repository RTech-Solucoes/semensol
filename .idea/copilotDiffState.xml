<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/drivers/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/drivers/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import {PlusIcon} from &quot;@phosphor-icons/react&quot;;&#10;import {Driver, DriverCard} from &quot;@/components/drivers/driver-card&quot;;&#10;import {FAB} from &quot;@/components/ui/fab&quot;;&#10;import {AddDriverModal} from &quot;@/components/drivers/add-driver-modal&quot;;&#10;import {EditDriverModal} from &quot;@/components/drivers/edit-driver-modal&quot;;&#10;import {useState} from &quot;react&quot;;&#10;&#10;export default function DriversPage() {&#10;  const [addModalOpen, setAddModalOpen] = useState(false);&#10;  const [editModalOpen, setEditModalOpen] = useState(false);&#10;  const [selectedDriver, setSelectedDriver] = useState&lt;Driver | null&gt;(null);&#10;  const [drivers, setDrivers] = useState&lt;Driver[]&gt;([&#10;    {&#10;      id: 1,&#10;      name: &quot;João Silva&quot;,&#10;      document: &quot;CNH: 1234567890&quot;,&#10;      cpf: &quot;123.456.789-01&quot;,&#10;      phone: &quot;(11) 99999-9999&quot;,&#10;      email: &quot;joao@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;Transportes Silva Ltda&quot;,&#10;      experience: &quot;5 anos&quot;,&#10;      category: &quot;D&quot;,&#10;    },&#10;    {&#10;      id: 2,&#10;      name: &quot;Maria Santos&quot;,&#10;      document: &quot;CNH: 0987654321&quot;,&#10;      cpf: &quot;987.654.321-09&quot;,&#10;      phone: &quot;(11) 88888-8888&quot;,&#10;      email: &quot;maria@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;Logística Santos&quot;,&#10;      experience: &quot;8 anos&quot;,&#10;      category: &quot;E&quot;,&#10;    },&#10;    {&#10;      id: 3,&#10;      name: &quot;Pedro Oliveira&quot;,&#10;      document: &quot;CNH: 5566778899&quot;,&#10;      cpf: &quot;456.789.123-45&quot;,&#10;      phone: &quot;(11) 97777-7777&quot;,&#10;      email: &quot;pedro.oliveira@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;Frota Oliveira&quot;,&#10;      experience: &quot;12 anos&quot;,&#10;      category: &quot;C&quot;,&#10;    },&#10;    {&#10;      id: 4,&#10;      name: &quot;Ana Costa&quot;,&#10;      document: &quot;CNH: 1122334455&quot;,&#10;      cpf: &quot;789.123.456-78&quot;,&#10;      phone: &quot;(11) 96666-6666&quot;,&#10;      email: &quot;ana.costa@email.com&quot;,&#10;      status: &quot;Inativo&quot;,&#10;      company: &quot;Auto Costa&quot;,&#10;      experience: &quot;3 anos&quot;,&#10;      category: &quot;B&quot;,&#10;    },&#10;    {&#10;      id: 5,&#10;      name: &quot;Carlos Lima&quot;,&#10;      document: &quot;CNH: 9988776655&quot;,&#10;      cpf: &quot;321.654.987-32&quot;,&#10;      phone: &quot;(11) 95555-5555&quot;,&#10;      email: &quot;carlos.lima@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;Lima Transportes e Logística Integrada&quot;,&#10;      experience: &quot;15 anos&quot;,&#10;      category: &quot;E&quot;,&#10;    },&#10;    {&#10;      id: 6,&#10;      name: &quot;Fernanda Rocha&quot;,&#10;      document: &quot;CNH: 4433221100&quot;,&#10;      cpf: &quot;654.321.987-65&quot;,&#10;      phone: &quot;(11) 94444-4444&quot;,&#10;      email: &quot;fernanda.rocha@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;Rocha Cargas&quot;,&#10;      experience: &quot;7 anos&quot;,&#10;      category: &quot;D&quot;,&#10;    },&#10;    {&#10;      id: 7,&#10;      name: &quot;Roberto Mendes&quot;,&#10;      document: &quot;CNH: 7788990011&quot;,&#10;      cpf: &quot;159.753.486-15&quot;,&#10;      phone: &quot;(11) 93333-3333&quot;,&#10;      email: &quot;roberto.mendes@email.com&quot;,&#10;      status: &quot;Suspenso&quot;,&#10;      company: &quot;Mendes &amp; Filhos Transportadora&quot;,&#10;      experience: &quot;20 anos&quot;,&#10;      category: &quot;E&quot;,&#10;    },&#10;    {&#10;      id: 8,&#10;      name: &quot;Juliana Ferreira&quot;,&#10;      document: &quot;CNH: 2233445566&quot;,&#10;      cpf: &quot;357.159.753-35&quot;,&#10;      phone: &quot;(11) 92222-2222&quot;,&#10;      email: &quot;juliana.ferreira@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;Ferreira Logística&quot;,&#10;      experience: &quot;4 anos&quot;,&#10;      category: &quot;C&quot;,&#10;    },&#10;    {&#10;      id: 9,&#10;      name: &quot;Ricardo Barbosa&quot;,&#10;      document: &quot;CNH: 6677889900&quot;,&#10;      cpf: &quot;741.852.963-74&quot;,&#10;      phone: &quot;(11) 91111-1111&quot;,&#10;      email: &quot;ricardo.barbosa@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      company: &quot;Barbosa Transportes&quot;,&#10;      experience: &quot;10 anos&quot;,&#10;      category: &quot;D&quot;,&#10;    },&#10;    {&#10;      id: 10,&#10;      name: &quot;Patrícia Alves&quot;,&#10;      document: &quot;CNH: 3344556677&quot;,&#10;      cpf: &quot;852.963.741-85&quot;,&#10;      phone: &quot;(11) 90000-0000&quot;,&#10;      email: &quot;patricia.alves@email.com&quot;,&#10;      status: &quot;Inativo&quot;,&#10;      company: &quot;Alves Express&quot;,&#10;      experience: &quot;6 anos&quot;,&#10;      category: &quot;C&quot;,&#10;    },&#10;  ]);&#10;&#10;  const handleNewDriver = () =&gt; {&#10;    setAddModalOpen(true);&#10;  };&#10;&#10;  const handleEditDriver = (driver: Driver) =&gt; {&#10;    setSelectedDriver(driver);&#10;    setEditModalOpen(true);&#10;  };&#10;&#10;  const handleSaveDriver = (newDriver: Omit&lt;Driver, &quot;id&quot;&gt;) =&gt; {&#10;    const driver: Driver = {&#10;      ...newDriver,&#10;      id: Math.max(...drivers.map((d) =&gt; d.id)) + 1,&#10;    };&#10;    setDrivers((prev) =&gt; [...prev, driver]);&#10;  };&#10;&#10;  const handleUpdateDriver = (updatedDriver: Driver) =&gt; {&#10;    setDrivers((prev) =&gt;&#10;      prev.map((driver) =&gt;&#10;        driver.id === updatedDriver.id ? updatedDriver : driver&#10;      )&#10;    );&#10;  };&#10;&#10;  const handleDeleteDriver = (driverId: number) =&gt; {&#10;    setDrivers((prev) =&gt; prev.filter((driver) =&gt; driver.id !== driverId));&#10;  };&#10;&#10;  return (&#10;    &lt;main&gt;&#10;      &lt;div&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#10;          Motoristas&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#10;          Gerencie os motoristas cadastrados&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-1 gap-6 lg:grid-cols-2 xl:grid-cols-3 auto-rows-fr&quot;&gt;&#10;        {drivers.map((driver) =&gt; (&#10;          &lt;DriverCard&#10;            key={driver.id}&#10;            driver={driver}&#10;            onEdit={handleEditDriver}&#10;          /&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;FAB&#10;        icon={PlusIcon}&#10;        label=&quot;Novo Motorista&quot;&#10;        onClick={handleNewDriver}&#10;      /&gt;&#10;&#10;      &lt;AddDriverModal&#10;        open={addModalOpen}&#10;        onOpenChange={setAddModalOpen}&#10;        onSave={handleSaveDriver}&#10;      /&gt;&#10;&#10;      &lt;EditDriverModal&#10;        open={editModalOpen}&#10;        onOpenChange={setEditModalOpen}&#10;        driver={selectedDriver}&#10;        onSave={handleUpdateDriver}&#10;        onDelete={handleDeleteDriver}&#10;      /&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;import {useState, useEffect} from &quot;react&quot;;&#13;&#10;import {Card, CardContent, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#13;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#13;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#13;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#13;&#10;import {&#13;&#10;  Dialog,&#13;&#10;  DialogContent,&#13;&#10;  DialogHeader,&#13;&#10;  DialogTitle,&#13;&#10;  DialogTrigger,&#13;&#10;} from &quot;@/components/ui/dialog&quot;;&#13;&#10;import {&#13;&#10;  PlusIcon,&#13;&#10;  IdentificationCardIcon,&#13;&#10;  CameraIcon,&#13;&#10;} from &quot;@phosphor-icons/react&quot;;&#13;&#10;import {apiClient} from &quot;@/lib/api&quot;;&#13;&#10;&#13;&#10;interface Driver {&#13;&#10;  id: number;&#13;&#10;  nome: string;&#13;&#10;  cpf: string;&#13;&#10;  cnh: string;&#13;&#10;  imagem_path?: string;&#13;&#10;}&#13;&#10;&#13;&#10;export default function DriversPage() {&#13;&#10;  const [drivers, setDrivers] = useState&lt;Driver[]&gt;([]);&#13;&#10;  const [loading, setLoading] = useState(false);&#13;&#10;  const [isModalOpen, setIsModalOpen] = useState(false);&#13;&#10;  const [formData, setFormData] = useState({&#13;&#10;    nome: &quot;&quot;,&#13;&#10;    cpf: &quot;&quot;,&#13;&#10;    cnh: &quot;&quot;,&#13;&#10;    imagem: null as File | null,&#13;&#10;  });&#13;&#10;&#13;&#10;  const handleImageChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#13;&#10;    if (e.target.files &amp;&amp; e.target.files[0]) {&#13;&#10;      setFormData((prev) =&gt; ({...prev, imagem: e.target.files![0]}));&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    if (!formData.nome || !formData.cpf || !formData.cnh || !formData.imagem)&#13;&#10;      return;&#13;&#10;&#13;&#10;    setLoading(true);&#13;&#10;    const form = new FormData();&#13;&#10;    form.append(&quot;nome&quot;, formData.nome);&#13;&#10;    form.append(&quot;cpf&quot;, formData.cpf);&#13;&#10;    form.append(&quot;cnh&quot;, formData.cnh);&#13;&#10;    form.append(&quot;imagem&quot;, formData.imagem);&#13;&#10;&#13;&#10;    const response = await apiClient.cadastrarMotorista(form);&#13;&#10;&#13;&#10;    if (response.data) {&#13;&#10;      setDrivers((prev) =&gt; [...prev, response.data]);&#13;&#10;      setFormData({nome: &quot;&quot;, cpf: &quot;&quot;, cnh: &quot;&quot;, imagem: null});&#13;&#10;      setIsModalOpen(false);&#13;&#10;    }&#13;&#10;    setLoading(false);&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#13;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-white&quot;&gt;&#13;&#10;          Gerenciamento de Motoristas&#13;&#10;        &lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;Cadastre e gerencie os motoristas autorizados&lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;Card className=&quot;w-full max-w-none&quot;&gt;&#13;&#10;        &lt;CardHeader&gt;&#13;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#13;&#10;              &lt;IdentificationCardIcon className=&quot;h-5 w-5&quot; /&gt;&#13;&#10;              Motoristas Cadastrados&#13;&#10;            &lt;/CardTitle&gt;&#13;&#10;&#13;&#10;            &lt;Dialog open={isModalOpen} onOpenChange={setIsModalOpen}&gt;&#13;&#10;              &lt;DialogTrigger asChild&gt;&#13;&#10;                &lt;Button className=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                  &lt;PlusIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;                  Novo Motorista&#13;&#10;                &lt;/Button&gt;&#13;&#10;              &lt;/DialogTrigger&gt;&#13;&#10;              &lt;DialogContent className=&quot;sm:max-w-md&quot;&gt;&#13;&#10;                &lt;DialogHeader&gt;&#13;&#10;                  &lt;DialogTitle&gt;Cadastrar Novo Motorista&lt;/DialogTitle&gt;&#13;&#10;                &lt;/DialogHeader&gt;&#13;&#10;                &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;Label htmlFor=&quot;nome&quot;&gt;Nome Completo&lt;/Label&gt;&#13;&#10;                    &lt;Input&#13;&#10;                      id=&quot;nome&quot;&#13;&#10;                      placeholder=&quot;Nome do motorista&quot;&#13;&#10;                      value={formData.nome}&#13;&#10;                      onChange={(e) =&gt;&#13;&#10;                        setFormData((prev) =&gt; ({...prev, nome: e.target.value}))&#13;&#10;                      }&#13;&#10;                      required&#13;&#10;                    /&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;Label htmlFor=&quot;cpf&quot;&gt;CPF&lt;/Label&gt;&#13;&#10;                    &lt;Input&#13;&#10;                      id=&quot;cpf&quot;&#13;&#10;                      placeholder=&quot;000.000.000-00&quot;&#13;&#10;                      value={formData.cpf}&#13;&#10;                      onChange={(e) =&gt;&#13;&#10;                        setFormData((prev) =&gt; ({...prev, cpf: e.target.value}))&#13;&#10;                      }&#13;&#10;                      required&#13;&#10;                    /&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;Label htmlFor=&quot;cnh&quot;&gt;CNH&lt;/Label&gt;&#13;&#10;                    &lt;Input&#13;&#10;                      id=&quot;cnh&quot;&#13;&#10;                      placeholder=&quot;Número da CNH&quot;&#13;&#10;                      value={formData.cnh}&#13;&#10;                      onChange={(e) =&gt;&#13;&#10;                        setFormData((prev) =&gt; ({...prev, cnh: e.target.value}))&#13;&#10;                      }&#13;&#10;                      required&#13;&#10;                    /&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div&gt;&#13;&#10;                    &lt;Label htmlFor=&quot;imagem&quot;&gt;Foto do Motorista&lt;/Label&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                      &lt;Input&#13;&#10;                        id=&quot;imagem&quot;&#13;&#10;                        type=&quot;file&quot;&#13;&#10;                        accept=&quot;image/*&quot;&#13;&#10;                        onChange={handleImageChange}&#13;&#10;                        required&#13;&#10;                        className=&quot;flex-1&quot;&#13;&#10;                      /&gt;&#13;&#10;                      &lt;CameraIcon className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    {formData.imagem &amp;&amp; (&#13;&#10;                      &lt;p className=&quot;text-sm text-green-600 mt-1&quot;&gt;&#13;&#10;                        Imagem selecionada: {formData.imagem.name}&#13;&#10;                      &lt;/p&gt;&#13;&#10;                    )}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className=&quot;flex gap-2 pt-4&quot;&gt;&#13;&#10;                    &lt;Button&#13;&#10;                      type=&quot;button&quot;&#13;&#10;                      variant=&quot;outline&quot;&#13;&#10;                      onClick={() =&gt; setIsModalOpen(false)}&#13;&#10;                      className=&quot;flex-1&quot;&#13;&#10;                    &gt;&#13;&#10;                      Cancelar&#13;&#10;                    &lt;/Button&gt;&#13;&#10;                    &lt;Button&#13;&#10;                      type=&quot;submit&quot;&#13;&#10;                      disabled={loading}&#13;&#10;                      className=&quot;flex-1&quot;&#13;&#10;                    &gt;&#13;&#10;                      {loading ? &quot;Cadastrando...&quot; : &quot;Cadastrar&quot;}&#13;&#10;                    &lt;/Button&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/form&gt;&#13;&#10;              &lt;/DialogContent&gt;&#13;&#10;            &lt;/Dialog&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/CardHeader&gt;&#13;&#10;        &lt;CardContent&gt;&#13;&#10;          {drivers.length === 0 ? (&#13;&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#13;&#10;              &lt;IdentificationCardIcon className=&quot;h-16 w-16 text-gray-300 mx-auto mb-4&quot; /&gt;&#13;&#10;              &lt;p className=&quot;text-gray-500 mb-4&quot;&gt;Nenhum motorista cadastrado&lt;/p&gt;&#13;&#10;              &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#13;&#10;                Clique em &quot;Novo Motorista&quot; para começar&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          ) : (&#13;&#10;            &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4&quot;&gt;&#13;&#10;              {drivers.map((driver) =&gt; (&#13;&#10;                &lt;Card key={driver.id} className=&quot;border border-gray-200&quot;&gt;&#13;&#10;                  &lt;CardContent className=&quot;p-4&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex flex-col items-center text-center space-y-3&quot;&gt;&#13;&#10;                      &lt;div className=&quot;w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center&quot;&gt;&#13;&#10;                        {driver.imagem_path ? (&#13;&#10;                          &lt;img&#13;&#10;                            src={driver.imagem_path}&#13;&#10;                            alt={driver.nome}&#13;&#10;                            className=&quot;w-16 h-16 rounded-full object-cover&quot;&#13;&#10;                          /&gt;&#13;&#10;                        ) : (&#13;&#10;                          &lt;IdentificationCardIcon className=&quot;h-8 w-8 text-gray-400&quot; /&gt;&#13;&#10;                        )}&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;h3 className=&quot;font-semibold text-lg&quot;&gt;{driver.nome}&lt;/h3&gt;&#13;&#10;                        &lt;p className=&quot;text-sm text-gray-500&quot;&gt;CPF: {driver.cpf}&lt;/p&gt;&#13;&#10;                        &lt;p className=&quot;text-sm text-gray-500&quot;&gt;CNH: {driver.cnh}&lt;/p&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/CardContent&gt;&#13;&#10;                &lt;/Card&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;        &lt;/CardContent&gt;&#13;&#10;      &lt;/Card&gt;&#13;&#10;    &lt;/main&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/fleet/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/fleet/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { TruckIcon, PlusIcon, PencilSimpleLineIcon } from &quot;@phosphor-icons/react&quot;;&#10;import { FAB } from &quot;@/components/ui/fab&quot;;&#10;import { AddTruckModal } from &quot;@/components/fleet/add-truck-modal&quot;;&#10;import { EditTruckModal } from &quot;@/components/fleet/edit-truck-modal&quot;;&#10;import { useState } from &quot;react&quot;;&#10;&#10;interface Truck {&#10;  id: number;&#10;  plate: string;&#10;  model: string;&#10;  company: string;&#10;  capacity: string;&#10;  status: &quot;Ativo&quot; | &quot;Manutenção&quot; | &quot;Inativo&quot;;&#10;  observations: string;&#10;}&#10;&#10;export default function FleetPage() {&#10;  const [addModalOpen, setAddModalOpen] = useState(false);&#10;  const [editModalOpen, setEditModalOpen] = useState(false);&#10;  const [selectedTruck, setSelectedTruck] = useState&lt;Truck | null&gt;(null);&#10;  const [trucks, setTrucks] = useState&lt;Truck[]&gt;([&#10;    {&#10;      id: 1,&#10;      plate: &quot;ABC-1234&quot;,&#10;      model: &quot;Mercedes-Benz Axor 2644&quot;,&#10;      company: &quot;Agro Brasil Ltda&quot;,&#10;      capacity: &quot;30.000 kg&quot;,&#10;      status: &quot;Ativo&quot;,&#10;      observations: &quot;Caminhão em perfeitas condições&quot;,&#10;    },&#10;    {&#10;      id: 2,&#10;      plate: &quot;DEF-5678&quot;,&#10;      model: &quot;Volvo FH 540&quot;,&#10;      company: &quot;Transportes Campo&quot;,&#10;      capacity: &quot;45.000 kg&quot;,&#10;      status: &quot;Manutenção&quot;,&#10;      observations: &quot;Em manutenção preventiva&quot;,&#10;    },&#10;  ]);&#10;&#10;  const handleNewTruck = () =&gt; {&#10;    setAddModalOpen(true);&#10;  };&#10;&#10;  const handleEditTruck = (truck: Truck) =&gt; {&#10;    setSelectedTruck(truck);&#10;    setEditModalOpen(true);&#10;  };&#10;&#10;  const handleSaveTruck = (newTruck: Omit&lt;Truck, &quot;id&quot;&gt;) =&gt; {&#10;    const truck: Truck = {&#10;      ...newTruck,&#10;      id: Math.max(...trucks.map((t) =&gt; t.id)) + 1,&#10;    };&#10;    setTrucks((prev) =&gt; [...prev, truck]);&#10;  };&#10;&#10;  const handleUpdateTruck = (updatedTruck: Truck) =&gt; {&#10;    setTrucks((prev) =&gt;&#10;      prev.map((truck) =&gt;&#10;        truck.id === updatedTruck.id ? updatedTruck : truck&#10;      )&#10;    );&#10;  };&#10;&#10;  const handleDeleteTruck = (truckId: number) =&gt; {&#10;    setTrucks((prev) =&gt; prev.filter((truck) =&gt; truck.id !== truckId));&#10;  };&#10;&#10;  return (&#10;    &lt;main&gt;&#10;      &lt;div&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#10;            Caminhões&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;Gerencie a frota de caminhões&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3&quot;&gt;&#10;        {trucks.map((truck) =&gt; (&#10;          &lt;Card key={truck.id} className=&quot;relative&quot;&gt;&#10;            &lt;CardHeader className=&quot;pb-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                  &lt;div className=&quot;h-12 w-12 rounded-2xl bg-primary-100 flex items-center justify-center&quot;&gt;&#10;                    &lt;TruckIcon className=&quot;h-6 w-6 text-primary-600&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-lg font-bold&quot;&gt;&#10;                      {truck.plate}&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-400&quot;&gt;{truck.model}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;Badge&#10;                  className={&#10;                    truck.status === &quot;Ativo&quot;&#10;                      ? &quot;bg-green-100 text-green-700 border-green-200&quot;&#10;                      : truck.status === &quot;Manutenção&quot;&#10;                        ? &quot;bg-yellow-100 text-yellow-700 border-yellow-200&quot;&#10;                        : &quot;bg-red-100 text-red-700 border-red-200&quot;&#10;                  }&#10;                &gt;&#10;                  {truck.status}&#10;                &lt;/Badge&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;flex flex-col&quot;&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-sm font-semibold text-primary-600&quot;&gt;Empresa&lt;/p&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;{truck.company}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-sm font-semibold text-primary-600&quot;&gt;&#10;                    Capacidade&#10;                  &lt;/p&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;{truck.capacity}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-sm font-semibold text-primary-600&quot;&gt;&#10;                    Observações&#10;                  &lt;/p&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;{truck.observations}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;Button&#10;                variant=&quot;secondary&quot;&#10;                size=&quot;sm&quot;&#10;                className=&quot;ml-auto mt-6&quot;&#10;                onClick={() =&gt; handleEditTruck(truck)}&#10;              &gt;&#10;                &lt;PencilSimpleLineIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                Editar&#10;              &lt;/Button&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;FAB icon={PlusIcon} label=&quot;Novo Caminhão&quot; onClick={handleNewTruck} /&gt;&#10;&#10;      &lt;AddTruckModal&#10;        open={addModalOpen}&#10;        onOpenChange={setAddModalOpen}&#10;        onSave={handleSaveTruck}&#10;      /&gt;&#10;&#10;      &lt;EditTruckModal&#10;        open={editModalOpen}&#10;        onOpenChange={setEditModalOpen}&#10;        truck={selectedTruck}&#10;        onSave={handleUpdateTruck}&#10;        onDelete={handleDeleteTruck}&#10;      /&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;import { useState } from &quot;react&quot;;&#13;&#10;import {&#13;&#10;  Card,&#13;&#10;  CardContent,&#13;&#10;  CardHeader,&#13;&#10;  CardTitle,&#13;&#10;} from &quot;@/components/ui/card&quot;;&#13;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#13;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#13;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#13;&#10;import {&#13;&#10;  Dialog,&#13;&#10;  DialogContent,&#13;&#10;  DialogHeader,&#13;&#10;  DialogTitle,&#13;&#10;  DialogTrigger,&#13;&#10;} from &quot;@/components/ui/dialog&quot;;&#13;&#10;import { Tabs, TabsContent, TabsList, TabsTrigger } from &quot;@/components/ui/tabs&quot;;&#13;&#10;import { PlusIcon, TruckIcon, CameraIcon } from &quot;@phosphor-icons/react&quot;;&#13;&#10;import { apiClient } from &quot;@/lib/api&quot;;&#13;&#10;&#13;&#10;interface Truck {&#13;&#10;  id_caminhao: number;&#13;&#10;  placa: string;&#13;&#10;  modelo: string;&#13;&#10;  empresa: string;&#13;&#10;}&#13;&#10;&#13;&#10;export default function FleetPage() {&#13;&#10;  const [trucks, setTrucks] = useState&lt;Truck[]&gt;([]);&#13;&#10;  const [loading, setLoading] = useState(false);&#13;&#10;  const [isModalOpen, setIsModalOpen] = useState(false);&#13;&#10;  const [formData, setFormData] = useState({&#13;&#10;    placa: &quot;&quot;,&#13;&#10;    modelo: &quot;&quot;,&#13;&#10;    empresa: &quot;&quot;,&#13;&#10;    imagem: null as File | null,&#13;&#10;  });&#13;&#10;&#13;&#10;  const handleImageChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#13;&#10;    if (e.target.files &amp;&amp; e.target.files[0]) {&#13;&#10;      setFormData((prev) =&gt; ({ ...prev, imagem: e.target.files![0] }));&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleManualSubmit = async (e: React.FormEvent) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    if (!formData.placa || !formData.modelo || !formData.empresa) return;&#13;&#10;&#13;&#10;    setLoading(true);&#13;&#10;    const response = await apiClient.cadastrarCaminhaoManual({&#13;&#10;      placa: formData.placa,&#13;&#10;      modelo: formData.modelo,&#13;&#10;      empresa: formData.empresa,&#13;&#10;    });&#13;&#10;&#13;&#10;    if (response.data) {&#13;&#10;      setTrucks((prev) =&gt; [&#13;&#10;        ...prev,&#13;&#10;        {&#13;&#10;          id_caminhao: response.data.id_caminhao,&#13;&#10;          placa: formData.placa,&#13;&#10;          modelo: formData.modelo,&#13;&#10;          empresa: formData.empresa,&#13;&#10;        },&#13;&#10;      ]);&#13;&#10;      setFormData({ placa: &quot;&quot;, modelo: &quot;&quot;, empresa: &quot;&quot;, imagem: null });&#13;&#10;      setIsModalOpen(false);&#13;&#10;    }&#13;&#10;    setLoading(false);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleImageSubmit = async (e: React.FormEvent) =&gt; {&#13;&#10;    e.preventDefault();&#13;&#10;    if (!formData.modelo || !formData.empresa || !formData.imagem) return;&#13;&#10;&#13;&#10;    setLoading(true);&#13;&#10;    const form = new FormData();&#13;&#10;    form.append(&quot;modelo&quot;, formData.modelo);&#13;&#10;    form.append(&quot;empresa&quot;, formData.empresa);&#13;&#10;    form.append(&quot;imagem&quot;, formData.imagem);&#13;&#10;&#13;&#10;    const response = await apiClient.cadastrarCaminhaoPorImagem(form);&#13;&#10;&#13;&#10;    if (response.data) {&#13;&#10;      setTrucks((prev) =&gt; [&#13;&#10;        ...prev,&#13;&#10;        {&#13;&#10;          id_caminhao: response.data.id_caminhao,&#13;&#10;          placa: response.data.placa,&#13;&#10;          modelo: formData.modelo,&#13;&#10;          empresa: formData.empresa,&#13;&#10;        },&#13;&#10;      ]);&#13;&#10;      setFormData({ placa: &quot;&quot;, modelo: &quot;&quot;, empresa: &quot;&quot;, imagem: null });&#13;&#10;      setIsModalOpen(false);&#13;&#10;    }&#13;&#10;    setLoading(false);&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#13;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-white&quot;&gt;&#13;&#10;          Gerenciamento da Frota&#13;&#10;        &lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;Cadastre e gerencie os veículos da frota&lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;Card className=&quot;w-full max-w-none&quot;&gt;&#13;&#10;        &lt;CardHeader&gt;&#13;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4&quot;&gt;&#13;&#10;            &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#13;&#10;              &lt;TruckIcon className=&quot;h-5 w-5&quot; /&gt;&#13;&#10;              Veículos Cadastrados&#13;&#10;            &lt;/CardTitle&gt;&#13;&#10;&#13;&#10;            &lt;Dialog open={isModalOpen} onOpenChange={setIsModalOpen}&gt;&#13;&#10;              &lt;DialogTrigger asChild&gt;&#13;&#10;                &lt;Button className=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                  &lt;PlusIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;                  Novo Veículo&#13;&#10;                &lt;/Button&gt;&#13;&#10;              &lt;/DialogTrigger&gt;&#13;&#10;              &lt;DialogContent className=&quot;sm:max-w-md&quot;&gt;&#13;&#10;                &lt;DialogHeader&gt;&#13;&#10;                  &lt;DialogTitle&gt;Cadastrar Novo Veículo&lt;/DialogTitle&gt;&#13;&#10;                &lt;/DialogHeader&gt;&#13;&#10;&#13;&#10;                &lt;Tabs defaultValue=&quot;manual&quot; className=&quot;w-full&quot;&gt;&#13;&#10;                  &lt;TabsList className=&quot;grid w-full grid-cols-2&quot;&gt;&#13;&#10;                    &lt;TabsTrigger value=&quot;manual&quot;&gt;Manual&lt;/TabsTrigger&gt;&#13;&#10;                    &lt;TabsTrigger value=&quot;image&quot;&gt;Por Imagem&lt;/TabsTrigger&gt;&#13;&#10;                  &lt;/TabsList&gt;&#13;&#10;&#13;&#10;                  &lt;TabsContent value=&quot;manual&quot; className=&quot;mt-4&quot;&gt;&#13;&#10;                    &lt;form onSubmit={handleManualSubmit} className=&quot;space-y-4&quot;&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;Label htmlFor=&quot;placa-manual&quot;&gt;Placa&lt;/Label&gt;&#13;&#10;                        &lt;Input&#13;&#10;                          id=&quot;placa-manual&quot;&#13;&#10;                          placeholder=&quot;ABC-1234&quot;&#13;&#10;                          value={formData.placa}&#13;&#10;                          onChange={(e) =&gt;&#13;&#10;                            setFormData((prev) =&gt; ({&#13;&#10;                              ...prev,&#13;&#10;                              placa: e.target.value.toUpperCase(),&#13;&#10;                            }))&#13;&#10;                          }&#13;&#10;                          required&#13;&#10;                        /&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;Label htmlFor=&quot;modelo-manual&quot;&gt;Modelo&lt;/Label&gt;&#13;&#10;                        &lt;Input&#13;&#10;                          id=&quot;modelo-manual&quot;&#13;&#10;                          placeholder=&quot;Modelo do veículo&quot;&#13;&#10;                          value={formData.modelo}&#13;&#10;                          onChange={(e) =&gt;&#13;&#10;                            setFormData((prev) =&gt; ({ ...prev, modelo: e.target.value }))&#13;&#10;                          }&#13;&#10;                          required&#13;&#10;                        /&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;Label htmlFor=&quot;empresa-manual&quot;&gt;Empresa&lt;/Label&gt;&#13;&#10;                        &lt;Input&#13;&#10;                          id=&quot;empresa-manual&quot;&#13;&#10;                          placeholder=&quot;Nome da empresa&quot;&#13;&#10;                          value={formData.empresa}&#13;&#10;                          onChange={(e) =&gt;&#13;&#10;                            setFormData((prev) =&gt; ({ ...prev, empresa: e.target.value }))&#13;&#10;                          }&#13;&#10;                          required&#13;&#10;                        /&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;flex gap-2 pt-4&quot;&gt;&#13;&#10;                        &lt;Button&#13;&#10;                          type=&quot;button&quot;&#13;&#10;                          variant=&quot;outline&quot;&#13;&#10;                          onClick={() =&gt; setIsModalOpen(false)}&#13;&#10;                          className=&quot;flex-1&quot;&#13;&#10;                        &gt;&#13;&#10;                          Cancelar&#13;&#10;                        &lt;/Button&gt;&#13;&#10;                        &lt;Button type=&quot;submit&quot; disabled={loading} className=&quot;flex-1&quot;&gt;&#13;&#10;                          {loading ? &quot;Cadastrando...&quot; : &quot;Cadastrar&quot;}&#13;&#10;                        &lt;/Button&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/form&gt;&#13;&#10;                  &lt;/TabsContent&gt;&#13;&#10;&#13;&#10;                  &lt;TabsContent value=&quot;image&quot; className=&quot;mt-4&quot;&gt;&#13;&#10;                    &lt;form onSubmit={handleImageSubmit} className=&quot;space-y-4&quot;&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;Label htmlFor=&quot;modelo-image&quot;&gt;Modelo&lt;/Label&gt;&#13;&#10;                        &lt;Input&#13;&#10;                          id=&quot;modelo-image&quot;&#13;&#10;                          placeholder=&quot;Modelo do veículo&quot;&#13;&#10;                          value={formData.modelo}&#13;&#10;                          onChange={(e) =&gt;&#13;&#10;                            setFormData((prev) =&gt; ({ ...prev, modelo: e.target.value }))&#13;&#10;                          }&#13;&#10;                          required&#13;&#10;                        /&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;Label htmlFor=&quot;empresa-image&quot;&gt;Empresa&lt;/Label&gt;&#13;&#10;                        &lt;Input&#13;&#10;                          id=&quot;empresa-image&quot;&#13;&#10;                          placeholder=&quot;Nome da empresa&quot;&#13;&#10;                          value={formData.empresa}&#13;&#10;                          onChange={(e) =&gt;&#13;&#10;                            setFormData((prev) =&gt; ({ ...prev, empresa: e.target.value }))&#13;&#10;                          }&#13;&#10;                          required&#13;&#10;                        /&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;Label htmlFor=&quot;imagem-placa&quot;&gt;Foto da Placa&lt;/Label&gt;&#13;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#13;&#10;                          &lt;Input&#13;&#10;                            id=&quot;imagem-placa&quot;&#13;&#10;                            type=&quot;file&quot;&#13;&#10;                            accept=&quot;image/*&quot;&#13;&#10;                            onChange={handleImageChange}&#13;&#10;                            required&#13;&#10;                            className=&quot;flex-1&quot;&#13;&#10;                          /&gt;&#13;&#10;                          &lt;CameraIcon className=&quot;h-5 w-5 text-gray-400&quot; /&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        {formData.imagem &amp;&amp; (&#13;&#10;                          &lt;p className=&quot;text-sm text-green-600 mt-1&quot;&gt;&#13;&#10;                            Imagem selecionada: {formData.imagem.name}&#13;&#10;                          &lt;/p&gt;&#13;&#10;                        )}&#13;&#10;                        &lt;p className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#13;&#10;                          A placa será reconhecida automaticamente&#13;&#10;                        &lt;/p&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div className=&quot;flex gap-2 pt-4&quot;&gt;&#13;&#10;                        &lt;Button&#13;&#10;                          type=&quot;button&quot;&#13;&#10;                          variant=&quot;outline&quot;&#13;&#10;                          onClick={() =&gt; setIsModalOpen(false)}&#13;&#10;                          className=&quot;flex-1&quot;&#13;&#10;                        &gt;&#13;&#10;                          Cancelar&#13;&#10;                        &lt;/Button&gt;&#13;&#10;                        &lt;Button type=&quot;submit&quot; disabled={loading} className=&quot;flex-1&quot;&gt;&#13;&#10;                          {loading ? &quot;Processando...&quot; : &quot;Cadastrar&quot;}&#13;&#10;                        &lt;/Button&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/form&gt;&#13;&#10;                  &lt;/TabsContent&gt;&#13;&#10;                &lt;/Tabs&gt;&#13;&#10;              &lt;/DialogContent&gt;&#13;&#10;            &lt;/Dialog&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/CardHeader&gt;&#13;&#10;        &lt;CardContent&gt;&#13;&#10;          {trucks.length === 0 ? (&#13;&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#13;&#10;              &lt;TruckIcon className=&quot;h-16 w-16 text-gray-300 mx-auto mb-4&quot; /&gt;&#13;&#10;              &lt;p className=&quot;text-gray-500 mb-4&quot;&gt;Nenhum veículo cadastrado&lt;/p&gt;&#13;&#10;              &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#13;&#10;                Clique em &quot;Novo Veículo&quot; para começar&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          ) : (&#13;&#10;            &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4&quot;&gt;&#13;&#10;              {trucks.map((truck) =&gt; (&#13;&#10;                &lt;Card key={truck.id_caminhao} className=&quot;border border-gray-200&quot;&gt;&#13;&#10;                  &lt;CardContent className=&quot;p-4&quot;&gt;&#13;&#10;                    &lt;div className=&quot;flex flex-col items-center text-center space-y-3&quot;&gt;&#13;&#10;                      &lt;div className=&quot;w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center&quot;&gt;&#13;&#10;                        &lt;TruckIcon className=&quot;h-8 w-8 text-blue-600&quot; /&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                      &lt;div&gt;&#13;&#10;                        &lt;h3 className=&quot;font-bold text-xl text-blue-600&quot;&gt;&#13;&#10;                          {truck.placa}&#13;&#10;                        &lt;/h3&gt;&#13;&#10;                        &lt;p className=&quot;font-medium text-gray-900&quot;&gt;&#13;&#10;                          {truck.modelo}&#13;&#10;                        &lt;/p&gt;&#13;&#10;                        &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#13;&#10;                          {truck.empresa}&#13;&#10;                        &lt;/p&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/CardContent&gt;&#13;&#10;                &lt;/Card&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;        &lt;/CardContent&gt;&#13;&#10;      &lt;/Card&gt;&#13;&#10;    &lt;/main&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/history/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/history/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import {&#10;  Select,&#10;  SelectContent,&#10;  SelectItem,&#10;  SelectTrigger,&#10;  SelectValue,&#10;} from &quot;@/components/ui/select&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { ClockIcon, DownloadIcon } from &quot;@phosphor-icons/react&quot;;&#10;import { apiClient } from &quot;@/lib/api&quot;;&#10;&#10;interface HistoricoItem {&#10;  id: number;&#10;  placa: string;&#10;  motorista: string;&#10;  peso_entrada: number;&#10;  peso_saida?: number;&#10;  data_entrada: string;&#10;  data_saida?: string;&#10;  status: string;&#10;}&#10;&#10;export default function HistoryPage() {&#10;  const [historico, setHistorico] = useState&lt;HistoricoItem[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [filtros, setFiltros] = useState({&#10;    placa: &quot;&quot;,&#10;    motorista: &quot;&quot;,&#10;    dataInicio: &quot;&quot;,&#10;    dataFim: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    loadHistorico();&#10;  }, []);&#10;&#10;  const loadHistorico = async () =&gt; {&#10;    setLoading(true);&#10;    const response = await apiClient.getHistorico();&#10;    if (response.data) {&#10;      setHistorico(response.data);&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const historicoFiltrado = historico.filter((item) =&gt; {&#10;    return (&#10;      (!filtros.placa ||&#10;        item.placa.toLowerCase().includes(filtros.placa.toLowerCase())) &amp;&amp;&#10;      (!filtros.motorista ||&#10;        item.motorista.toLowerCase().includes(filtros.motorista.toLowerCase())) &amp;&amp;&#10;      (!filtros.status || item.status === filtros.status)&#10;    );&#10;  });&#10;&#10;  const exportarDados = () =&gt; {&#10;    const csvContent = [&#10;      &quot;Placa,Motorista,Peso Entrada,Peso Saída,Data Entrada,Data Saída,Status&quot;,&#10;      ...historicoFiltrado.map((item) =&gt;&#10;        `${item.placa},${item.motorista},${item.peso_entrada},${&#10;          item.peso_saida || &quot;&quot;&#10;        },${item.data_entrada},${item.data_saida || &quot;&quot;},${item.status}`&#10;      ),&#10;    ].join(&quot;\n&quot;);&#10;&#10;    const blob = new Blob([csvContent], { type: &quot;text/csv&quot; });&#10;    const url = window.URL.createObjectURL(blob);&#10;    const a = document.createElement(&quot;a&quot;);&#10;    a.href = url;&#10;    a.download = &quot;historico-pesagem.csv&quot;;&#10;    a.click();&#10;    window.URL.revokeObjectURL(url);&#10;  };&#10;&#10;  return (&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-white&quot;&gt;&#10;          Histórico de Pesagem&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;&#10;          Consulte e exporte o histórico completo das operações de pesagem&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Card className=&quot;w-full max-w-none&quot;&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4&quot;&gt;&#10;            &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;              &lt;ClockIcon className=&quot;h-5 w-5&quot; /&gt;&#10;              Registros de Pesagem&#10;            &lt;/CardTitle&gt;&#10;            &lt;Button&#10;              onClick={exportarDados}&#10;              className=&quot;flex items-center gap-2&quot;&#10;            &gt;&#10;              &lt;DownloadIcon className=&quot;h-4 w-4&quot; /&gt;&#10;              Exportar CSV&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 p-4 bg-gray-50 rounded-lg&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;placa-filter&quot;&gt;Placa&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;placa-filter&quot;&#10;                placeholder=&quot;Filtrar por placa&quot;&#10;                value={filtros.placa}&#10;                onChange={(e) =&gt;&#10;                  setFiltros((prev) =&gt; ({ ...prev, placa: e.target.value }))&#10;                }&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;motorista-filter&quot;&gt;Motorista&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;motorista-filter&quot;&#10;                placeholder=&quot;Filtrar por motorista&quot;&#10;                value={filtros.motorista}&#10;                onChange={(e) =&gt;&#10;                  setFiltros((prev) =&gt; ({ ...prev, motorista: e.target.value }))&#10;                }&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;status-filter&quot;&gt;Status&lt;/Label&gt;&#10;              &lt;Select&#10;                value={filtros.status}&#10;                onValueChange={(value) =&gt;&#10;                  setFiltros((prev) =&gt; ({ ...prev, status: value }))&#10;                }&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue placeholder=&quot;Todos&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;&quot;&gt;Todos&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;aberto&quot;&gt;Em Andamento&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;concluido&quot;&gt;Concluído&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-end&quot;&gt;&#10;              &lt;Button&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt;&#10;                  setFiltros({&#10;                    placa: &quot;&quot;,&#10;                    motorista: &quot;&quot;,&#10;                    dataInicio: &quot;&quot;,&#10;                    dataFim: &quot;&quot;,&#10;                    status: &quot;&quot;,&#10;                  })&#10;                }&#10;                className=&quot;w-full&quot;&#10;              &gt;&#10;                Limpar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {loading ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Carregando histórico...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : historicoFiltrado.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;ClockIcon className=&quot;h-16 w-16 text-gray-300 mx-auto mb-4&quot; /&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Nenhum registro encontrado&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;w-full border-collapse&quot;&gt;&#10;                &lt;thead&gt;&#10;                  &lt;tr className=&quot;border-b&quot;&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Placa&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Motorista&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Peso Entrada&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Peso Saída&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Data Entrada&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Data Saída&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Status&lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody&gt;&#10;                  {historicoFiltrado.map((item) =&gt; (&#10;                    &lt;tr key={item.id} className=&quot;border-b hover:bg-gray-50&quot;&gt;&#10;                      &lt;td className=&quot;p-4 font-medium&quot;&gt;{item.placa}&lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;{item.motorista}&lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;{item.peso_entrada} kg&lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;&#10;                        {item.peso_saida ? `${item.peso_saida} kg` : &quot;-&quot;}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;&#10;                        {new Date(item.data_entrada).toLocaleString(&quot;pt-BR&quot;)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;&#10;                        {item.data_saida&#10;                          ? new Date(item.data_saida).toLocaleString(&quot;pt-BR&quot;)&#10;                          : &quot;-&quot;}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;&#10;                        &lt;Badge&#10;                          variant=&quot;secondary&quot;&#10;                          className={&#10;                            item.status === &quot;concluido&quot;&#10;                              ? &quot;bg-green-100 text-green-700&quot;&#10;                              : &quot;bg-amber-100 text-amber-700&quot;&#10;                          }&#10;                        &gt;&#10;                          {item.status === &quot;concluido&quot;&#10;                            ? &quot;Concluído&quot;&#10;                            : &quot;Em Andamento&quot;}&#10;                        &lt;/Badge&gt;&#10;                      &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect } from &quot;react&quot;;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import {&#10;  Select,&#10;  SelectContent,&#10;  SelectItem,&#10;  SelectTrigger,&#10;  SelectValue,&#10;} from &quot;@/components/ui/select&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { ClockIcon, DownloadIcon } from &quot;@phosphor-icons/react&quot;;&#10;import { apiClient } from &quot;@/lib/api&quot;;&#10;&#10;interface HistoricoItem {&#10;  id: number;&#10;  placa: string;&#10;  motorista: string;&#10;  peso_entrada: number;&#10;  peso_saida?: number;&#10;  data_entrada: string;&#10;  data_saida?: string;&#10;  status: string;&#10;}&#10;&#10;export default function HistoryPage() {&#10;  const [historico, setHistorico] = useState&lt;HistoricoItem[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [filtros, setFiltros] = useState({&#10;    placa: &quot;&quot;,&#10;    motorista: &quot;&quot;,&#10;    dataInicio: &quot;&quot;,&#10;    dataFim: &quot;&quot;,&#10;    status: &quot;&quot;,&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    loadHistorico();&#10;  }, []);&#10;&#10;  const loadHistorico = async () =&gt; {&#10;    setLoading(true);&#10;    const response = await apiClient.getHistorico();&#10;    if (response.data) {&#10;      setHistorico(response.data);&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const historicoFiltrado = historico.filter((item) =&gt; {&#10;    return (&#10;      (!filtros.placa ||&#10;        item.placa.toLowerCase().includes(filtros.placa.toLowerCase())) &amp;&amp;&#10;      (!filtros.motorista ||&#10;        item.motorista.toLowerCase().includes(filtros.motorista.toLowerCase())) &amp;&amp;&#10;      (!filtros.status || item.status === filtros.status)&#10;    );&#10;  });&#10;&#10;  const exportarDados = () =&gt; {&#10;    const csvContent = [&#10;      &quot;Placa,Motorista,Peso Entrada,Peso Saída,Data Entrada,Data Saída,Status&quot;,&#10;      ...historicoFiltrado.map((item) =&gt;&#10;        `${item.placa},${item.motorista},${item.peso_entrada},${&#10;          item.peso_saida || &quot;&quot;&#10;        },${item.data_entrada},${item.data_saida || &quot;&quot;},${item.status}`&#10;      ),&#10;    ].join(&quot;\n&quot;);&#10;&#10;    const blob = new Blob([csvContent], { type: &quot;text/csv&quot; });&#10;    const url = window.URL.createObjectURL(blob);&#10;    const a = document.createElement(&quot;a&quot;);&#10;    a.href = url;&#10;    a.download = &quot;historico-pesagem.csv&quot;;&#10;    a.click();&#10;    window.URL.revokeObjectURL(url);&#10;  };&#10;&#10;  return (&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-white&quot;&gt;&#10;          Histórico de Pesagem&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;&#10;          Consulte e exporte o histórico completo das operações de pesagem&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Card className=&quot;w-full max-w-none&quot;&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4&quot;&gt;&#10;            &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;              &lt;ClockIcon className=&quot;h-5 w-5&quot; /&gt;&#10;              Registros de Pesagem&#10;            &lt;/CardTitle&gt;&#10;            &lt;Button&#10;              onClick={exportarDados}&#10;              className=&quot;flex items-center gap-2&quot;&#10;            &gt;&#10;              &lt;DownloadIcon className=&quot;h-4 w-4&quot; /&gt;&#10;              Exportar CSV&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 p-4 bg-gray-50 rounded-lg&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;placa-filter&quot;&gt;Placa&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;placa-filter&quot;&#10;                placeholder=&quot;Filtrar por placa&quot;&#10;                value={filtros.placa}&#10;                onChange={(e) =&gt;&#10;                  setFiltros((prev) =&gt; ({ ...prev, placa: e.target.value }))&#10;                }&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;motorista-filter&quot;&gt;Motorista&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;motorista-filter&quot;&#10;                placeholder=&quot;Filtrar por motorista&quot;&#10;                value={filtros.motorista}&#10;                onChange={(e) =&gt;&#10;                  setFiltros((prev) =&gt; ({ ...prev, motorista: e.target.value }))&#10;                }&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;Label htmlFor=&quot;status-filter&quot;&gt;Status&lt;/Label&gt;&#10;              &lt;Select&#10;                value={filtros.status}&#10;                onValueChange={(value) =&gt;&#10;                  setFiltros((prev) =&gt; ({ ...prev, status: value === &quot;todos&quot; ? &quot;&quot; : value }))&#10;                }&#10;              &gt;&#10;                &lt;SelectTrigger&gt;&#10;                  &lt;SelectValue placeholder=&quot;Todos&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;todos&quot;&gt;Todos&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;aberto&quot;&gt;Em Andamento&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;concluido&quot;&gt;Concluído&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-end&quot;&gt;&#10;              &lt;Button&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt;&#10;                  setFiltros({&#10;                    placa: &quot;&quot;,&#10;                    motorista: &quot;&quot;,&#10;                    dataInicio: &quot;&quot;,&#10;                    dataFim: &quot;&quot;,&#10;                    status: &quot;&quot;,&#10;                  })&#10;                }&#10;                className=&quot;w-full&quot;&#10;              &gt;&#10;                Limpar Filtros&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {loading ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Carregando histórico...&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : historicoFiltrado.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;ClockIcon className=&quot;h-16 w-16 text-gray-300 mx-auto mb-4&quot; /&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Nenhum registro encontrado&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;              &lt;table className=&quot;w-full border-collapse&quot;&gt;&#10;                &lt;thead&gt;&#10;                  &lt;tr className=&quot;border-b&quot;&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Placa&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Motorista&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Peso Entrada&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Peso Saída&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Data Entrada&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Data Saída&lt;/th&gt;&#10;                    &lt;th className=&quot;text-left p-4 font-semibold&quot;&gt;Status&lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody&gt;&#10;                  {historicoFiltrado.map((item) =&gt; (&#10;                    &lt;tr key={item.id} className=&quot;border-b hover:bg-gray-50&quot;&gt;&#10;                      &lt;td className=&quot;p-4 font-medium&quot;&gt;{item.placa}&lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;{item.motorista}&lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;{item.peso_entrada} kg&lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;&#10;                        {item.peso_saida ? `${item.peso_saida} kg` : &quot;-&quot;}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;&#10;                        {new Date(item.data_entrada).toLocaleString(&quot;pt-BR&quot;)}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;&#10;                        {item.data_saida&#10;                          ? new Date(item.data_saida).toLocaleString(&quot;pt-BR&quot;)&#10;                          : &quot;-&quot;}&#10;                      &lt;/td&gt;&#10;                      &lt;td className=&quot;p-4&quot;&gt;&#10;                        &lt;Badge&#10;                          variant=&quot;secondary&quot;&#10;                          className={&#10;                            item.status === &quot;concluido&quot;&#10;                              ? &quot;bg-green-100 text-green-700&quot;&#10;                              : &quot;bg-amber-100 text-amber-700&quot;&#10;                          }&#10;                        &gt;&#10;                          {item.status === &quot;concluido&quot;&#10;                            ? &quot;Concluído&quot;&#10;                            : &quot;Em Andamento&quot;}&#10;                        &lt;/Badge&gt;&#10;                      &lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))}&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/layout.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import &quot;./globals.css&quot;;&#10;import {Outfit as Font} from &quot;next/font/google&quot;;&#10;import { ThemeProvider } from &quot;next-themes&quot;;&#10;import {Toaster} from &quot;@/components/ui/toaster&quot;;&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;import {Navbar} from &quot;@/components/layout/navbar&quot;;&#10;import {NavItem} from &quot;@/types/nav-item&quot;;&#10;import {&#10;  ClockIcon,&#10;  HandshakeIcon,&#10;  HouseIcon,&#10;  IdentificationCardIcon,&#10;  GearIcon,&#10;  TruckIcon,&#10;} from &quot;@phosphor-icons/react&quot;;&#10;import WeightIcon from &quot;@/components/icons/WeightIcon&quot;;&#10;import { IconContext } from &quot;@phosphor-icons/react&quot;;&#10;import ptBR from 'antd/locale/pt_BR';&#10;import {ConfigProvider} from &quot;antd&quot;;&#10;&#10;const font = Font({&#10;  weight: [&#10;    &quot;100&quot;,&#10;    &quot;200&quot;,&#10;    &quot;300&quot;,&#10;    &quot;400&quot;,&#10;    &quot;500&quot;,&#10;    &quot;600&quot;,&#10;    &quot;700&quot;,&#10;    &quot;800&quot;,&#10;    &quot;900&quot;&#10;  ],&#10;  variable: &quot;--font-sans&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;  display: &quot;swap&quot;,&#10;});&#10;&#10;const navigation: NavItem[] = [&#10;  {name: &quot;Tela Inicial&quot;, href: &quot;/&quot;, section: &quot;Operações&quot;, icon: HouseIcon},&#10;  {name: &quot;Pesagem Ativa&quot;, href: &quot;/weighing&quot;, section: &quot;Operações&quot;, icon: WeightIcon},&#10;  {name: &quot;Histórico&quot;, href: &quot;/history&quot;, section: &quot;Operações&quot;, icon: ClockIcon},&#10;  {name: &quot;Frota&quot;, href: &quot;/fleet&quot;, section: &quot;Operações&quot;, icon: TruckIcon},&#10;  {name: &quot;Motoristas&quot;, href: &quot;/drivers&quot;, section: &quot;Operações&quot;, icon: IdentificationCardIcon},&#10;  {name: &quot;Parceiros&quot;, href: &quot;/partners&quot;, section: &quot;Operações&quot;, icon: HandshakeIcon},&#10;  // {name: &quot;Configurações&quot;, href: &quot;/settings&quot;, section: &quot;Sistema&quot;, icon: GearIcon},&#10;];&#10;&#10;export default function RootLayout({children}: {&#10;  children: React.ReactNode;&#10;}) {&#10;&#10;  return (&#10;    &lt;html lang=&quot;en&quot; suppressHydrationWarning&gt;&#10;      &lt;head&gt;&#10;        &lt;meta name=&quot;mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot;/&gt;&#10;        &lt;meta name=&quot;mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;&#10;        &lt;link rel=&quot;icon&quot; href=&quot;/images/favicon.ico&quot;/&gt;&#10;        &lt;title&gt;Semensol Agro&lt;/title&gt;&#10;      &lt;/head&gt;&#10;      &lt;body&#10;        className={cn(&#10;          font.variable,&#10;          &quot;flex flex-col min-h-screen max-h-screen waves-background relative&quot;&#10;        )}&#10;      &gt;&#10;        &lt;ThemeProvider&#10;          attribute=&quot;class&quot;&#10;          defaultTheme=&quot;light&quot;&#10;          enableSystem={false}&#10;          disableTransitionOnChange&#10;        &gt;&#10;          &lt;ConfigProvider locale={ptBR}&gt;&#10;            &lt;IconContext.Provider&#10;              value={{&#10;                size: 32,&#10;                weight: &quot;bold&quot;,&#10;                mirrored: false,&#10;                &quot;aria-hidden&quot;: true,&#10;              }}&#10;            &gt;&#10;              {children}&#10;              &lt;Navbar navigation={navigation}/&gt;&#10;              &lt;Toaster/&gt;&#10;            &lt;/IconContext.Provider&gt;&#10;          &lt;/ConfigProvider&gt;&#10;        &lt;/ThemeProvider&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;import &quot;./globals.css&quot;;&#13;&#10;import {Outfit as Font} from &quot;next/font/google&quot;;&#13;&#10;import { ThemeProvider } from &quot;next-themes&quot;;&#13;&#10;import {Toaster} from &quot;@/components/ui/toaster&quot;;&#13;&#10;import {cn} from &quot;@/lib/utils&quot;;&#13;&#10;import {Navbar} from &quot;@/components/layout/navbar&quot;;&#13;&#10;import {NavItem} from &quot;@/types/nav-item&quot;;&#13;&#10;import {&#13;&#10;  ClockIcon,&#13;&#10;  HandshakeIcon,&#13;&#10;  HouseIcon,&#13;&#10;  IdentificationCardIcon,&#13;&#10;  GearIcon,&#13;&#10;  TruckIcon,&#13;&#10;} from &quot;@phosphor-icons/react&quot;;&#13;&#10;import WeightIcon from &quot;@/components/icons/WeightIcon&quot;;&#13;&#10;import { IconContext } from &quot;@phosphor-icons/react&quot;;&#13;&#10;import ptBR from 'antd/locale/pt_BR';&#13;&#10;import {ConfigProvider} from &quot;antd&quot;;&#13;&#10;&#13;&#10;const font = Font({&#13;&#10;  weight: [&#13;&#10;    &quot;100&quot;,&#13;&#10;    &quot;200&quot;,&#13;&#10;    &quot;300&quot;,&#13;&#10;    &quot;400&quot;,&#13;&#10;    &quot;500&quot;,&#13;&#10;    &quot;600&quot;,&#13;&#10;    &quot;700&quot;,&#13;&#10;    &quot;800&quot;,&#13;&#10;    &quot;900&quot;&#13;&#10;  ],&#13;&#10;  variable: &quot;--font-sans&quot;,&#13;&#10;  subsets: [&quot;latin&quot;],&#13;&#10;  display: &quot;swap&quot;,&#13;&#10;});&#13;&#10;&#13;&#10;const navigation: NavItem[] = [&#13;&#10;  {name: &quot;Tela Inicial&quot;, href: &quot;/&quot;, section: &quot;Operações&quot;, icon: HouseIcon},&#13;&#10;  {name: &quot;Pesagem Ativa&quot;, href: &quot;/weighing&quot;, section: &quot;Operações&quot;, icon: WeightIcon},&#13;&#10;  {name: &quot;Histórico&quot;, href: &quot;/history&quot;, section: &quot;Operações&quot;, icon: ClockIcon},&#13;&#10;  {name: &quot;Frota&quot;, href: &quot;/fleet&quot;, section: &quot;Operações&quot;, icon: TruckIcon},&#13;&#10;  {name: &quot;Motoristas&quot;, href: &quot;/drivers&quot;, section: &quot;Operações&quot;, icon: IdentificationCardIcon},&#13;&#10;];&#13;&#10;&#13;&#10;export default function RootLayout({children}: {&#13;&#10;  children: React.ReactNode;&#13;&#10;}) {&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;html lang=&quot;en&quot; suppressHydrationWarning&gt;&#13;&#10;      &lt;head&gt;&#13;&#10;        &lt;meta name=&quot;mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot;/&gt;&#13;&#10;        &lt;meta name=&quot;mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;&#13;&#10;        &lt;link rel=&quot;icon&quot; href=&quot;/images/favicon.ico&quot;/&gt;&#13;&#10;        &lt;title&gt;Semensol Agro&lt;/title&gt;&#13;&#10;      &lt;/head&gt;&#13;&#10;      &lt;body&#13;&#10;        className={cn(&#13;&#10;          font.variable,&#13;&#10;          &quot;flex flex-col min-h-screen max-h-screen waves-background relative&quot;&#13;&#10;        )}&#13;&#10;      &gt;&#13;&#10;        &lt;ThemeProvider&#13;&#10;          attribute=&quot;class&quot;&#13;&#10;          defaultTheme=&quot;light&quot;&#13;&#10;          enableSystem={false}&#13;&#10;          disableTransitionOnChange&#13;&#10;        &gt;&#13;&#10;          &lt;ConfigProvider locale={ptBR}&gt;&#13;&#10;            &lt;IconContext.Provider&#13;&#10;              value={{&#13;&#10;                size: 32,&#13;&#10;                weight: &quot;bold&quot;,&#13;&#10;                mirrored: false,&#13;&#10;                &quot;aria-hidden&quot;: true,&#13;&#10;              }}&#13;&#10;            &gt;&#13;&#10;              {children}&#13;&#10;              &lt;Navbar navigation={navigation}/&gt;&#13;&#10;              &lt;Toaster/&gt;&#13;&#10;            &lt;/IconContext.Provider&gt;&#13;&#10;          &lt;/ConfigProvider&gt;&#13;&#10;        &lt;/ThemeProvider&gt;&#13;&#10;      &lt;/body&gt;&#13;&#10;    &lt;/html&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import {Card, CardContent, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {Badge} from &quot;@/components/ui/badge&quot;;&#10;import {&#10;  ActivityIcon,&#10;  CheckCircleIcon,&#10;  ClockIcon,&#10;  HandshakeIcon,&#10;  IdentificationCardIcon,&#10;  TruckIcon,&#10;  LightningIcon,&#10;} from &quot;@phosphor-icons/react&quot;;&#10;import WeightIcon from &quot;@/components/icons/WeightIcon&quot;;&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;import Link from &quot;next/link&quot;;&#10;&#10;export default function Home() {&#10;&#10;  const quickActions = [&#10;    {&#10;      title: &quot;Iniciar Pesagem&quot;,&#10;      description: &quot;Iniciar novo ciclo de pesagem&quot;,&#10;      icon: WeightIcon,&#10;      color: &quot;green&quot;,&#10;      href: &quot;/weighing&quot;,&#10;    },&#10;    {&#10;      title: &quot;Gerenciar Frota&quot;,&#10;      description: &quot;Cadastrar e gerenciar veículos da frota&quot;,&#10;      icon: TruckIcon,&#10;      color: &quot;blue&quot;,&#10;      href: &quot;/fleet&quot;,&#10;    },&#10;    {&#10;      title: &quot;Gerenciar Motoristas&quot;,&#10;      description: &quot;Cadastrar e gerenciar motoristas&quot;,&#10;      icon: IdentificationCardIcon,&#10;      color: &quot;orange&quot;,&#10;      href: &quot;/drivers&quot;,&#10;    },&#10;    {&#10;      title: &quot;Gerenciar Parceiros&quot;,&#10;      description: &quot;Gerenciar empresas parceiras&quot;,&#10;      icon: HandshakeIcon,&#10;      color: &quot;purple&quot;,&#10;      href: &quot;/partners&quot;,&#10;    },&#10;  ];&#10;&#10;  const recentActivity = [&#10;    {&#10;      id: 1,&#10;      type: &quot;completed&quot;,&#10;      title: &quot;Pesagem concluída - ABC-1234 (Soja)&quot;,&#10;      time: &quot;14:32&quot;,&#10;      status: &quot;Concluído&quot;,&#10;    },&#10;    {&#10;      id: 2,&#10;      type: &quot;started&quot;,&#10;      title: &quot;Nova pesagem iniciada - DEF-5678 (Milho)&quot;,&#10;      time: &quot;14:28&quot;,&#10;      status: &quot;Em andamento&quot;,&#10;    },&#10;    {&#10;      id: 3,&#10;      type: &quot;registered&quot;,&#10;      title: &quot;Novo motorista cadastrado - Carlos Lima&quot;,&#10;      time: &quot;13:45&quot;,&#10;      status: &quot;Concluído&quot;,&#10;    },&#10;  ];&#10;&#10;  const systemStatus = [&#10;    {name: &quot;Balança R1&quot;, status: &quot;Online&quot;},&#10;    {name: &quot;Balança R2&quot;, status: &quot;Offline&quot;},&#10;  ];&#10;&#10;  return (&#10;    &lt;main&gt;&#10;      &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;        &lt;h1 className=&quot;text-4xl font-bold  font-display text-white&quot;&gt;&#10;          Dashboard&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#10;          Visão geral das operações de pesagem e logística&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Card className=&quot;grid grid-cols-1 2xl:grid-cols-3&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col 2xl:col-span-2 border-r-0 border-b 2xl:border-b-0 2xl:border-r border-dashed&quot;&gt;&#10;          &lt;CardHeader className=&quot;flex flex-row items-center justify-between&quot;&gt;&#10;            &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;              &lt;LightningIcon className=&quot;h-5 w-5&quot;/&gt;&#10;              Ações Rápidas&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;h-full&quot;&gt;&#10;            &lt;div className=&quot;grid grid-cols-1 h-full gap-4 md:grid-cols-2 auto-rows-fr&quot;&gt;&#10;              {quickActions.map((action, index) =&gt; (&#10;                &lt;Link&#10;                  href={action.href}&#10;                  key={index}&#10;                  className=&quot;&#10;                    flex gap-4 items-center p-6 relative overflow-hidden&#10;                    rounded-2xl border-4 border-dashed border-primary-200&#10;                    transition-all duration-200&#10;                    cursor-pointer brick-effect&#10;                    hover:border-solid hover:bg-primary-100&#10;                    group&#10;                  &quot;&#10;                &gt;&#10;                  &lt;action.icon&#10;                    className=&quot;&#10;                      absolute text-primary-100&#10;                      -top-8 -right-8&#10;                      h-24 w-24&#10;                      2xl:-top-14 2xl:-right-12&#10;                      2xl:h-44 2xl:w-44&#10;                      group-hover:text-primary-200&#10;                    &quot;&#10;                  /&gt;&#10;                  &lt;div className=&quot;flex items-center gap-4 relative&quot;&gt;&#10;                    &lt;action.icon&#10;                      className=&quot;&#10;                        text-primary-600 h-14 w-14 p-3&#10;                        bg-primary-100&#10;                        group-hover:bg-primary-200&#10;                        box-border rounded-2xl&#10;                        transition-colors duration-200&#10;                      &quot;&#10;                    /&gt;&#10;                    &lt;div className=&quot;flex flex-col transition-all duration-200&quot;&gt;&#10;                      &lt;h3 className=&quot;text-xl sm:text-2xl font-semibold text-card-foreground align-bottom group-hover:text-primary-600 transition-colors duration-200&quot;&gt;&#10;                        {action.title}&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-sm sm:text-md text-medium text-gray-400 group-hover:text-card-foreground transition-colors duration-200&quot;&gt;&#10;                        {action.description}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/Link&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/div&gt;&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;h-fit border-b border-dashed&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;                &lt;ClockIcon className=&quot;h-5 w-5&quot;/&gt;&#10;                Atividade Recente&#10;              &lt;/CardTitle&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;div className=&quot;space-y-4&quot;&gt;&#10;                {recentActivity.map((activity) =&gt; (&#10;                  &lt;div key={activity.id} className=&quot;flex items-start gap-3&quot;&gt;&#10;                    &lt;div className=&quot;h-2 w-2 rounded-full mt-2 bg-primary-600&quot;/&gt;&#10;                    &lt;div className=&quot;flex flex-col&quot;&gt;&#10;                      &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                        &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;&#10;                          {activity.title}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex items-center justify-between mt-1&quot;&gt;&#10;                        &lt;p className=&quot;text-xs text-gray-500&quot;&gt;{activity.time}&lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Badge&#10;                      className={cn(&#10;                        &quot;text-xs p-1 ml-auto&quot;,&#10;                        activity.status === &quot;Concluído&quot;&#10;                          ? &quot;bg-green-100 text-green-700&quot;&#10;                          : &quot;bg-amber-100 text-amber-700&quot;&#10;                      )}&#10;                    &gt;&#10;                      {&#10;                        activity.status === &quot;Concluído&quot;&#10;                          ? &lt;CheckCircleIcon className=&quot;w-4 h-4&quot;/&gt;&#10;                          : &lt;ClockIcon className=&quot;w-4 h-4&quot;/&gt;&#10;                      }&#10;                    &lt;/Badge&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;                &lt;ActivityIcon className=&quot;h-5 w-5&quot;/&gt;&#10;                Status do Sistema&#10;              &lt;/CardTitle&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                {systemStatus.map((system, index) =&gt; (&#10;                  &lt;div key={index} className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;span className=&quot;text-sm font-medium text-card-foreground&quot;&gt;&#10;                      {system.name}&#10;                    &lt;/span&gt;&#10;                    &lt;Badge&#10;                      variant=&quot;secondary&quot;&#10;                      className={`flex gap-1 text-xs ${&#10;                        system.status === &quot;Online&quot;&#10;                          ? &quot;bg-green-100 text-green-700&quot;&#10;                          : &quot;bg-red-100 text-red-700&quot;&#10;                      }`}&#10;                    &gt;&#10;                      &lt;div&#10;                        className={cn(&#10;                          &quot;w-1 h-1 rounded-full&quot;,&#10;                          system.status === &quot;Online&quot;&#10;                            ? &quot;bg-green-700&quot;&#10;                            : &quot;bg-red-700&quot;&#10;                        )}&#10;                      /&gt;&#10;                      {system.status}&#10;                    &lt;/Badge&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;import {useState, useEffect} from &quot;react&quot;;&#13;&#10;import {Card, CardContent, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#13;&#10;import {Badge} from &quot;@/components/ui/badge&quot;;&#13;&#10;import {&#13;&#10;  ActivityIcon,&#13;&#10;  CheckCircleIcon,&#13;&#10;  ClockIcon,&#13;&#10;  HandshakeIcon,&#13;&#10;  IdentificationCardIcon,&#13;&#10;  TruckIcon,&#13;&#10;  LightningIcon,&#13;&#10;} from &quot;@phosphor-icons/react&quot;;&#13;&#10;import WeightIcon from &quot;@/components/icons/WeightIcon&quot;;&#13;&#10;import {cn} from &quot;@/lib/utils&quot;;&#13;&#10;import Link from &quot;next/link&quot;;&#13;&#10;import {apiClient} from &quot;@/lib/api&quot;;&#13;&#10;&#13;&#10;interface CicloAberto {&#13;&#10;  id_pesagem: number;&#13;&#10;  placa: string;&#13;&#10;  motorista: string;&#13;&#10;}&#13;&#10;&#13;&#10;interface HistoricoItem {&#13;&#10;  id: number;&#13;&#10;  placa: string;&#13;&#10;  motorista: string;&#13;&#10;  peso_entrada: number;&#13;&#10;  peso_saida?: number;&#13;&#10;  data_entrada: string;&#13;&#10;  data_saida?: string;&#13;&#10;  status: string;&#13;&#10;}&#13;&#10;&#13;&#10;export default function Home() {&#13;&#10;  const [ciclosAbertos, setCiclosAbertos] = useState&lt;CicloAberto[]&gt;([]);&#13;&#10;  const [recentActivity, setRecentActivity] = useState&lt;HistoricoItem[]&gt;([]);&#13;&#10;  const [loading, setLoading] = useState(true);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    loadDashboardData();&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  const loadDashboardData = async () =&gt; {&#13;&#10;    setLoading(true);&#13;&#10;    &#13;&#10;    const [ciclosResponse, historicoResponse] = await Promise.all([&#13;&#10;      apiClient.getCiclosAbertos(),&#13;&#10;      apiClient.getHistorico()&#13;&#10;    ]);&#13;&#10;&#13;&#10;    if (ciclosResponse.data) {&#13;&#10;      setCiclosAbertos(ciclosResponse.data);&#13;&#10;    }&#13;&#10;&#13;&#10;    if (historicoResponse.data) {&#13;&#10;      setRecentActivity(historicoResponse.data.slice(0, 5));&#13;&#10;    }&#13;&#10;&#13;&#10;    setLoading(false);&#13;&#10;  };&#13;&#10;&#13;&#10;  const quickActions = [&#13;&#10;    {&#13;&#10;      title: &quot;Iniciar Pesagem&quot;,&#13;&#10;      description: &quot;Iniciar novo ciclo de pesagem&quot;,&#13;&#10;      icon: WeightIcon,&#13;&#10;      color: &quot;green&quot;,&#13;&#10;      href: &quot;/weighing&quot;,&#13;&#10;    },&#13;&#10;    {&#13;&#10;      title: &quot;Gerenciar Frota&quot;,&#13;&#10;      description: &quot;Cadastrar e gerenciar veículos da frota&quot;,&#13;&#10;      icon: TruckIcon,&#13;&#10;      color: &quot;blue&quot;,&#13;&#10;      href: &quot;/fleet&quot;,&#13;&#10;    },&#13;&#10;    {&#13;&#10;      title: &quot;Gerenciar Motoristas&quot;,&#13;&#10;      description: &quot;Cadastrar e gerenciar motoristas&quot;,&#13;&#10;      icon: IdentificationCardIcon,&#13;&#10;      color: &quot;orange&quot;,&#13;&#10;      href: &quot;/drivers&quot;,&#13;&#10;    },&#13;&#10;    {&#13;&#10;      title: &quot;Histórico&quot;,&#13;&#10;      description: &quot;Consultar histórico de pesagens&quot;,&#13;&#10;      icon: ClockIcon,&#13;&#10;      color: &quot;purple&quot;,&#13;&#10;      href: &quot;/history&quot;,&#13;&#10;    },&#13;&#10;  ];&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#13;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#13;&#10;        &lt;h1 className=&quot;text-4xl font-bold font-display text-white&quot;&gt;&#13;&#10;          Dashboard&#13;&#10;        &lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;&#13;&#10;          Visão geral das operações de pesagem e logística&#13;&#10;        &lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;Card className=&quot;w-full max-w-none&quot;&gt;&#13;&#10;        &lt;div className=&quot;grid grid-cols-1 2xl:grid-cols-3 min-h-[600px]&quot;&gt;&#13;&#10;          &lt;div className=&quot;flex flex-col 2xl:col-span-2 border-r-0 border-b 2xl:border-b-0 2xl:border-r border-dashed&quot;&gt;&#13;&#10;            &lt;CardHeader className=&quot;flex flex-row items-center justify-between&quot;&gt;&#13;&#10;              &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#13;&#10;                &lt;LightningIcon className=&quot;h-5 w-5&quot;/&gt;&#13;&#10;                Ações Rápidas&#13;&#10;              &lt;/CardTitle&gt;&#13;&#10;            &lt;/CardHeader&gt;&#13;&#10;            &lt;CardContent className=&quot;h-full&quot;&gt;&#13;&#10;              &lt;div className=&quot;grid grid-cols-1 h-full gap-4 md:grid-cols-2 auto-rows-fr&quot;&gt;&#13;&#10;                {quickActions.map((action, index) =&gt; (&#13;&#10;                  &lt;Link&#13;&#10;                    href={action.href}&#13;&#10;                    key={index}&#13;&#10;                    className=&quot;&#13;&#10;                      flex gap-4 items-center p-6 relative overflow-hidden&#13;&#10;                      rounded-2xl border-4 border-dashed border-primary-200&#13;&#10;                      transition-all duration-200&#13;&#10;                      cursor-pointer brick-effect&#13;&#10;                      hover:border-solid hover:bg-primary-100&#13;&#10;                      group&#13;&#10;                    &quot;&#13;&#10;                  &gt;&#13;&#10;                    &lt;action.icon&#13;&#10;                      className=&quot;&#13;&#10;                        absolute text-primary-100&#13;&#10;                        -top-8 -right-8&#13;&#10;                        h-24 w-24&#13;&#10;                        2xl:-top-14 2xl:-right-12&#13;&#10;                        2xl:h-44 2xl:w-44&#13;&#10;                        group-hover:text-primary-200&#13;&#10;                      &quot;&#13;&#10;                    /&gt;&#13;&#10;                    &lt;div className=&quot;flex items-center gap-4 relative&quot;&gt;&#13;&#10;                      &lt;action.icon&#13;&#10;                        className=&quot;&#13;&#10;                          text-primary-600 h-14 w-14 p-3&#13;&#10;                          bg-primary-100&#13;&#10;                          group-hover:bg-primary-200&#13;&#10;                          box-border rounded-2xl&#13;&#10;                          transition-colors duration-200&#13;&#10;                        &quot;&#13;&#10;                      /&gt;&#13;&#10;                      &lt;div className=&quot;flex flex-col transition-all duration-200&quot;&gt;&#13;&#10;                        &lt;h3 className=&quot;text-lg sm:text-xl font-semibold text-card-foreground align-bottom group-hover:text-primary-600 transition-colors duration-200&quot;&gt;&#13;&#10;                          {action.title}&#13;&#10;                        &lt;/h3&gt;&#13;&#10;                        &lt;p className=&quot;text-sm text-gray-400 group-hover:text-card-foreground transition-colors duration-200&quot;&gt;&#13;&#10;                          {action.description}&#13;&#10;                        &lt;/p&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/Link&gt;&#13;&#10;                ))}&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/CardContent&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &#13;&#10;          &lt;div className=&quot;flex flex-col&quot;&gt;&#13;&#10;            &lt;div className=&quot;flex-1 border-b border-dashed&quot;&gt;&#13;&#10;              &lt;CardHeader&gt;&#13;&#10;                &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#13;&#10;                  &lt;ClockIcon className=&quot;h-5 w-5&quot;/&gt;&#13;&#10;                  Atividade Recente&#13;&#10;                &lt;/CardTitle&gt;&#13;&#10;              &lt;/CardHeader&gt;&#13;&#10;              &lt;CardContent&gt;&#13;&#10;                {loading ? (&#13;&#10;                  &lt;div className=&quot;text-center py-4&quot;&gt;&#13;&#10;                    &lt;p className=&quot;text-gray-500&quot;&gt;Carregando...&lt;/p&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                ) : recentActivity.length === 0 ? (&#13;&#10;                  &lt;div className=&quot;text-center py-4&quot;&gt;&#13;&#10;                    &lt;p className=&quot;text-gray-500&quot;&gt;Nenhuma atividade recente&lt;/p&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                ) : (&#13;&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#13;&#10;                    {recentActivity.map((activity) =&gt; (&#13;&#10;                      &lt;div key={activity.id} className=&quot;flex items-start gap-3&quot;&gt;&#13;&#10;                        &lt;div className=&quot;h-2 w-2 rounded-full mt-2 bg-primary-600&quot;/&gt;&#13;&#10;                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#13;&#10;                          &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;&#13;&#10;                            {activity.placa} - {activity.motorista}&#13;&#10;                          &lt;/p&gt;&#13;&#10;                          &lt;p className=&quot;text-xs text-gray-500&quot;&gt;&#13;&#10;                            {new Date(activity.data_entrada).toLocaleString('pt-BR')}&#13;&#10;                          &lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;Badge&#13;&#10;                          className={cn(&#13;&#10;                            &quot;text-xs&quot;,&#13;&#10;                            activity.status === &quot;concluido&quot;&#13;&#10;                              ? &quot;bg-green-100 text-green-700&quot;&#13;&#10;                              : &quot;bg-amber-100 text-amber-700&quot;&#13;&#10;                          )}&#13;&#10;                        &gt;&#13;&#10;                          {activity.status === &quot;concluido&quot; ? (&#13;&#10;                            &lt;CheckCircleIcon className=&quot;w-3 h-3&quot;/&gt;&#13;&#10;                          ) : (&#13;&#10;                            &lt;ClockIcon className=&quot;w-3 h-3&quot;/&gt;&#13;&#10;                          )}&#13;&#10;                        &lt;/Badge&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    ))}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                )}&#13;&#10;              &lt;/CardContent&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &#13;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#13;&#10;              &lt;CardHeader&gt;&#13;&#10;                &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#13;&#10;                  &lt;ActivityIcon className=&quot;h-5 w-5&quot;/&gt;&#13;&#10;                  Ciclos em Andamento&#13;&#10;                &lt;/CardTitle&gt;&#13;&#10;              &lt;/CardHeader&gt;&#13;&#10;              &lt;CardContent&gt;&#13;&#10;                {loading ? (&#13;&#10;                  &lt;div className=&quot;text-center py-4&quot;&gt;&#13;&#10;                    &lt;p className=&quot;text-gray-500&quot;&gt;Carregando...&lt;/p&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                ) : ciclosAbertos.length === 0 ? (&#13;&#10;                  &lt;div className=&quot;text-center py-4&quot;&gt;&#13;&#10;                    &lt;p className=&quot;text-gray-500&quot;&gt;Nenhum ciclo em andamento&lt;/p&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                ) : (&#13;&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#13;&#10;                    {ciclosAbertos.map((ciclo) =&gt; (&#13;&#10;                      &lt;div key={ciclo.id_pesagem} className=&quot;flex items-center justify-between p-3 bg-amber-50 rounded-lg border border-amber-200&quot;&gt;&#13;&#10;                        &lt;div&gt;&#13;&#10;                          &lt;p className=&quot;font-medium text-amber-900&quot;&gt;{ciclo.placa}&lt;/p&gt;&#13;&#10;                          &lt;p className=&quot;text-sm text-amber-700&quot;&gt;{ciclo.motorista}&lt;/p&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;Badge&#13;&#10;                          variant=&quot;secondary&quot;&#13;&#10;                          className=&quot;bg-amber-100 text-amber-700&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;ClockIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#13;&#10;                          Em Andamento&#13;&#10;                        &lt;/Badge&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    ))}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                )}&#13;&#10;              &lt;/CardContent&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/Card&gt;&#13;&#10;    &lt;/main&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/partners/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/partners/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { BuildingOfficeIcon, PlusIcon, PencilSimpleLineIcon, PhoneIcon, EnvelopeSimpleIcon, MapPinIcon } from &quot;@phosphor-icons/react&quot;;&#10;import { FAB } from &quot;@/components/ui/fab&quot;;&#10;import { AddPartnerModal } from &quot;@/components/partners/add-partner-modal&quot;;&#10;import { EditPartnerModal } from &quot;@/components/partners/edit-partner-modal&quot;;&#10;import { useState } from &quot;react&quot;;&#10;&#10;interface Partner {&#10;  id: number;&#10;  name: string;&#10;  cnpj: string;&#10;  phone: string;&#10;  email: string;&#10;  address: string;&#10;  city: string;&#10;  status: &quot;Ativa&quot; | &quot;Inativa&quot;;&#10;  type: string;&#10;}&#10;&#10;export default function PartnerPage() {&#10;  const [addModalOpen, setAddModalOpen] = useState(false);&#10;  const [editModalOpen, setEditModalOpen] = useState(false);&#10;  const [selectedPartner, setSelectedPartner] = useState&lt;Partner | null&gt;(null);&#10;  const [partners, setPartners] = useState&lt;Partner[]&gt;([&#10;    {&#10;      id: 1,&#10;      name: &quot;Agro Brasil Ltda&quot;,&#10;      cnpj: &quot;12.345.678/0001-90&quot;,&#10;      phone: &quot;(11) 3333-3333&quot;,&#10;      email: &quot;contato@agrobrasil.com&quot;,&#10;      address: &quot;Rua das Plantações, 123&quot;,&#10;      city: &quot;Ribeirão Preto - SP 14000-000&quot;,&#10;      status: &quot;Ativa&quot;,&#10;      type: &quot;Cliente preferencial&quot;,&#10;    },&#10;    {&#10;      id: 2,&#10;      name: &quot;Transportes Campo&quot;,&#10;      cnpj: &quot;98.765.432/0001-12&quot;,&#10;      phone: &quot;(16) 2222-2222&quot;,&#10;      email: &quot;admin@transportescampo.com&quot;,&#10;      address: &quot;Av. Rural, 456&quot;,&#10;      city: &quot;Sertãozinho - SP 14160-000&quot;,&#10;      status: &quot;Ativa&quot;,&#10;      type: &quot;Transportadora&quot;,&#10;    },&#10;  ]);&#10;&#10;  const handleNewPartner = () =&gt; {&#10;    setAddModalOpen(true);&#10;  };&#10;&#10;  const handleEditPartner = (partner: Partner) =&gt; {&#10;    setSelectedPartner(partner);&#10;    setEditModalOpen(true);&#10;  };&#10;&#10;  const handleSavePartner = (newPartner: Omit&lt;Partner, &quot;id&quot;&gt;) =&gt; {&#10;    const partner: Partner = {&#10;      ...newPartner,&#10;      id: Math.max(...partners.map((p) =&gt; p.id)) + 1,&#10;    };&#10;    setPartners((prev) =&gt; [...prev, partner]);&#10;  };&#10;&#10;  const handleUpdatePartner = (updatedPartner: Partner) =&gt; {&#10;    setPartners((prev) =&gt;&#10;      prev.map((partner) =&gt;&#10;        partner.id === updatedPartner.id ? updatedPartner : partner&#10;      )&#10;    );&#10;  };&#10;&#10;  const handleDeletePartner = (partnerId: number) =&gt; {&#10;    setPartners((prev) =&gt; prev.filter((partner) =&gt; partner.id !== partnerId));&#10;  };&#10;&#10;  return (&#10;    &lt;main&gt;&#10;      &lt;div&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#10;            Empresas parceiras&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;Gerencie as empresas parceiras&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-1 gap-6 md:grid-cols-2 xl:grid-cols-3&quot;&gt;&#10;        {partners.map((partner) =&gt; (&#10;          &lt;Card key={partner.id} className=&quot;relative&quot;&gt;&#10;            &lt;CardHeader className=&quot;pb-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                  &lt;div className=&quot;h-12 w-12 rounded-2xl bg-primary-100 flex items-center justify-center&quot;&gt;&#10;                    &lt;BuildingOfficeIcon className=&quot;h-6 w-6 text-primary-600&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;text-lg font-bold&quot;&gt;&#10;                      {partner.name}&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-400&quot;&gt;CNPJ: {partner.cnpj}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;Badge&#10;                  className={&#10;                    partner.status === &quot;Ativa&quot;&#10;                      ? &quot;bg-green-100 text-green-700 border-green-200&quot;&#10;                      : &quot;bg-red-100 text-red-700 border-red-200&quot;&#10;                  }&#10;                &gt;&#10;                  {partner.status}&#10;                &lt;/Badge&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;flex flex-col&quot;&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                  &lt;PhoneIcon className=&quot;h-4 w-4 text-primary-600&quot; /&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;{partner.phone}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                  &lt;EnvelopeSimpleIcon className=&quot;h-4 w-4 text-primary-600&quot; /&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;{partner.email}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-start gap-2&quot;&gt;&#10;                  &lt;MapPinIcon className=&quot;h-4 w-4 text-primary-600 mt-0.5&quot; /&gt;&#10;                  &lt;div&gt;&#10;                    &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;{partner.address}&lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{partner.city}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-sm font-semibold text-primary-600&quot;&gt;Tipo&lt;/p&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-card-foreground&quot;&gt;{partner.type}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;Button&#10;                variant=&quot;secondary&quot;&#10;                size=&quot;sm&quot;&#10;                className=&quot;ml-auto mt-6&quot;&#10;                onClick={() =&gt; handleEditPartner(partner)}&#10;              &gt;&#10;                &lt;PencilSimpleLineIcon className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                Editar&#10;              &lt;/Button&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      &lt;FAB&#10;        icon={PlusIcon}&#10;        label=&quot;Nova Empresa&quot;&#10;        onClick={handleNewPartner}&#10;      /&gt;&#10;&#10;      &lt;AddPartnerModal&#10;        open={addModalOpen}&#10;        onOpenChange={setAddModalOpen}&#10;        onSave={handleSavePartner}&#10;      /&gt;&#10;&#10;      &lt;EditPartnerModal&#10;        open={editModalOpen}&#10;        onOpenChange={setEditModalOpen}&#10;        partner={selectedPartner}&#10;        onSave={handleUpdatePartner}&#10;        onDelete={handleDeletePartner}&#10;      /&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;export default function PartnersPage() {&#13;&#10;  return (&#13;&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#13;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-white&quot;&gt;&#13;&#10;          Gerenciamento de Parceiros&#13;&#10;        &lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;&#13;&#10;          Funcionalidade em desenvolvimento&#13;&#10;        &lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className=&quot;flex items-center justify-center min-h-[400px]&quot;&gt;&#13;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;          &lt;div className=&quot;w-24 h-24 bg-gray-200 rounded-full mx-auto mb-4 flex items-center justify-center&quot;&gt;&#13;&#10;            &lt;span className=&quot;text-4xl text-gray-400&quot;&gt;&lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;h2 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;&#13;&#10;            Funcionalidade em Desenvolvimento&#13;&#10;          &lt;/h2&gt;&#13;&#10;          &lt;p className=&quot;text-gray-500&quot;&gt;&#13;&#10;            O gerenciamento de parceiros estará disponível em breve.&#13;&#10;          &lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/main&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/settings/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/settings/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import {useState} from &quot;react&quot;;&#10;import {Card, CardContent, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {Switch} from &quot;@/components/ui/switch&quot;;&#10;import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from &quot;@/components/ui/select&quot;;&#10;import {Tabs, TabsContent, TabsList, TabsTrigger} from &quot;@/components/ui/tabs&quot;;&#10;import {Badge} from &quot;@/components/ui/badge&quot;;&#10;import {BellIcon, DatabaseIcon, FloppyDiskIcon, PrinterIcon, ScalesIcon} from &quot;@phosphor-icons/react&quot;;&#10;import WeightIcon from &quot;@/components/icons/WeightIcon&quot;;&#10;import {FAB} from &quot;@/components/ui/fab&quot;;&#10;&#10;export default function SettingsPage() {&#10;  const tabs = [&#10;    {&#10;      id: &quot;weighing&quot;,&#10;      label: &quot;Pesagem&quot;,&#10;      icon: WeightIcon,&#10;    },&#10;    {&#10;      id: &quot;scales&quot;,&#10;      label: &quot;Balanças&quot;,&#10;      icon: ScalesIcon,&#10;    },&#10;    {&#10;      id: &quot;notifications&quot;,&#10;      label: &quot;Notificações&quot;,&#10;      icon: BellIcon,&#10;    },&#10;    {&#10;      id: &quot;backup&quot;,&#10;      label: &quot;Backup&quot;,&#10;      icon: DatabaseIcon,&#10;    },&#10;    {&#10;      id: &quot;printing&quot;,&#10;      label: &quot;Impressão&quot;,&#10;      icon: PrinterIcon,&#10;    }&#10;  ]&#10;&#10;  const [settings, setSettings] = useState({&#10;    // Configurações de Pesagem&#10;    weighing: {&#10;      autoTare: true,&#10;      minWeight: &quot;100&quot;,&#10;      maxWeight: &quot;50000&quot;,&#10;      precision: &quot;0.1&quot;,&#10;      timeout: &quot;300&quot;,&#10;      printTicket: true,&#10;    },&#10;    // Configurações de Sistema&#10;    system: {&#10;      companyName: &quot;Semensol Agro&quot;,&#10;      address: &quot;Rua das Plantações, 123&quot;,&#10;      city: &quot;Ribeirão Preto - SP&quot;,&#10;      phone: &quot;(16) 3333-4444&quot;,&#10;      email: &quot;contato@semensolagro.com.br&quot;,&#10;      cnpj: &quot;12.345.678/0001-90&quot;,&#10;    },&#10;    // Configurações de Balanças&#10;    scales: {&#10;      scale1: {&#10;        name: &quot;Balança R1&quot;,&#10;        ip: &quot;192.168.1.100&quot;,&#10;        port: &quot;502&quot;,&#10;        enabled: true,&#10;        calibration: &quot;2024-01-15&quot;,&#10;      },&#10;      scale2: {&#10;        name: &quot;Balança R2&quot;,&#10;        ip: &quot;192.168.1.101&quot;,&#10;        port: &quot;502&quot;,&#10;        enabled: false,&#10;        calibration: &quot;2024-01-15&quot;,&#10;      },&#10;    },&#10;    // Configurações de Notificações&#10;    notifications: {&#10;      emailAlerts: true,&#10;      systemAlerts: true,&#10;      weighingComplete: true,&#10;      scaleOffline: true,&#10;      dailyReport: true,&#10;      weeklyReport: false,&#10;    },&#10;    // Configurações de Backup&#10;    backup: {&#10;      autoBackup: true,&#10;      backupTime: &quot;02:00&quot;,&#10;      retentionDays: &quot;30&quot;,&#10;      cloudBackup: false,&#10;    },&#10;    // Configurações de Impressão&#10;    printing: {&#10;      printerName: &quot;HP LaserJet Pro&quot;,&#10;      ticketFormat: &quot;standard&quot;,&#10;      copies: &quot;2&quot;,&#10;      autoprint: true,&#10;    },&#10;  });&#10;&#10;  const handleSave = () =&gt; {&#10;    // Aqui seria implementada a lógica de salvamento&#10;    console.log(&quot;Configurações salvas:&quot;, settings);&#10;  };&#10;&#10;  return (&#10;    &lt;main&gt;&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold  text-white&quot;&gt;&#10;            Configurações&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#10;            Gerencie as configurações do sistema Semensol&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Tabs defaultValue=&quot;weighing&quot; className=&quot;flex flex-col bg-card/20 rounded-3xl&quot;&gt;&#10;        &lt;TabsList className=&quot;grid grid-cols-5 w-full rounded-r-none bg-transparent p-0&quot;&gt;&#10;          {tabs.map((tab, index) =&gt; (&#10;            &lt;TabsTrigger&#10;              key={index}&#10;              value={tab.id}&#10;              className=&quot;&#10;                flex items-center justify-center w-full rounded-b-none rounded-t-2xl gap-2&#10;                data-[state=active]:bg-card data-[state=active]:text-foreground data-[state=active]:shadow-sm&#10;              &quot;&#10;            &gt;&#10;              &lt;tab.icon className=&quot;h-4 w-4&quot; /&gt;&#10;              {tab.label}&#10;            &lt;/TabsTrigger&gt;&#10;          ))}&#10;        &lt;/TabsList&gt;&#10;&#10;        {/* Configurações de Pesagem */}&#10;        &lt;TabsContent value=&quot;weighing&quot; className=&quot;flex-1 bg-card rounded-3xl rounded-tl-none&quot;&gt;&#10;          &lt;Card className=&quot;shadow-none&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;ScalesIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                Configurações de Pesagem&#10;              &lt;/CardTitle&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;minWeight&quot;&gt;Peso Mínimo (kg)&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;minWeight&quot;&#10;                    value={settings.weighing.minWeight}&#10;                    onChange={(e) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        weighing: { ...settings.weighing, minWeight: e.target.value },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;maxWeight&quot;&gt;Peso Máximo (kg)&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;maxWeight&quot;&#10;                    value={settings.weighing.maxWeight}&#10;                    onChange={(e) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        weighing: { ...settings.weighing, maxWeight: e.target.value },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;precision&quot;&gt;Precisão (kg)&lt;/Label&gt;&#10;                  &lt;Select&#10;                    value={settings.weighing.precision}&#10;                    onValueChange={(value) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        weighing: { ...settings.weighing, precision: value },&#10;                      })&#10;                    }&#10;                  &gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue /&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                    &lt;SelectContent&gt;&#10;                      &lt;SelectItem value=&quot;0.1&quot;&gt;0.1 kg&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;0.5&quot;&gt;0.5 kg&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;1.0&quot;&gt;1.0 kg&lt;/SelectItem&gt;&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;timeout&quot;&gt;Timeout (segundos)&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;timeout&quot;&#10;                    value={settings.weighing.timeout}&#10;                    onChange={(e) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        weighing: { ...settings.weighing, timeout: e.target.value },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                  &lt;Label&gt;Tara Automática&lt;/Label&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                    Zerar automaticamente a balança antes da pesagem&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;Switch&#10;                  checked={settings.weighing.autoTare}&#10;                  onCheckedChange={(checked) =&gt;&#10;                    setSettings({&#10;                      ...settings,&#10;                      weighing: { ...settings.weighing, autoTare: checked },&#10;                    })&#10;                  }&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                  &lt;Label&gt;Imprimir Ticket Automaticamente&lt;/Label&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                    Imprimir ticket ao finalizar pesagem&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;Switch&#10;                  checked={settings.weighing.printTicket}&#10;                  onCheckedChange={(checked) =&gt;&#10;                    setSettings({&#10;                      ...settings,&#10;                      weighing: { ...settings.weighing, printTicket: checked },&#10;                    })&#10;                  }&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/TabsContent&gt;&#10;&#10;        {/* Configurações de Balanças */}&#10;        &lt;TabsContent value=&quot;scales&quot; className=&quot;flex-1 bg-card rounded-3xl shadow-lg&quot;&gt;&#10;          &lt;div&gt;&#10;            {Object.entries(settings.scales).map(([key, scale]) =&gt; (&#10;              &lt;Card key={key} className=&quot;shadow-none&quot;&gt;&#10;                &lt;CardHeader&gt;&#10;                  &lt;CardTitle className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                      &lt;ScalesIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                      {scale.name}&#10;                    &lt;/div&gt;&#10;                    &lt;Badge variant={scale.enabled ? &quot;default&quot; : &quot;secondary&quot;}&gt;&#10;                      {scale.enabled ? &quot;Ativa&quot; : &quot;Inativa&quot;}&#10;                    &lt;/Badge&gt;&#10;                  &lt;/CardTitle&gt;&#10;                &lt;/CardHeader&gt;&#10;                &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label&gt;Endereço IP&lt;/Label&gt;&#10;                      &lt;Input value={scale.ip} /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label&gt;Porta&lt;/Label&gt;&#10;                      &lt;Input value={scale.port} /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      &lt;Label&gt;Última Calibração&lt;/Label&gt;&#10;                      &lt;Input value={scale.calibration} type=&quot;date&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                      &lt;Label&gt;Balança Ativa&lt;/Label&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                        Habilitar esta balança para pesagens&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Switch checked={scale.enabled} /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/CardContent&gt;&#10;              &lt;/Card&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/TabsContent&gt;&#10;&#10;        {/* Configurações de Notificações */}&#10;        &lt;TabsContent value=&quot;notifications&quot; className=&quot;flex-1 bg-card rounded-3xl shadow-lg&quot;&gt;&#10;          &lt;Card className=&quot;shadow-none&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;BellIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                Notificações&#10;              &lt;/CardTitle&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;              &lt;div className=&quot;space-y-4&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                    &lt;Label&gt;Alertas por E-mail&lt;/Label&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                      Receber alertas importantes por e-mail&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Switch&#10;                    checked={settings.notifications.emailAlerts}&#10;                    onCheckedChange={(checked) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        notifications: { ...settings.notifications, emailAlerts: checked },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                    &lt;Label&gt;Alertas do Sistema&lt;/Label&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                      Notificações de sistema na interface&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Switch&#10;                    checked={settings.notifications.systemAlerts}&#10;                    onCheckedChange={(checked) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        notifications: { ...settings.notifications, systemAlerts: checked },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                    &lt;Label&gt;Pesagem Concluída&lt;/Label&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                      Notificar quando uma pesagem for finalizada&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Switch&#10;                    checked={settings.notifications.weighingComplete}&#10;                    onCheckedChange={(checked) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        notifications: { ...settings.notifications, weighingComplete: checked },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                    &lt;Label&gt;Balança Offline&lt;/Label&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                      Alertar quando uma balança ficar offline&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Switch&#10;                    checked={settings.notifications.scaleOffline}&#10;                    onCheckedChange={(checked) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        notifications: { ...settings.notifications, scaleOffline: checked },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                    &lt;Label&gt;Relatório Diário&lt;/Label&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                      Enviar relatório diário por e-mail&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Switch&#10;                    checked={settings.notifications.dailyReport}&#10;                    onCheckedChange={(checked) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        notifications: { ...settings.notifications, dailyReport: checked },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                  &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                    &lt;Label&gt;Relatório Semanal&lt;/Label&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                      Enviar relatório semanal por e-mail&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;Switch&#10;                    checked={settings.notifications.weeklyReport}&#10;                    onCheckedChange={(checked) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        notifications: { ...settings.notifications, weeklyReport: checked },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/TabsContent&gt;&#10;&#10;        {/* Configurações de Backup */}&#10;        &lt;TabsContent value=&quot;backup&quot; className=&quot;flex-1 bg-card rounded-3xl shadow-lg&quot;&gt;&#10;          &lt;Card className=&quot;shadow-none&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;DatabaseIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                Backup e Segurança&#10;              &lt;/CardTitle&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                  &lt;Label&gt;Backup Automático&lt;/Label&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                    Realizar backup automático dos dados&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;Switch&#10;                  checked={settings.backup.autoBackup}&#10;                  onCheckedChange={(checked) =&gt;&#10;                    setSettings({&#10;                      ...settings,&#10;                      backup: { ...settings.backup, autoBackup: checked },&#10;                    })&#10;                  }&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;backupTime&quot;&gt;Horário do Backup&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;backupTime&quot;&#10;                    type=&quot;time&quot;&#10;                    value={settings.backup.backupTime}&#10;                    onChange={(e) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        backup: { ...settings.backup, backupTime: e.target.value },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;retentionDays&quot;&gt;Retenção (dias)&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;retentionDays&quot;&#10;                    value={settings.backup.retentionDays}&#10;                    onChange={(e) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        backup: { ...settings.backup, retentionDays: e.target.value },&#10;                      })&#10;                    }&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                  &lt;Label&gt;Backup na Nuvem&lt;/Label&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                    Enviar backups para armazenamento na nuvem&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;Switch&#10;                  checked={settings.backup.cloudBackup}&#10;                  onCheckedChange={(checked) =&gt;&#10;                    setSettings({&#10;                      ...settings,&#10;                      backup: { ...settings.backup, cloudBackup: checked },&#10;                    })&#10;                  }&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/TabsContent&gt;&#10;&#10;        {/* Configurações de Impressão */}&#10;        &lt;TabsContent value=&quot;printing&quot; className=&quot;flex-1 bg-card rounded-3xl rounded-tr-none shadow-lg&quot;&gt;&#10;          &lt;Card className=&quot;shadow-none&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;PrinterIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                Configurações de Impressão&#10;              &lt;/CardTitle&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;printerName&quot;&gt;Impressora Padrão&lt;/Label&gt;&#10;                  &lt;Select&#10;                    value={settings.printing.printerName}&#10;                    onValueChange={(value) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        printing: { ...settings.printing, printerName: value },&#10;                      })&#10;                    }&#10;                  &gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue /&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                    &lt;SelectContent&gt;&#10;                      &lt;SelectItem value=&quot;HP LaserJet Pro&quot;&gt;HP LaserJet Pro&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;Epson L3150&quot;&gt;Epson L3150&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;Canon PIXMA&quot;&gt;Canon PIXMA&lt;/SelectItem&gt;&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;ticketFormat&quot;&gt;Formato do Ticket&lt;/Label&gt;&#10;                  &lt;Select&#10;                    value={settings.printing.ticketFormat}&#10;                    onValueChange={(value) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        printing: { ...settings.printing, ticketFormat: value },&#10;                      })&#10;                    }&#10;                  &gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue /&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                    &lt;SelectContent&gt;&#10;                      &lt;SelectItem value=&quot;standard&quot;&gt;Padrão&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;compact&quot;&gt;Compacto&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;detailed&quot;&gt;Detalhado&lt;/SelectItem&gt;&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;copies&quot;&gt;Número de Cópias&lt;/Label&gt;&#10;                  &lt;Select&#10;                    value={settings.printing.copies}&#10;                    onValueChange={(value) =&gt;&#10;                      setSettings({&#10;                        ...settings,&#10;                        printing: { ...settings.printing, copies: value },&#10;                      })&#10;                    }&#10;                  &gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue /&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                    &lt;SelectContent&gt;&#10;                      &lt;SelectItem value=&quot;1&quot;&gt;1 cópia&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;2&quot;&gt;2 cópias&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;3&quot;&gt;3 cópias&lt;/SelectItem&gt;&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;space-y-0.5&quot;&gt;&#10;                  &lt;Label&gt;Impressão Automática&lt;/Label&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-400&quot;&gt;&#10;                    Imprimir automaticamente ao finalizar pesagem&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;Switch&#10;                  checked={settings.printing.autoprint}&#10;                  onCheckedChange={(checked) =&gt;&#10;                    setSettings({&#10;                      ...settings,&#10;                      printing: { ...settings.printing, autoprint: checked },&#10;                    })&#10;                  }&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/TabsContent&gt;&#10;      &lt;/Tabs&gt;&#10;      &lt;FAB&#10;        icon={FloppyDiskIcon}&#10;        label=&quot;Salvar Alterações&quot;&#10;        onClick={handleSave}&#10;      /&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;export default function SettingsPage() {&#13;&#10;  return (&#13;&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#13;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-white&quot;&gt;&#13;&#10;          Configurações do Sistema&#13;&#10;        &lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;&#13;&#10;          Funcionalidade em desenvolvimento&#13;&#10;        &lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className=&quot;flex items-center justify-center min-h-[400px]&quot;&gt;&#13;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;          &lt;div className=&quot;w-24 h-24 bg-gray-200 rounded-full mx-auto mb-4 flex items-center justify-center&quot;&gt;&#13;&#10;            &lt;span className=&quot;text-4xl text-gray-400&quot;&gt;⚙️&lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;h2 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;&#13;&#10;            Funcionalidade em Desenvolvimento&#13;&#10;          &lt;/h2&gt;&#13;&#10;          &lt;p className=&quot;text-gray-500&quot;&gt;&#13;&#10;            As configurações do sistema estarão disponíveis em breve.&#13;&#10;          &lt;/p&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/main&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/weighing/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/weighing/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;import {Card, CardContent, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue,} from &quot;@/components/ui/select&quot;;&#10;import {CheckCircleIcon, ClockIcon, PlayIcon, PlugsConnectedIcon, ScalesIcon, SquareIcon, PlugsIcon} from &quot;@phosphor-icons/react&quot;;&#10;import WeightIcon from &quot;@/components/icons/WeightIcon&quot;;&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;import {Badge} from &quot;@/components/ui/badge&quot;;&#10;import {apiClient} from &quot;@/lib/api&quot;;&#10;&#10;interface Motorista {&#10;  id: number;&#10;  nome: string;&#10;}&#10;&#10;interface CicloAberto {&#10;  id_pesagem: number;&#10;  placa: string;&#10;  motorista: string;&#10;}&#10;&#10;export default function WeighingPage() {&#10;  const [isConnected, setIsConnected] = useState(false);&#10;  const [currentWeight, setCurrentWeight] = useState(0);&#10;  const [isWeighing, setIsWeighing] = useState(false);&#10;  const [motoristas, setMotoristas] = useState&lt;Motorista[]&gt;([]);&#10;  const [ciclosAbertos, setCiclosAbertos] = useState&lt;CicloAberto[]&gt;([]);&#10;  const [loading, setLoading] = useState(false);&#10;  const [formData, setFormData] = useState({&#10;    placa: &quot;&quot;,&#10;    motorista_id: &quot;&quot;,&#10;    peso: &quot;&quot;&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    loadMotoristas();&#10;    loadCiclosAbertos();&#10;  }, []);&#10;&#10;  const loadMotoristas = async () =&gt; {&#10;    const response = await apiClient.getMotoristas();&#10;    if (response.data) {&#10;      setMotoristas(response.data);&#10;    }&#10;  };&#10;&#10;  const loadCiclosAbertos = async () =&gt; {&#10;    const response = await apiClient.getCiclosAbertos();&#10;    if (response.data) {&#10;      setCiclosAbertos(response.data);&#10;    }&#10;  };&#10;&#10;  const handleRegistrarEntrada = async () =&gt; {&#10;    if (!formData.placa || !formData.motorista_id || !currentWeight) return;&#10;&#10;    setLoading(true);&#10;    const response = await apiClient.registrarEntrada({&#10;      placa: formData.placa,&#10;      motorista_id: parseInt(formData.motorista_id),&#10;      peso: currentWeight&#10;    });&#10;&#10;    if (response.data) {&#10;      setFormData({ placa: &quot;&quot;, motorista_id: &quot;&quot;, peso: &quot;&quot; });&#10;      setCurrentWeight(0);&#10;      loadCiclosAbertos();&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const handleRegistrarSaida = async (eventoId: number) =&gt; {&#10;    if (!currentWeight) return;&#10;&#10;    setLoading(true);&#10;    const response = await apiClient.registrarSaida({&#10;      evento_id: eventoId,&#10;      peso: currentWeight&#10;    });&#10;&#10;    if (response.data !== undefined) {&#10;      setCurrentWeight(0);&#10;      loadCiclosAbertos();&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  return (&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-white&quot;&gt;&#10;          Central de Pesagem&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;&#10;          Controle e monitoramento das operações de pesagem em tempo real&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;Card className=&quot;w-full max-w-none&quot;&gt;&#10;        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 min-h-[600px]&quot;&gt;&#10;          &lt;div className=&quot;border-b lg:border-b-0 lg:border-r border-dashed&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;                &lt;ScalesIcon className=&quot;h-5 w-5&quot;/&gt;&#10;                Controle da Balança&#10;              &lt;/CardTitle&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 gap-4&quot;&gt;&#10;                &lt;div className=&quot;sm:col-span-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;placa&quot;&gt;Placa do Veículo&lt;/Label&gt;&#10;                  &lt;Input&#10;                    id=&quot;placa&quot;&#10;                    placeholder=&quot;ABC-1234&quot;&#10;                    value={formData.placa}&#10;                    onChange={(e) =&gt; setFormData(prev =&gt; ({ ...prev, placa: e.target.value.toUpperCase() }))}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;sm:col-span-2&quot;&gt;&#10;                  &lt;Label htmlFor=&quot;driver&quot;&gt;Motorista&lt;/Label&gt;&#10;                  &lt;Select value={formData.motorista_id} onValueChange={(value) =&gt; setFormData(prev =&gt; ({ ...prev, motorista_id: value }))}&gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue placeholder=&quot;Selecione o motorista&quot;/&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                    &lt;SelectContent&gt;&#10;                      {motoristas.map((motorista) =&gt; (&#10;                        &lt;SelectItem key={motorista.id} value={motorista.id.toString()}&gt;&#10;                          {motorista.nome}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {ciclosAbertos.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;space-y-3&quot;&gt;&#10;                  &lt;Label&gt;Ciclos em Andamento&lt;/Label&gt;&#10;                  &lt;div className=&quot;space-y-2&quot;&gt;&#10;                    {ciclosAbertos.map((ciclo) =&gt; (&#10;                      &lt;div key={ciclo.id_pesagem} className=&quot;flex items-center justify-between p-3 border rounded-lg&quot;&gt;&#10;                        &lt;div&gt;&#10;                          &lt;p className=&quot;font-medium&quot;&gt;{ciclo.placa}&lt;/p&gt;&#10;                          &lt;p className=&quot;text-sm text-gray-500&quot;&gt;{ciclo.motorista}&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Button&#10;                          size=&quot;sm&quot;&#10;                          variant=&quot;outline&quot;&#10;                          disabled={!isConnected || loading}&#10;                          onClick={() =&gt; handleRegistrarSaida(ciclo.id_pesagem)}&#10;                        &gt;&#10;                          Registrar Saída&#10;                        &lt;/Button&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;&#10;              &lt;Button&#10;                className=&quot;w-full&quot;&#10;                disabled={!isConnected || !formData.placa || !formData.motorista_id || loading}&#10;                onClick={handleRegistrarEntrada}&#10;              &gt;&#10;                {loading ? (&#10;                  &lt;ClockIcon className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;                ) : isWeighing ? (&#10;                  &lt;SquareIcon className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;                ) : (&#10;                  &lt;PlayIcon className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;                )}&#10;                {loading ? &quot;Processando...&quot; : &quot;Registrar Entrada&quot;}&#10;              &lt;/Button&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex flex-col&quot;&gt;&#10;            &lt;CardHeader className=&quot;flex-row justify-between items-center&quot;&gt;&#10;              &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;                &lt;WeightIcon className=&quot;h-5 w-5&quot;/&gt;&#10;                Balança&#10;              &lt;/CardTitle&gt;&#10;              &lt;Badge&#10;                variant=&quot;secondary&quot;&#10;                className={cn(&#10;                  &quot;flex items-center text-xs gap-1&quot;,&#10;                  isConnected&#10;                    ? &quot;bg-green-100 text-green-700&quot;&#10;                    : &quot;bg-red-100 text-red-700&quot;&#10;                )}&#10;              &gt;&#10;                &lt;div&#10;                  className={cn(&#10;                    &quot;w-1 h-1 rounded-full&quot;,&#10;                    isConnected ? &quot;bg-green-700&quot; : &quot;bg-red-700&quot;&#10;                  )}&#10;                /&gt;&#10;                {isConnected ? &quot;Conectada&quot; : &quot;Desconectada&quot;}&#10;              &lt;/Badge&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;flex flex-col h-full justify-between&quot;&gt;&#10;              &lt;div className=&quot;text-center my-auto&quot;&gt;&#10;                {!isConnected ? (&#10;                  &lt;&gt;&#10;                    &lt;WeightIcon className=&quot;h-16 w-16 text-gray-300 mx-auto mb-4&quot;/&gt;&#10;                    &lt;p className=&quot;text-gray-500&quot;&gt;Balança desconectada&lt;/p&gt;&#10;                  &lt;/&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;p className=&quot;text-4xl md:text-6xl lg:text-7xl font-bold&quot;&gt;{currentWeight} kg&lt;/p&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Peso manual&quot;&#10;                      value={currentWeight}&#10;                      onChange={(e) =&gt; setCurrentWeight(Number(e.target.value))}&#10;                      className=&quot;text-center text-lg&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-col sm:flex-row gap-3 mt-6&quot;&gt;&#10;                &lt;Button&#10;                  variant=&quot;secondary&quot;&#10;                  className=&quot;flex-1&quot;&#10;                  onClick={() =&gt; setCurrentWeight(0)}&#10;                &gt;&#10;                  Zerar Peso&#10;                &lt;/Button&gt;&#10;                &lt;Button&#10;                  onClick={() =&gt; setIsConnected(!isConnected)}&#10;                  variant={isConnected ? &quot;destructive&quot; : &quot;default&quot;}&#10;                  className={cn(&#10;                    !isConnected &amp;&amp; &quot;bg-green-700 hover:bg-green-700/90&quot;,&#10;                    &quot;flex-1 flex items-center gap-2&quot;&#10;                  )}&#10;                &gt;&#10;                  {isConnected ? &lt;PlugsIcon className=&quot;h-4 w-4&quot;/&gt; : &lt;PlugsConnectedIcon className=&quot;h-4 w-4&quot;/&gt;}&#10;                  {isConnected ? &quot;Desconectar&quot; : &quot;Conectar Balança&quot;}&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;import {Card, CardContent, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;import {Label} from &quot;@/components/ui/label&quot;;&#10;import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue,} from &quot;@/components/ui/select&quot;;&#10;import {CheckCircleIcon, ClockIcon, PlayIcon, PlugsConnectedIcon, ScalesIcon, SquareIcon, PlugsIcon} from &quot;@phosphor-icons/react&quot;;&#10;import WeightIcon from &quot;@/components/icons/WeightIcon&quot;;&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;import {Badge} from &quot;@/components/ui/badge&quot;;&#10;import {apiClient} from &quot;@/lib/api&quot;;&#10;import {VideoVerification} from &quot;@/components/weighing/video-verification&quot;;&#10;&#10;interface Motorista {&#10;  id: number;&#10;  nome: string;&#10;}&#10;&#10;interface CicloAberto {&#10;  id_pesagem: number;&#10;  placa: string;&#10;  motorista: string;&#10;}&#10;&#10;export default function WeighingPage() {&#10;  const [isConnected, setIsConnected] = useState(false);&#10;  const [currentWeight, setCurrentWeight] = useState(0);&#10;  const [isWeighing, setIsWeighing] = useState(false);&#10;  const [motoristas, setMotoristas] = useState&lt;Motorista[]&gt;([]);&#10;  const [ciclosAbertos, setCiclosAbertos] = useState&lt;CicloAberto[]&gt;([]);&#10;  const [loading, setLoading] = useState(false);&#10;  const [formData, setFormData] = useState({&#10;    placa: &quot;&quot;,&#10;    motorista_id: &quot;&quot;,&#10;    peso: &quot;&quot;&#10;  });&#10;  const [verificationComplete, setVerificationComplete] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    loadMotoristas();&#10;    loadCiclosAbertos();&#10;  }, []);&#10;&#10;  const loadMotoristas = async () =&gt; {&#10;    const response = await apiClient.getMotoristas();&#10;    if (response.data) {&#10;      setMotoristas(response.data);&#10;    }&#10;  };&#10;&#10;  const loadCiclosAbertos = async () =&gt; {&#10;    const response = await apiClient.getCiclosAbertos();&#10;    if (response.data) {&#10;      setCiclosAbertos(response.data);&#10;    }&#10;  };&#10;&#10;  const handleDriverVerified = (driverId: number, driverName: string) =&gt; {&#10;    setFormData(prev =&gt; ({ ...prev, motorista_id: driverId.toString() }));&#10;  };&#10;&#10;  const handlePlateDetected = (plate: string) =&gt; {&#10;    setFormData(prev =&gt; ({ ...prev, placa: plate }));&#10;  };&#10;&#10;  const handleVerificationComplete = (success: boolean) =&gt; {&#10;    setVerificationComplete(success);&#10;  };&#10;&#10;  const handleRegistrarEntrada = async () =&gt; {&#10;    if (!formData.placa || !formData.motorista_id || !currentWeight) return;&#10;&#10;    setLoading(true);&#10;    const response = await apiClient.registrarEntrada({&#10;      placa: formData.placa,&#10;      motorista_id: parseInt(formData.motorista_id),&#10;      peso: currentWeight&#10;    });&#10;&#10;    if (response.data) {&#10;      setFormData({ placa: &quot;&quot;, motorista_id: &quot;&quot;, peso: &quot;&quot; });&#10;      setCurrentWeight(0);&#10;      setVerificationComplete(false);&#10;      loadCiclosAbertos();&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  const handleRegistrarSaida = async (eventoId: number) =&gt; {&#10;    if (!currentWeight) return;&#10;&#10;    setLoading(true);&#10;    const response = await apiClient.registrarSaida({&#10;      evento_id: eventoId,&#10;      peso: currentWeight&#10;    });&#10;&#10;    if (response.data !== undefined) {&#10;      setCurrentWeight(0);&#10;      loadCiclosAbertos();&#10;    }&#10;    setLoading(false);&#10;  };&#10;&#10;  return (&#10;    &lt;main className=&quot;p-4 md:p-6&quot;&gt;&#10;      &lt;div className=&quot;flex flex-col gap-2 mb-6&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-white&quot;&gt;&#10;          Central de Pesagem&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200&quot;&gt;&#10;          Controle e monitoramento das operações de pesagem em tempo real&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;space-y-6&quot;&gt;&#10;        &lt;VideoVerification&#10;          onDriverVerified={handleDriverVerified}&#10;          onPlateDetected={handlePlateDetected}&#10;          onVerificationComplete={handleVerificationComplete}&#10;        /&gt;&#10;&#10;        &lt;Card className=&quot;w-full max-w-none&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 min-h-[600px]&quot;&gt;&#10;            &lt;div className=&quot;border-b lg:border-b-0 lg:border-r border-dashed&quot;&gt;&#10;              &lt;CardHeader&gt;&#10;                &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;                  &lt;ScalesIcon className=&quot;h-5 w-5&quot;/&gt;&#10;                  Controle da Balança&#10;                &lt;/CardTitle&gt;&#10;              &lt;/CardHeader&gt;&#10;              &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 gap-4&quot;&gt;&#10;                  &lt;div className=&quot;sm:col-span-2&quot;&gt;&#10;                    &lt;Label htmlFor=&quot;placa&quot;&gt;Placa do Veículo&lt;/Label&gt;&#10;                    &lt;Input&#10;                      id=&quot;placa&quot;&#10;                      placeholder=&quot;ABC-1234&quot;&#10;                      value={formData.placa}&#10;                      onChange={(e) =&gt; setFormData(prev =&gt; ({ ...prev, placa: e.target.value.toUpperCase() }))}&#10;                      className={cn(&#10;                        formData.placa &amp;&amp; &quot;border-green-500 bg-green-50&quot;&#10;                      )}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;sm:col-span-2&quot;&gt;&#10;                    &lt;Label htmlFor=&quot;driver&quot;&gt;Motorista&lt;/Label&gt;&#10;                    &lt;Select value={formData.motorista_id} onValueChange={(value) =&gt; setFormData(prev =&gt; ({ ...prev, motorista_id: value }))}&gt;&#10;                      &lt;SelectTrigger className={cn(&#10;                        formData.motorista_id &amp;&amp; &quot;border-green-500 bg-green-50&quot;&#10;                      )}&gt;&#10;                        &lt;SelectValue placeholder=&quot;Selecione o motorista&quot;/&gt;&#10;                      &lt;/SelectTrigger&gt;&#10;                      &lt;SelectContent&gt;&#10;                        {motoristas.map((motorista) =&gt; (&#10;                          &lt;SelectItem key={motorista.id} value={motorista.id.toString()}&gt;&#10;                            {motorista.nome}&#10;                          &lt;/SelectItem&gt;&#10;                        ))}&#10;                      &lt;/SelectContent&gt;&#10;                    &lt;/Select&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {verificationComplete &amp;&amp; (&#10;                  &lt;div className=&quot;p-4 bg-green-50 border border-green-200 rounded-lg&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                      &lt;CheckCircleIcon className=&quot;h-5 w-5 text-green-600&quot;/&gt;&#10;                      &lt;span className=&quot;text-green-800 font-medium&quot;&gt;Verificação completa realizada com sucesso!&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                {ciclosAbertos.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;space-y-3&quot;&gt;&#10;                    &lt;Label&gt;Ciclos em Andamento&lt;/Label&gt;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                      {ciclosAbertos.map((ciclo) =&gt; (&#10;                        &lt;div key={ciclo.id_pesagem} className=&quot;flex items-center justify-between p-3 border rounded-lg&quot;&gt;&#10;                          &lt;div&gt;&#10;                            &lt;p className=&quot;font-medium&quot;&gt;{ciclo.placa}&lt;/p&gt;&#10;                            &lt;p className=&quot;text-sm text-gray-500&quot;&gt;{ciclo.motorista}&lt;/p&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;Button&#10;                            size=&quot;sm&quot;&#10;                            variant=&quot;outline&quot;&#10;                            disabled={!isConnected || loading}&#10;                            onClick={() =&gt; handleRegistrarSaida(ciclo.id_pesagem)}&#10;                          &gt;&#10;                            Registrar Saída&#10;                          &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                      ))}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;Button&#10;                  className=&quot;w-full&quot;&#10;                  disabled={!isConnected || !formData.placa || !formData.motorista_id || loading}&#10;                  onClick={handleRegistrarEntrada}&#10;                &gt;&#10;                  {loading ? (&#10;                    &lt;ClockIcon className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;                  ) : isWeighing ? (&#10;                    &lt;SquareIcon className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;                  ) : (&#10;                    &lt;PlayIcon className=&quot;h-4 w-4 mr-2&quot;/&gt;&#10;                  )}&#10;                  {loading ? &quot;Processando...&quot; : &quot;Registrar Entrada&quot;}&#10;                &lt;/Button&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex flex-col&quot;&gt;&#10;              &lt;CardHeader className=&quot;flex-row justify-between items-center&quot;&gt;&#10;                &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;                  &lt;WeightIcon className=&quot;h-5 w-5&quot;/&gt;&#10;                  Balança&#10;                &lt;/CardTitle&gt;&#10;                &lt;Badge&#10;                  variant=&quot;secondary&quot;&#10;                  className={cn(&#10;                    &quot;flex items-center text-xs gap-1&quot;,&#10;                    isConnected&#10;                      ? &quot;bg-green-100 text-green-700&quot;&#10;                      : &quot;bg-red-100 text-red-700&quot;&#10;                  )}&#10;                &gt;&#10;                  &lt;div&#10;                    className={cn(&#10;                      &quot;w-1 h-1 rounded-full&quot;,&#10;                      isConnected ? &quot;bg-green-700&quot; : &quot;bg-red-700&quot;&#10;                    )}&#10;                  /&gt;&#10;                  {isConnected ? &quot;Conectada&quot; : &quot;Desconectada&quot;}&#10;                &lt;/Badge&gt;&#10;              &lt;/CardHeader&gt;&#10;              &lt;CardContent className=&quot;flex flex-col h-full justify-between&quot;&gt;&#10;                &lt;div className=&quot;text-center my-auto&quot;&gt;&#10;                  {!isConnected ? (&#10;                    &lt;&gt;&#10;                      &lt;WeightIcon className=&quot;h-16 w-16 text-gray-300 mx-auto mb-4&quot;/&gt;&#10;                      &lt;p className=&quot;text-gray-500&quot;&gt;Balança desconectada&lt;/p&gt;&#10;                    &lt;/&gt;&#10;                  ) : (&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;p className=&quot;text-4xl md:text-6xl lg:text-7xl font-bold&quot;&gt;{currentWeight} kg&lt;/p&gt;&#10;                      &lt;Input&#10;                        type=&quot;number&quot;&#10;                        placeholder=&quot;Peso manual&quot;&#10;                        value={currentWeight}&#10;                        onChange={(e) =&gt; setCurrentWeight(Number(e.target.value))}&#10;                        className=&quot;text-center text-lg&quot;&#10;                      /&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex flex-col sm:flex-row gap-3 mt-6&quot;&gt;&#10;                  &lt;Button&#10;                    variant=&quot;secondary&quot;&#10;                    className=&quot;flex-1&quot;&#10;                    onClick={() =&gt; setCurrentWeight(0)}&#10;                  &gt;&#10;                    Zerar Peso&#10;                  &lt;/Button&gt;&#10;                  &lt;Button&#10;                    onClick={() =&gt; setIsConnected(!isConnected)}&#10;                    variant={isConnected ? &quot;destructive&quot; : &quot;default&quot;}&#10;                    className={cn(&#10;                      !isConnected &amp;&amp; &quot;bg-green-700 hover:bg-green-700/90&quot;,&#10;                      &quot;flex-1 flex items-center gap-2&quot;&#10;                    )}&#10;                  &gt;&#10;                    {isConnected ? &lt;PlugsIcon className=&quot;h-4 w-4&quot;/&gt; : &lt;PlugsConnectedIcon className=&quot;h-4 w-4&quot;/&gt;}&#10;                    {isConnected ? &quot;Desconectar&quot; : &quot;Conectar Balança&quot;}&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/main&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/filters-card.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/filters-card.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import {&#10;  Select,&#10;  SelectContent,&#10;  SelectItem,&#10;  SelectTrigger,&#10;  SelectValue,&#10;} from &quot;@/components/ui/select&quot;;&#10;import { Filter, X } from &quot;lucide-react&quot;;&#10;&#10;interface FilterState {&#10;  startDate: string;&#10;  endDate: string;&#10;  driver: string;&#10;  company: string;&#10;  cargoType: string;&#10;  plate: string;&#10;}&#10;&#10;interface FiltersCardProps {&#10;  filters: FilterState;&#10;  setFilters: (filters: FilterState) =&gt; void;&#10;  onClearFilters: () =&gt; void;&#10;}&#10;&#10;export function FiltersCard({ filters, setFilters, onClearFilters }: FiltersCardProps) {&#10;  return (&#10;    &lt;Card className=&quot;w-full lg:w-80 h-fit&quot;&gt;&#10;      &lt;CardHeader className=&quot;flex flex-row justify-between pb-4&quot;&gt;&#10;        &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;          &lt;Filter className=&quot;h-5 w-5 text-primary-600&quot; /&gt;&#10;          Filtros&#10;        &lt;/CardTitle&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;startDate&quot;&gt;Data Início&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;startDate&quot;&#10;              type=&quot;date&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.startDate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, startDate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;endDate&quot;&gt;Data Fim&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;endDate&quot;&#10;              type=&quot;date&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.endDate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, endDate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;plate&quot;&gt;Placa do Veículo&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;plate&quot;&#10;              placeholder=&quot;ABC-1234&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.plate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, plate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;driver-filter&quot;&gt;Motorista&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;driver-filter&quot;&#10;              placeholder=&quot;Nome do motorista&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.driver}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, driver: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;company-filter&quot;&gt;Empresa&lt;/Label&gt;&#10;            &lt;Select value={filters.company} onValueChange={(value) =&gt; setFilters({ ...filters, company: value })}&gt;&#10;              &lt;SelectTrigger className=&quot;mt-1&quot;&gt;&#10;                &lt;SelectValue placeholder=&quot;Todas as empresas&quot; /&gt;&#10;              &lt;/SelectTrigger&gt;&#10;              &lt;SelectContent&gt;&#10;                &lt;SelectItem value=&quot;all&quot;&gt;Todas as empresas&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Agro Brasil Ltda&quot;&gt;Agro Brasil Ltda&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Transportes Campo&quot;&gt;Transportes Campo&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Rural Express&quot;&gt;Rural Express&lt;/SelectItem&gt;&#10;              &lt;/SelectContent&gt;&#10;            &lt;/Select&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;cargo-filter&quot;&gt;Tipo de Carga&lt;/Label&gt;&#10;            &lt;Select value={filters.cargoType} onValueChange={(value) =&gt; setFilters({ ...filters, cargoType: value })}&gt;&#10;              &lt;SelectTrigger className=&quot;mt-1&quot;&gt;&#10;                &lt;SelectValue placeholder=&quot;Todos os tipos&quot; /&gt;&#10;              &lt;/SelectTrigger&gt;&#10;              &lt;SelectContent&gt;&#10;                &lt;SelectItem value=&quot;all&quot;&gt;Todos os tipos&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Soja&quot;&gt;Soja&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Milho&quot;&gt;Milho&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Fertilizante&quot;&gt;Fertilizante&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Ração&quot;&gt;Ração&lt;/SelectItem&gt;&#10;              &lt;/SelectContent&gt;&#10;            &lt;/Select&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;outline&quot;&#10;            onClick={onClearFilters}&#10;            className=&quot;w-full&quot;&#10;          &gt;&#10;            &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Limpar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/history-header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/history-header.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Download } from &quot;lucide-react&quot;;&#10;&#10;interface WeighingHistoryHeaderProps {&#10;  onExport: () =&gt; void;&#10;}&#10;&#10;export default function Component({ onExport }: WeighingHistoryHeaderProps) {&#10;  return (&#10;    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;      &lt;div&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold  text-white&quot;&gt;&#10;          Histórico de Pesagens&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#10;          Consulte o histórico completo de pesagens&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;Button className=&quot;bg-primary-900 hover:bg-primary-900/70&quot; onClick={onExport}&gt;&#10;        &lt;Download className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;        Exportar&#10;      &lt;/Button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;export default function Component() {&#13;&#10;  return (&#13;&#10;    &lt;div&gt;&#13;&#10;      &lt;div&gt;&#13;&#10;        &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#13;&#10;          Histórico de Pesagens&#13;&#10;        &lt;/h1&gt;&#13;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#13;&#10;          Consulte o histórico completo de pesagens&#13;&#10;        &lt;/p&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/weighing-history-header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/weighing-history-header.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Download } from &quot;lucide-react&quot;;&#10;&#10;interface WeighingHistoryHeaderProps {&#10;  onExport: () =&gt; void;&#10;}&#10;&#10;export function WeighingHistoryHeader({ onExport }: WeighingHistoryHeaderProps) {&#10;  return (&#10;    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;      &lt;div&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#10;          Histórico de Pesagens&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#10;          Consulte o histórico completo de pesagens&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;Button className=&quot;bg-primary-900 hover:bg-primary-900/70&quot; onClick={onExport}&gt;&#10;        &lt;Download className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;        Exportar&#10;      &lt;/Button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/weighing-table.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/weighing-table.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from &quot;@/components/ui/table&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import {&#10;  Weight,&#10;  CheckCircle,&#10;  Clock,&#10;  ChevronUp,&#10;  ChevronDown,&#10;  ChevronsUpDown,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;&#10;interface WeighingRecord {&#10;  id: number;&#10;  date: string;&#10;  time: string;&#10;  plate: string;&#10;  driver: string;&#10;  company: string;&#10;  cargo: string;&#10;  entryWeight: string;&#10;  exitWeight: string;&#10;  netWeight: string;&#10;  status: string;&#10;}&#10;&#10;interface SortConfig {&#10;  key: string;&#10;  direction: &quot;asc&quot; | &quot;desc&quot;;&#10;}&#10;&#10;interface WeighingTableProps {&#10;  records: WeighingRecord[];&#10;  sortConfig: SortConfig;&#10;  onSort: (key: string) =&gt; void;&#10;}&#10;&#10;const tableCols = [&#10;  { label: &quot;Data/Hora&quot;, key: &quot;date&quot; },&#10;  { label: &quot;Caminhão&quot;, key: &quot;plate&quot; },&#10;  { label: &quot;Motorista&quot;, key: &quot;driver&quot; },&#10;  { label: &quot;Empresa&quot;, key: &quot;company&quot; },&#10;  { label: &quot;Carga&quot;, key: &quot;cargo&quot; },&#10;  { label: &quot;Entrada (kg)&quot;, key: &quot;entryWeight&quot; },&#10;  { label: &quot;Saída (kg)&quot;, key: &quot;exitWeight&quot; },&#10;  { label: &quot;Líquido (kg)&quot;, key: &quot;netWeight&quot; },&#10;  { label: &quot;Status&quot;, key: &quot;status&quot; },&#10;];&#10;&#10;export function WeighingTable({ records, sortConfig, onSort }: WeighingTableProps) {&#10;  const getSortIcon = (columnKey: string) =&gt; {&#10;    if (sortConfig.key !== columnKey) {&#10;      return &lt;ChevronsUpDown className=&quot;h-4 w-4 text-gray-400&quot; /&gt;;&#10;    }&#10;    return sortConfig.direction === &quot;asc&quot; &#10;      ? &lt;ChevronUp className=&quot;h-4 w-4 text-primary-600&quot; /&gt;&#10;      : &lt;ChevronDown className=&quot;h-4 w-4 text-primary-600&quot; /&gt;;&#10;  };&#10;&#10;  return (&#10;    &lt;Card className=&quot;flex-1&quot;&gt;&#10;      &lt;CardHeader&gt;&#10;        &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;          &lt;Weight className=&quot;h-5 w-5 text-primary-600&quot; /&gt;&#10;          Registros de Pesagem&#10;        &lt;/CardTitle&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent&gt;&#10;        &lt;div className=&quot;overflow-x-auto rounded-2xl&quot;&gt;&#10;          &lt;Table&gt;&#10;            &lt;TableHeader&gt;&#10;              &lt;TableRow&gt;&#10;                {tableCols.map((col, index) =&gt; (&#10;                  &lt;TableHead &#10;                    key={index} &#10;                    className=&quot;cursor-pointer hover:bg-gray-50 select-none&quot;&#10;                    onClick={() =&gt; onSort(col.key)}&#10;                  &gt;&#10;                    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                      {col.label}&#10;                      {getSortIcon(col.key)}&#10;                    &lt;/div&gt;&#10;                  &lt;/TableHead&gt;&#10;                ))}&#10;              &lt;/TableRow&gt;&#10;            &lt;/TableHeader&gt;&#10;            &lt;TableBody&gt;&#10;              {records.map((record) =&gt; (&#10;                &lt;TableRow key={record.id}&gt;&#10;                  &lt;TableCell&gt;&#10;                    &lt;div className=&quot;text-sm&quot;&gt;&#10;                      &lt;div className=&quot;font-medium&quot;&gt;{record.date}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-gray-500&quot;&gt;{record.time}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;&#10;                    {record.plate}&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.driver}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.company}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.cargo}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.entryWeight}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.exitWeight}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;&#10;                    {record.netWeight}&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;&#10;                    &lt;Badge&#10;                      variant=&quot;secondary&quot;&#10;                      className={cn(&#10;                        &quot;flex items-center w-fit space-x-1&quot;,&#10;                        record.status === &quot;Concluído&quot;&#10;                        ? &quot;bg-green-100 text-green-700&quot;&#10;                        : &quot;bg-amber-100 text-amber-700&quot;&#10;                      )}&#10;                    &gt;&#10;                      &lt;span&gt;&#10;                        {record.status}&#10;                      &lt;/span&gt;&#10;                      {&#10;                        record.status === &quot;Concluído&quot;&#10;                          ? &lt;CheckCircle className=&quot;w-4 h-4&quot;/&gt;&#10;                          : &lt;Clock className=&quot;w-4 h-4&quot;/&gt;&#10;                      }&#10;                    &lt;/Badge&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))}&#10;            &lt;/TableBody&gt;&#10;          &lt;/Table&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/icons/WeightIcon.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/icons/WeightIcon.tsx" />
              <option name="originalContent" value="import { forwardRef, ReactElement } from &quot;react&quot;;&#10;import { Icon, IconBase, IconWeight } from &quot;@phosphor-icons/react&quot;;&#10;&#10;const weights = new Map&lt;IconWeight, ReactElement&gt;([&#10;  [&#10;    &quot;bold&quot;,&#10;    &lt;path d=&quot;M264-216h432l-49-360H313l-49 360Zm216-432q20.4 0 34.2-13.8Q528-675.6 528-696q0-20.4-13.8-34.2Q500.4-744 480-744q-20.4 0-34.2 13.8Q432-716.4 432-696q0 20.4 13.8 34.2Q459.6-648 480-648Zm110 0h57q27.16 0 47.08 17.5Q714-613 718-586l49 360q5 32.44-16.39 57.22Q729.23-144 695.95-144H264.28q-33.28 0-54.78-24.78T193-226l49-360q4-27 23.92-44.5T313-648h57q-5-11-7.5-23t-2.5-25q0-50 35-85t85-35q50 0 85 35t35 85q0 13-2.5 25t-7.5 23ZM264-216h432-432Z&quot;/&gt;&#10;  ],&#10;  [&#10;    &quot;fill&quot;,&#10;    &lt;path d=&quot;M480-648q20.4 0 34.2-13.8Q528-675.6 528-696q0-20.4-13.8-34.2Q500.4-744 480-744q-20.4 0-34.2 13.8Q432-716.4 432-696q0 20.4 13.8 34.2Q459.6-648 480-648Zm110 0h57q27.16 0 47.08 17.5Q714-613 718-586l49 360q5 32.44-16.39 57.22Q729.23-144 695.95-144H264.28q-33.28 0-54.78-24.78T193-226l49-360q4-27 23.92-44.5T313-648h57q-5-11-7.5-23t-2.5-25q0-50 35-85t85-35q50 0 85 35t35 85q0 13-2.5 25t-7.5 23Z&quot;/&gt;&#10;  ],&#10;]);&#10;&#10;const WeightIcon: Icon = forwardRef((props, ref) =&gt; (&#10;  &lt;IconBase ref={ref} {...props} weights={weights} /&gt;&#10;));&#10;&#10;WeightIcon.displayName = &quot;WeightIcon&quot;;&#10;&#10;export default WeightIcon;" />
              <option name="updatedContent" value="import { forwardRef, ReactElement } from &quot;react&quot;;&#10;import { Icon, IconBase, IconWeight } from &quot;@phosphor-icons/react&quot;;&#10;&#10;const weights = new Map&lt;IconWeight, ReactElement&gt;([&#10;  [&#10;    &quot;bold&quot;,&#10;    &lt;path d=&quot;M200,208a8,8,0,0,1-8,8H64a8,8,0,0,1-7.69-9.89l14.81-64A16,16,0,0,1,86.58,136H120V128a40,40,0,0,1,80,0v8h33.42a16,16,0,0,1,15.46,6.11l14.81,64A8,8,0,0,1,256,216H208A8,8,0,0,1,200,208ZM80.58,152l-9.26,48H184.68l-9.26-48ZM184,128v8H72v-8a56,56,0,0,1,112,0Zm-56-40a24,24,0,0,0-24,24v8h48v-8A24,24,0,0,0,128,88Z&quot;/&gt;&#10;  ],&#10;  [&#10;    &quot;fill&quot;,&#10;    &lt;path d=&quot;M200,208a8,8,0,0,1-8,8H64a8,8,0,0,1-7.69-9.89l14.81-64A16,16,0,0,1,86.58,136H200a16,16,0,0,1,15.46,6.11l14.81,64A8,8,0,0,1,256,216H208A8,8,0,0,1,200,208ZM128,88a24,24,0,0,0-24,24v24h48V112A24,24,0,0,0,128,88Z&quot;/&gt;&#10;  ],&#10;  [&#10;    &quot;light&quot;,&#10;    &lt;path d=&quot;M200,210a6,6,0,0,1-6,6H62a6,6,0,0,1-5.77-7.42l14.81-64A14,14,0,0,1,84.58,138H122V128a34,34,0,0,1,68,0v10h37.42a14,14,0,0,1,13.54,5.58l14.81,64A6,6,0,0,1,250,216H206A6,6,0,0,1,200,210ZM78.44,154l-10.67,50H188.23l-10.67-50ZM178,128v10H78V128a50,50,0,0,1,100,0Zm-50-38a22,22,0,0,0-22,22v10h44V112A22,22,0,0,0,128,90Z&quot;/&gt;&#10;  ],&#10;  [&#10;    &quot;regular&quot;,&#10;    &lt;path d=&quot;M200,208a8,8,0,0,1-8,8H64a8,8,0,0,1-7.69-9.89l14.81-64A16,16,0,0,1,86.58,136H120V128a40,40,0,0,1,80,0v8h33.42a16,16,0,0,1,15.46,6.11l14.81,64A8,8,0,0,1,256,216H208A8,8,0,0,1,200,208ZM80.58,152l-9.26,48H184.68l-9.26-48ZM184,128v8H72v-8a56,56,0,0,1,112,0Zm-56-40a24,24,0,0,0-24,24v8h48v-8A24,24,0,0,0,128,88Z&quot;/&gt;&#10;  ],&#10;  [&#10;    &quot;thin&quot;,&#10;    &lt;path d=&quot;M200,212a4,4,0,0,1-4,4H60a4,4,0,0,1-3.85-4.95l14.81-64A12,12,0,0,1,82.58,140H124V128a32,32,0,0,1,64,0v12h41.42a12,12,0,0,1,11.62,7.05l14.81,64A4,4,0,0,1,252,216H208A4,4,0,0,1,200,212ZM76.29,156L65.14,208H190.86l-11.15-52ZM180,128v12H76V128a52,52,0,0,1,104,0Zm-52-36a20,20,0,0,0-20,20v12h40V112A20,20,0,0,0,128,92Z&quot;/&gt;&#10;  ],&#10;  [&#10;    &quot;duotone&quot;,&#10;    &lt;path d=&quot;M256,208l-14.81-64H86.58L71.77,208Z&quot; opacity=&quot;0.2&quot;/&gt;,&#10;    &lt;path d=&quot;M200,208a8,8,0,0,1-8,8H64a8,8,0,0,1-7.69-9.89l14.81-64A16,16,0,0,1,86.58,136H120V128a40,40,0,0,1,80,0v8h33.42a16,16,0,0,1,15.46,6.11l14.81,64A8,8,0,0,1,256,216H208A8,8,0,0,1,200,208ZM80.58,152l-9.26,48H184.68l-9.26-48ZM184,128v8H72v-8a56,56,0,0,1,112,0Zm-56-40a24,24,0,0,0-24,24v8h48v-8A24,24,0,0,0,128,88Z&quot;/&gt;&#10;  ],&#10;]);&#10;&#10;const WeightIcon: Icon = forwardRef((props, ref) =&gt; (&#10;  &lt;IconBase ref={ref} {...props} weights={weights} /&gt;&#10;));&#10;&#10;WeightIcon.displayName = &quot;WeightIcon&quot;;&#10;&#10;export default WeightIcon;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/layout/sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/layout/sidebar.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Fragment, useState, useEffect } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { Dialog } from &quot;@radix-ui/react-dialog&quot;;&#10;import { Transition } from &quot;@headlessui/react&quot;;&#10;import {&#10;  LayoutDashboard,&#10;  Weight,&#10;  History,&#10;  Truck,&#10;  IdCardLanyard,&#10;  Handshake,&#10;  Settings,&#10;  X, LucideIcon,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface NavItem {&#10;  name: string;&#10;  href: string;&#10;  icon: LucideIcon;&#10;}&#10;&#10;const navigation: NavItem[] = [&#10;  { name: &quot;Dashboard&quot;, href: &quot;/&quot;, icon: LayoutDashboard },&#10;  { name: &quot;Pesagem Ativa&quot;, href: &quot;/weighing&quot;, icon: Weight },&#10;  { name: &quot;Histórico&quot;, href: &quot;/history&quot;, icon: History },&#10;  { name: &quot;Frota&quot;, href: &quot;/fleet&quot;, icon: Truck },&#10;  { name: &quot;Motoristas&quot;, href: &quot;/drivers&quot;, icon: IdCardLanyard },&#10;  { name: &quot;Parceiros&quot;, href: &quot;/partners&quot;, icon: Handshake },&#10;];&#10;&#10;const systemNavigation: NavItem[] = [&#10;  { name: &quot;Configurações&quot;, href: &quot;/settings&quot;, icon: Settings },&#10;];&#10;&#10;interface SidebarProps {&#10;  open: boolean;&#10;  setOpen: (open: boolean) =&gt; void;&#10;}&#10;&#10;export function Sidebar({ open, setOpen }: SidebarProps) {&#10;  const pathname = usePathname();&#10;&#10;  const selectedLinkIndex = navigation.findIndex((item) =&gt; item.href === pathname);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;teste&quot;)&#10;  }, [])&#10;&#10;  const NavItem = ({item} : {item: NavItem}) =&gt; {&#10;    return (&#10;      &lt;Link&#10;        href={item.href}&#10;        className={cn(&#10;          &quot;flex items-center gap-x-3 py-3.5 px-6&quot;,&#10;          &quot;text-sm leading-6 text-gray-700&quot;,&#10;          &quot;transition-colors group&quot;,&#10;          &quot;hover:text-black hover:bg-gray-100&quot;,&#10;          pathname === item.href &amp;&amp; &quot;text-primary-600&quot;&#10;        )}&#10;      &gt;&#10;        &lt;item.icon&#10;          className={cn(&#10;            pathname === item.href&#10;              ? &quot;text-primary-600&quot;&#10;              : &quot;text-gray-400 group-hover:text-black&quot;,&#10;            &quot;h-5 w-5 shrink-0 transition-colors&quot;&#10;          )}&#10;          aria-hidden=&quot;true&quot;&#10;        /&gt;&#10;        {item.name}&#10;      &lt;/Link&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col w-[230px] z-20 fixed min-h-screen gap-y-7 bg-white shadow-lg&quot;&gt;&#10;      &lt;div className=&quot;flex items-center gap-3 px-6 pt-4 shrink-0&quot;&gt;&#10;        &lt;Image&#10;          src=&quot;/images/logo.png&quot;&#10;          alt=&quot;Logo&quot;&#10;          width={74}&#10;          height={74}&#10;          className=&quot;h-10 w-auto&quot;&#10;        /&gt;&#10;        &lt;div className=&quot;flex flex-col&quot;&gt;&#10;          &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;Semensol&lt;/h1&gt;&#10;          &lt;p className=&quot;text-xs text-gray-500 font-medium&quot;&gt;Sistema de pesagem&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;nav className=&quot;flex flex-col h-full gap-y-7 relative&quot;&gt;&#10;        &lt;div&#10;          style={{&#10;            top: selectedLinkIndex === 0 ? 32 : (52 * selectedLinkIndex) + 32&#10;          }}&#10;          className=&quot;&#10;            absolute bg-primary-100 w-full h-[52px]&#10;            border-l-4 border-primary-500&#10;            transition-all duration-300&#10;            z-0&#10;          &quot;&#10;        /&gt;&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            OPERAÇÕES&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {navigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mt-auto&quot;&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            SISTEMA&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {systemNavigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;      &lt;div className=&quot;flex flex-col mt-auto&quot;&gt;&#10;        &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;          STATUS&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center gap-3 mb-2 mt-auto px-6 py-4&quot;&gt;&#10;          &lt;div className=&quot;h-2 w-2 rounded-full bg-green-500&quot;&gt;&lt;/div&gt;&#10;          &lt;span className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;            Sistema Online&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Fragment, useState, useEffect } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { Dialog } from &quot;@radix-ui/react-dialog&quot;;&#10;import { Transition } from &quot;@headlessui/react&quot;;&#10;import {&#10;  LayoutDashboard,&#10;  Weight,&#10;  History,&#10;  Truck,&#10;  IdCardLanyard,&#10;  Handshake,&#10;  Settings,&#10;  X, LucideIcon,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface NavItem {&#10;  name: string;&#10;  href: string;&#10;  icon: LucideIcon;&#10;}&#10;&#10;const navigation: NavItem[] = [&#10;  { name: &quot;Dashboard&quot;, href: &quot;/&quot;, icon: LayoutDashboard },&#10;  { name: &quot;Pesagem Ativa&quot;, href: &quot;/weighing&quot;, icon: Weight },&#10;  { name: &quot;Histórico&quot;, href: &quot;/history&quot;, icon: History },&#10;  { name: &quot;Frota&quot;, href: &quot;/fleet&quot;, icon: Truck },&#10;  { name: &quot;Motoristas&quot;, href: &quot;/drivers&quot;, icon: IdCardLanyard },&#10;  { name: &quot;Parceiros&quot;, href: &quot;/partners&quot;, icon: Handshake },&#10;];&#10;&#10;const systemNavigation: NavItem[] = [&#10;  { name: &quot;Configurações&quot;, href: &quot;/settings&quot;, icon: Settings },&#10;];&#10;&#10;interface SidebarProps {&#10;  open: boolean;&#10;  setOpen: (open: boolean) =&gt; void;&#10;}&#10;&#10;export function Sidebar({ open, setOpen }: SidebarProps) {&#10;  const pathname = usePathname();&#10;&#10;  const selectedLinkIndex = navigation.findIndex((item) =&gt; item.href === pathname);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;teste&quot;)&#10;  }, [])&#10;&#10;  const NavItem = ({item} : {item: NavItem}) =&gt; {&#10;    return (&#10;      &lt;Link&#10;        href={item.href}&#10;        className={cn(&#10;          &quot;flex items-center gap-x-3 py-3.5 px-6&quot;,&#10;          &quot;text-sm leading-6 text-gray-700&quot;,&#10;          &quot;transition-colors group&quot;,&#10;          &quot;hover:text-black hover:bg-gray-100&quot;,&#10;          pathname === item.href &amp;&amp; &quot;text-primary-600&quot;&#10;        )}&#10;      &gt;&#10;        &lt;item.icon&#10;          className={cn(&#10;            pathname === item.href&#10;              ? &quot;text-primary-600&quot;&#10;              : &quot;text-gray-400 group-hover:text-black&quot;,&#10;            &quot;h-5 w-5 shrink-0 transition-colors&quot;&#10;          )}&#10;          aria-hidden=&quot;true&quot;&#10;        /&gt;&#10;        {item.name}&#10;      &lt;/Link&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col w-[230px] z-20 fixed min-h-screen gap-y-7 bg-white shadow-lg&quot;&gt;&#10;      &lt;div className=&quot;flex items-center gap-3 px-6 pt-4 shrink-0&quot;&gt;&#10;        &lt;Image&#10;          src=&quot;/images/logo.png&quot;&#10;          alt=&quot;Logo&quot;&#10;          width={74}&#10;          height={74}&#10;          className=&quot;h-10 w-auto&quot;&#10;        /&gt;&#10;        &lt;div className=&quot;flex flex-col&quot;&gt;&#10;          &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;Semensol&lt;/h1&gt;&#10;          &lt;p className=&quot;text-xs text-gray-500 font-medium&quot;&gt;Sistema de pesagem&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;nav className=&quot;flex flex-col h-full gap-y-7 relative&quot;&gt;&#10;        &lt;div&#10;          style={{&#10;            top: selectedLinkIndex === 0 ? 32 : (52 * selectedLinkIndex) + 32&#10;          }}&#10;          className=&quot;&#10;            absolute bg-primary-100 w-full h-[52px]&#10;            border-l-4 border-primary-500&#10;            transition-all duration-300&#10;            z-0&#10;          &quot;&#10;        /&gt;&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            OPERAÇÕES&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {navigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mt-auto&quot;&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            SISTEMA&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {systemNavigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;      &lt;div className=&quot;flex flex-col mt-auto&quot;&gt;&#10;        &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;          STATUS&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center gap-3 mb-2 mt-auto px-6 py-4&quot;&gt;&#10;          &lt;div className=&quot;h-2 w-2 rounded-full bg-green-500&quot;&gt;&lt;/div&gt;&#10;          &lt;span className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;            Sistema Online&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/accordion.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/accordion.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as AccordionPrimitive from '@radix-ui/react-accordion';&#10;import { ChevronDown } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Accordion = AccordionPrimitive.Root;&#10;&#10;const AccordionItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Item&#10;    ref={ref}&#10;    className={cn('border-b', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;AccordionItem.displayName = 'AccordionItem';&#10;&#10;const AccordionTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Trigger&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Header className=&quot;flex&quot;&gt;&#10;    &lt;AccordionPrimitive.Trigger&#10;      ref={ref}&#10;      className={cn(&#10;        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&amp;[data-state=open]&gt;svg]:rotate-180',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;ChevronDown className=&quot;h-4 w-4 shrink-0 transition-transform duration-200&quot; /&gt;&#10;    &lt;/AccordionPrimitive.Trigger&gt;&#10;  &lt;/AccordionPrimitive.Header&gt;&#10;));&#10;AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;&#10;&#10;const AccordionContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Content&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Content&#10;    ref={ref}&#10;    className=&quot;overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down&quot;&#10;    {...props}&#10;  &gt;&#10;    &lt;div className={cn('pb-4 pt-0', className)}&gt;{children}&lt;/div&gt;&#10;  &lt;/AccordionPrimitive.Content&gt;&#10;));&#10;&#10;AccordionContent.displayName = AccordionPrimitive.Content.displayName;&#10;&#10;export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as AccordionPrimitive from '@radix-ui/react-accordion';&#10;import { ChevronDownIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Accordion = AccordionPrimitive.Root;&#10;&#10;const AccordionItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Item&#10;    ref={ref}&#10;    className={cn('border-b', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;AccordionItem.displayName = 'AccordionItem';&#10;&#10;const AccordionTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Trigger&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Header className=&quot;flex&quot;&gt;&#10;    &lt;AccordionPrimitive.Trigger&#10;      ref={ref}&#10;      className={cn(&#10;        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&amp;[data-state=open]&gt;svg]:rotate-180',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;ChevronDownIcon className=&quot;h-4 w-4 shrink-0 transition-transform duration-200&quot; /&gt;&#10;    &lt;/AccordionPrimitive.Trigger&gt;&#10;  &lt;/AccordionPrimitive.Header&gt;&#10;));&#10;AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;&#10;&#10;const AccordionContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof AccordionPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof AccordionPrimitive.Content&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;AccordionPrimitive.Content&#10;    ref={ref}&#10;    className=&quot;overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down&quot;&#10;    {...props}&#10;  &gt;&#10;    &lt;div className={cn('pb-4 pt-0', className)}&gt;{children}&lt;/div&gt;&#10;  &lt;/AccordionPrimitive.Content&gt;&#10;));&#10;&#10;AccordionContent.displayName = AccordionPrimitive.Content.displayName;&#10;&#10;export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/breadcrumb.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/breadcrumb.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import { Slot } from '@radix-ui/react-slot';&#10;import { ChevronRight, MoreHorizontal } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Breadcrumb = React.forwardRef&lt;&#10;  HTMLElement,&#10;  React.ComponentPropsWithoutRef&lt;'nav'&gt; &amp; {&#10;    separator?: React.ReactNode;&#10;  }&#10;&gt;(({ ...props }, ref) =&gt; &lt;nav ref={ref} aria-label=&quot;breadcrumb&quot; {...props} /&gt;);&#10;Breadcrumb.displayName = 'Breadcrumb';&#10;&#10;const BreadcrumbList = React.forwardRef&lt;&#10;  HTMLOListElement,&#10;  React.ComponentPropsWithoutRef&lt;'ol'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ol&#10;    ref={ref}&#10;    className={cn(&#10;      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbList.displayName = 'BreadcrumbList';&#10;&#10;const BreadcrumbItem = React.forwardRef&lt;&#10;  HTMLLIElement,&#10;  React.ComponentPropsWithoutRef&lt;'li'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;li&#10;    ref={ref}&#10;    className={cn('inline-flex items-center gap-1.5', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbItem.displayName = 'BreadcrumbItem';&#10;&#10;const BreadcrumbLink = React.forwardRef&lt;&#10;  HTMLAnchorElement,&#10;  React.ComponentPropsWithoutRef&lt;'a'&gt; &amp; {&#10;    asChild?: boolean;&#10;  }&#10;&gt;(({ asChild, className, ...props }, ref) =&gt; {&#10;  const Comp = asChild ? Slot : 'a';&#10;&#10;  return (&#10;    &lt;Comp&#10;      ref={ref}&#10;      className={cn('transition-colors hover:text-foreground', className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;BreadcrumbLink.displayName = 'BreadcrumbLink';&#10;&#10;const BreadcrumbPage = React.forwardRef&lt;&#10;  HTMLSpanElement,&#10;  React.ComponentPropsWithoutRef&lt;'span'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;span&#10;    ref={ref}&#10;    role=&quot;link&quot;&#10;    aria-disabled=&quot;true&quot;&#10;    aria-current=&quot;page&quot;&#10;    className={cn('font-normal text-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbPage.displayName = 'BreadcrumbPage';&#10;&#10;const BreadcrumbSeparator = ({&#10;  children,&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'li'&gt;) =&gt; (&#10;  &lt;li&#10;    role=&quot;presentation&quot;&#10;    aria-hidden=&quot;true&quot;&#10;    className={cn('[&amp;&gt;svg]:size-3.5', className)}&#10;    {...props}&#10;  &gt;&#10;    {children ?? &lt;ChevronRight /&gt;}&#10;  &lt;/li&gt;&#10;);&#10;BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';&#10;&#10;const BreadcrumbEllipsis = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'span'&gt;) =&gt; (&#10;  &lt;span&#10;    role=&quot;presentation&quot;&#10;    aria-hidden=&quot;true&quot;&#10;    className={cn('flex h-9 w-9 items-center justify-center', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span className=&quot;sr-only&quot;&gt;More&lt;/span&gt;&#10;  &lt;/span&gt;&#10;);&#10;BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';&#10;&#10;export {&#10;  Breadcrumb,&#10;  BreadcrumbList,&#10;  BreadcrumbItem,&#10;  BreadcrumbLink,&#10;  BreadcrumbPage,&#10;  BreadcrumbSeparator,&#10;  BreadcrumbEllipsis,&#10;};&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import { Slot } from '@radix-ui/react-slot';&#10;import { ChevronRightIcon, MoreHorizontalIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Breadcrumb = React.forwardRef&lt;&#10;  HTMLElement,&#10;  React.ComponentPropsWithoutRef&lt;'nav'&gt; &amp; {&#10;    separator?: React.ReactNode;&#10;  }&#10;&gt;(({ ...props }, ref) =&gt; &lt;nav ref={ref} aria-label=&quot;breadcrumb&quot; {...props} /&gt;);&#10;Breadcrumb.displayName = 'Breadcrumb';&#10;&#10;const BreadcrumbList = React.forwardRef&lt;&#10;  HTMLOListElement,&#10;  React.ComponentPropsWithoutRef&lt;'ol'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ol&#10;    ref={ref}&#10;    className={cn(&#10;      'flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbList.displayName = 'BreadcrumbList';&#10;&#10;const BreadcrumbItem = React.forwardRef&lt;&#10;  HTMLLIElement,&#10;  React.ComponentPropsWithoutRef&lt;'li'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;li&#10;    ref={ref}&#10;    className={cn('inline-flex items-center gap-1.5', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbItem.displayName = 'BreadcrumbItem';&#10;&#10;const BreadcrumbLink = React.forwardRef&lt;&#10;  HTMLAnchorElement,&#10;  React.ComponentPropsWithoutRef&lt;'a'&gt; &amp; {&#10;    asChild?: boolean;&#10;  }&#10;&gt;(({ asChild, className, ...props }, ref) =&gt; {&#10;  const Comp = asChild ? Slot : 'a';&#10;&#10;  return (&#10;    &lt;Comp&#10;      ref={ref}&#10;      className={cn('transition-colors hover:text-foreground', className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;BreadcrumbLink.displayName = 'BreadcrumbLink';&#10;&#10;const BreadcrumbPage = React.forwardRef&lt;&#10;  HTMLSpanElement,&#10;  React.ComponentPropsWithoutRef&lt;'span'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;span&#10;    ref={ref}&#10;    role=&quot;link&quot;&#10;    aria-disabled=&quot;true&quot;&#10;    aria-current=&quot;page&quot;&#10;    className={cn('font-normal text-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;BreadcrumbPage.displayName = 'BreadcrumbPage';&#10;&#10;const BreadcrumbSeparator = ({&#10;  children,&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'li'&gt;) =&gt; (&#10;  &lt;li&#10;    role=&quot;presentation&quot;&#10;    aria-hidden=&quot;true&quot;&#10;    className={cn('[&amp;&gt;svg]:size-3.5', className)}&#10;    {...props}&#10;  &gt;&#10;    {children ?? &lt;ChevronRightIcon /&gt;}&#10;  &lt;/li&gt;&#10;);&#10;BreadcrumbSeparator.displayName = 'BreadcrumbSeparator';&#10;&#10;const BreadcrumbEllipsis = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'span'&gt;) =&gt; (&#10;  &lt;span&#10;    role=&quot;presentation&quot;&#10;    aria-hidden=&quot;true&quot;&#10;    className={cn('flex h-9 w-9 items-center justify-center', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;MoreHorizontalIcon className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span className=&quot;sr-only&quot;&gt;More&lt;/span&gt;&#10;  &lt;/span&gt;&#10;);&#10;BreadcrumbEllipsis.displayName = 'BreadcrumbElipssis';&#10;&#10;export {&#10;  Breadcrumb,&#10;  BreadcrumbList,&#10;  BreadcrumbItem,&#10;  BreadcrumbLink,&#10;  BreadcrumbPage,&#10;  BreadcrumbSeparator,&#10;  BreadcrumbEllipsis,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/carousel.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/carousel.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import useEmblaCarousel, {&#10;  type UseEmblaCarouselType,&#10;} from 'embla-carousel-react';&#10;import { ArrowLeft, ArrowRight } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { Button } from '@/components/ui/button';&#10;&#10;type CarouselApi = UseEmblaCarouselType[1];&#10;type UseCarouselParameters = Parameters&lt;typeof useEmblaCarousel&gt;;&#10;type CarouselOptions = UseCarouselParameters[0];&#10;type CarouselPlugin = UseCarouselParameters[1];&#10;&#10;type CarouselProps = {&#10;  opts?: CarouselOptions;&#10;  plugins?: CarouselPlugin;&#10;  orientation?: 'horizontal' | 'vertical';&#10;  setApi?: (api: CarouselApi) =&gt; void;&#10;};&#10;&#10;type CarouselContextProps = {&#10;  carouselRef: ReturnType&lt;typeof useEmblaCarousel&gt;[0];&#10;  api: ReturnType&lt;typeof useEmblaCarousel&gt;[1];&#10;  scrollPrev: () =&gt; void;&#10;  scrollNext: () =&gt; void;&#10;  canScrollPrev: boolean;&#10;  canScrollNext: boolean;&#10;} &amp; CarouselProps;&#10;&#10;const CarouselContext = React.createContext&lt;CarouselContextProps | null&gt;(null);&#10;&#10;function useCarousel() {&#10;  const context = React.useContext(CarouselContext);&#10;&#10;  if (!context) {&#10;    throw new Error('useCarousel must be used within a &lt;Carousel /&gt;');&#10;  }&#10;&#10;  return context;&#10;}&#10;&#10;const Carousel = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; CarouselProps&#10;&gt;(&#10;  (&#10;    {&#10;      orientation = 'horizontal',&#10;      opts,&#10;      setApi,&#10;      plugins,&#10;      className,&#10;      children,&#10;      ...props&#10;    },&#10;    ref&#10;  ) =&gt; {&#10;    const [carouselRef, api] = useEmblaCarousel(&#10;      {&#10;        ...opts,&#10;        axis: orientation === 'horizontal' ? 'x' : 'y',&#10;      },&#10;      plugins&#10;    );&#10;    const [canScrollPrev, setCanScrollPrev] = React.useState(false);&#10;    const [canScrollNext, setCanScrollNext] = React.useState(false);&#10;&#10;    const onSelect = React.useCallback((api: CarouselApi) =&gt; {&#10;      if (!api) {&#10;        return;&#10;      }&#10;&#10;      setCanScrollPrev(api.canScrollPrev());&#10;      setCanScrollNext(api.canScrollNext());&#10;    }, []);&#10;&#10;    const scrollPrev = React.useCallback(() =&gt; {&#10;      api?.scrollPrev();&#10;    }, [api]);&#10;&#10;    const scrollNext = React.useCallback(() =&gt; {&#10;      api?.scrollNext();&#10;    }, [api]);&#10;&#10;    const handleKeyDown = React.useCallback(&#10;      (event: React.KeyboardEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;        if (event.key === 'ArrowLeft') {&#10;          event.preventDefault();&#10;          scrollPrev();&#10;        } else if (event.key === 'ArrowRight') {&#10;          event.preventDefault();&#10;          scrollNext();&#10;        }&#10;      },&#10;      [scrollPrev, scrollNext]&#10;    );&#10;&#10;    React.useEffect(() =&gt; {&#10;      if (!api || !setApi) {&#10;        return;&#10;      }&#10;&#10;      setApi(api);&#10;    }, [api, setApi]);&#10;&#10;    React.useEffect(() =&gt; {&#10;      if (!api) {&#10;        return;&#10;      }&#10;&#10;      onSelect(api);&#10;      api.on('reInit', onSelect);&#10;      api.on('select', onSelect);&#10;&#10;      return () =&gt; {&#10;        api?.off('select', onSelect);&#10;      };&#10;    }, [api, onSelect]);&#10;&#10;    return (&#10;      &lt;CarouselContext.Provider&#10;        value={{&#10;          carouselRef,&#10;          api: api,&#10;          opts,&#10;          orientation:&#10;            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),&#10;          scrollPrev,&#10;          scrollNext,&#10;          canScrollPrev,&#10;          canScrollNext,&#10;        }}&#10;      &gt;&#10;        &lt;div&#10;          ref={ref}&#10;          onKeyDownCapture={handleKeyDown}&#10;          className={cn('relative', className)}&#10;          role=&quot;region&quot;&#10;          aria-roledescription=&quot;carousel&quot;&#10;          {...props}&#10;        &gt;&#10;          {children}&#10;        &lt;/div&gt;&#10;      &lt;/CarouselContext.Provider&gt;&#10;    );&#10;  }&#10;);&#10;Carousel.displayName = 'Carousel';&#10;&#10;const CarouselContent = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  const { carouselRef, orientation } = useCarousel();&#10;&#10;  return (&#10;    &lt;div ref={carouselRef} className=&quot;overflow-hidden&quot;&gt;&#10;      &lt;div&#10;        ref={ref}&#10;        className={cn(&#10;          'flex',&#10;          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',&#10;          className&#10;        )}&#10;        {...props}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;CarouselContent.displayName = 'CarouselContent';&#10;&#10;const CarouselItem = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  const { orientation } = useCarousel();&#10;&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      role=&quot;group&quot;&#10;      aria-roledescription=&quot;slide&quot;&#10;      className={cn(&#10;        'min-w-0 shrink-0 grow-0 basis-full',&#10;        orientation === 'horizontal' ? 'pl-4' : 'pt-4',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;CarouselItem.displayName = 'CarouselItem';&#10;&#10;const CarouselPrevious = React.forwardRef&lt;&#10;  HTMLButtonElement,&#10;  React.ComponentProps&lt;typeof Button&gt;&#10;&gt;(({ className, variant = 'outline', size = 'icon', ...props }, ref) =&gt; {&#10;  const { orientation, scrollPrev, canScrollPrev } = useCarousel();&#10;&#10;  return (&#10;    &lt;Button&#10;      ref={ref}&#10;      variant={variant}&#10;      size={size}&#10;      className={cn(&#10;        'absolute  h-8 w-8 rounded-full',&#10;        orientation === 'horizontal'&#10;          ? '-left-12 top-1/2 -translate-y-1/2'&#10;          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',&#10;        className&#10;      )}&#10;      disabled={!canScrollPrev}&#10;      onClick={scrollPrev}&#10;      {...props}&#10;    &gt;&#10;      &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;span className=&quot;sr-only&quot;&gt;Previous slide&lt;/span&gt;&#10;    &lt;/Button&gt;&#10;  );&#10;});&#10;CarouselPrevious.displayName = 'CarouselPrevious';&#10;&#10;const CarouselNext = React.forwardRef&lt;&#10;  HTMLButtonElement,&#10;  React.ComponentProps&lt;typeof Button&gt;&#10;&gt;(({ className, variant = 'outline', size = 'icon', ...props }, ref) =&gt; {&#10;  const { orientation, scrollNext, canScrollNext } = useCarousel();&#10;&#10;  return (&#10;    &lt;Button&#10;      ref={ref}&#10;      variant={variant}&#10;      size={size}&#10;      className={cn(&#10;        'absolute h-8 w-8 rounded-full',&#10;        orientation === 'horizontal'&#10;          ? '-right-12 top-1/2 -translate-y-1/2'&#10;          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',&#10;        className&#10;      )}&#10;      disabled={!canScrollNext}&#10;      onClick={scrollNext}&#10;      {...props}&#10;    &gt;&#10;      &lt;ArrowRight className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;span className=&quot;sr-only&quot;&gt;Next slide&lt;/span&gt;&#10;    &lt;/Button&gt;&#10;  );&#10;});&#10;CarouselNext.displayName = 'CarouselNext';&#10;&#10;export {&#10;  type CarouselApi,&#10;  Carousel,&#10;  CarouselContent,&#10;  CarouselItem,&#10;  CarouselPrevious,&#10;  CarouselNext,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import useEmblaCarousel, {&#10;  type UseEmblaCarouselType,&#10;} from 'embla-carousel-react';&#10;import { ArrowLeftIcon, ArrowRightIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { Button } from '@/components/ui/button';&#10;&#10;type CarouselApi = UseEmblaCarouselType[1];&#10;type UseCarouselParameters = Parameters&lt;typeof useEmblaCarousel&gt;;&#10;type CarouselOptions = UseCarouselParameters[0];&#10;type CarouselPlugin = UseCarouselParameters[1];&#10;&#10;type CarouselProps = {&#10;  opts?: CarouselOptions;&#10;  plugins?: CarouselPlugin;&#10;  orientation?: 'horizontal' | 'vertical';&#10;  setApi?: (api: CarouselApi) =&gt; void;&#10;};&#10;&#10;type CarouselContextProps = {&#10;  carouselRef: ReturnType&lt;typeof useEmblaCarousel&gt;[0];&#10;  api: ReturnType&lt;typeof useEmblaCarousel&gt;[1];&#10;  scrollPrev: () =&gt; void;&#10;  scrollNext: () =&gt; void;&#10;  canScrollPrev: boolean;&#10;  canScrollNext: boolean;&#10;} &amp; CarouselProps;&#10;&#10;const CarouselContext = React.createContext&lt;CarouselContextProps | null&gt;(null);&#10;&#10;function useCarousel() {&#10;  const context = React.useContext(CarouselContext);&#10;&#10;  if (!context) {&#10;    throw new Error('useCarousel must be used within a &lt;Carousel /&gt;');&#10;  }&#10;&#10;  return context;&#10;}&#10;&#10;const Carousel = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt; &amp; CarouselProps&#10;&gt;(&#10;  (&#10;    {&#10;      orientation = 'horizontal',&#10;      opts,&#10;      setApi,&#10;      plugins,&#10;      className,&#10;      children,&#10;      ...props&#10;    },&#10;    ref&#10;  ) =&gt; {&#10;    const [carouselRef, api] = useEmblaCarousel(&#10;      {&#10;        ...opts,&#10;        axis: orientation === 'horizontal' ? 'x' : 'y',&#10;      },&#10;      plugins&#10;    );&#10;    const [canScrollPrev, setCanScrollPrev] = React.useState(false);&#10;    const [canScrollNext, setCanScrollNext] = React.useState(false);&#10;&#10;    const onSelect = React.useCallback((api: CarouselApi) =&gt; {&#10;      if (!api) {&#10;        return;&#10;      }&#10;&#10;      setCanScrollPrev(api.canScrollPrev());&#10;      setCanScrollNext(api.canScrollNext());&#10;    }, []);&#10;&#10;    const scrollPrev = React.useCallback(() =&gt; {&#10;      api?.scrollPrev();&#10;    }, [api]);&#10;&#10;    const scrollNext = React.useCallback(() =&gt; {&#10;      api?.scrollNext();&#10;    }, [api]);&#10;&#10;    const handleKeyDown = React.useCallback(&#10;      (event: React.KeyboardEvent&lt;HTMLDivElement&gt;) =&gt; {&#10;        if (event.key === 'ArrowLeft') {&#10;          event.preventDefault();&#10;          scrollPrev();&#10;        } else if (event.key === 'ArrowRight') {&#10;          event.preventDefault();&#10;          scrollNext();&#10;        }&#10;      },&#10;      [scrollPrev, scrollNext]&#10;    );&#10;&#10;    React.useEffect(() =&gt; {&#10;      if (!api || !setApi) {&#10;        return;&#10;      }&#10;&#10;      setApi(api);&#10;    }, [api, setApi]);&#10;&#10;    React.useEffect(() =&gt; {&#10;      if (!api) {&#10;        return;&#10;      }&#10;&#10;      onSelect(api);&#10;      api.on('reInit', onSelect);&#10;      api.on('select', onSelect);&#10;&#10;      return () =&gt; {&#10;        api?.off('select', onSelect);&#10;      };&#10;    }, [api, onSelect]);&#10;&#10;    return (&#10;      &lt;CarouselContext.Provider&#10;        value={{&#10;          carouselRef,&#10;          api: api,&#10;          opts,&#10;          orientation:&#10;            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),&#10;          scrollPrev,&#10;          scrollNext,&#10;          canScrollPrev,&#10;          canScrollNext,&#10;        }}&#10;      &gt;&#10;        &lt;div&#10;          ref={ref}&#10;          onKeyDownCapture={handleKeyDown}&#10;          className={cn('relative', className)}&#10;          role=&quot;region&quot;&#10;          aria-roledescription=&quot;carousel&quot;&#10;          {...props}&#10;        &gt;&#10;          {children}&#10;        &lt;/div&gt;&#10;      &lt;/CarouselContext.Provider&gt;&#10;    );&#10;  }&#10;);&#10;Carousel.displayName = 'Carousel';&#10;&#10;const CarouselContent = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  const { carouselRef, orientation } = useCarousel();&#10;&#10;  return (&#10;    &lt;div ref={carouselRef} className=&quot;overflow-hidden&quot;&gt;&#10;      &lt;div&#10;        ref={ref}&#10;        className={cn(&#10;          'flex',&#10;          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',&#10;          className&#10;        )}&#10;        {...props}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;CarouselContent.displayName = 'CarouselContent';&#10;&#10;const CarouselItem = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  const { orientation } = useCarousel();&#10;&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      role=&quot;group&quot;&#10;      aria-roledescription=&quot;slide&quot;&#10;      className={cn(&#10;        'min-w-0 shrink-0 grow-0 basis-full',&#10;        orientation === 'horizontal' ? 'pl-4' : 'pt-4',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;});&#10;CarouselItem.displayName = 'CarouselItem';&#10;&#10;const CarouselPrevious = React.forwardRef&lt;&#10;  HTMLButtonElement,&#10;  React.ComponentProps&lt;typeof Button&gt;&#10;&gt;(({ className, variant = 'outline', size = 'icon', ...props }, ref) =&gt; {&#10;  const { orientation, scrollPrev, canScrollPrev } = useCarousel();&#10;&#10;  return (&#10;    &lt;Button&#10;      ref={ref}&#10;      variant={variant}&#10;      size={size}&#10;      className={cn(&#10;        'absolute  h-8 w-8 rounded-full',&#10;        orientation === 'horizontal'&#10;          ? '-left-12 top-1/2 -translate-y-1/2'&#10;          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',&#10;        className&#10;      )}&#10;      disabled={!canScrollPrev}&#10;      onClick={scrollPrev}&#10;      {...props}&#10;    &gt;&#10;      &lt;ArrowLeftIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;span className=&quot;sr-only&quot;&gt;Previous slide&lt;/span&gt;&#10;    &lt;/Button&gt;&#10;  );&#10;});&#10;CarouselPrevious.displayName = 'CarouselPrevious';&#10;&#10;const CarouselNext = React.forwardRef&lt;&#10;  HTMLButtonElement,&#10;  React.ComponentProps&lt;typeof Button&gt;&#10;&gt;(({ className, variant = 'outline', size = 'icon', ...props }, ref) =&gt; {&#10;  const { orientation, scrollNext, canScrollNext } = useCarousel();&#10;&#10;  return (&#10;    &lt;Button&#10;      ref={ref}&#10;      variant={variant}&#10;      size={size}&#10;      className={cn(&#10;        'absolute h-8 w-8 rounded-full',&#10;        orientation === 'horizontal'&#10;          ? '-right-12 top-1/2 -translate-y-1/2'&#10;          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',&#10;        className&#10;      )}&#10;      disabled={!canScrollNext}&#10;      onClick={scrollNext}&#10;      {...props}&#10;    &gt;&#10;      &lt;ArrowRightIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;span className=&quot;sr-only&quot;&gt;Next slide&lt;/span&gt;&#10;    &lt;/Button&gt;&#10;  );&#10;});&#10;CarouselNext.displayName = 'CarouselNext';&#10;&#10;export {&#10;  type CarouselApi,&#10;  Carousel,&#10;  CarouselContent,&#10;  CarouselItem,&#10;  CarouselPrevious,&#10;  CarouselNext,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/command.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/command.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { type DialogProps } from '@radix-ui/react-dialog';&#10;import { Command as CommandPrimitive } from 'cmdk';&#10;import { Search } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { Dialog, DialogContent } from '@/components/ui/dialog';&#10;&#10;const Command = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive&#10;    ref={ref}&#10;    className={cn(&#10;      'flex h-full w-full flex-col overflow-hidden rounded-2xl bg-popover text-popover-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;Command.displayName = CommandPrimitive.displayName;&#10;&#10;interface CommandDialogProps extends DialogProps {}&#10;&#10;const CommandDialog = ({ children, ...props }: CommandDialogProps) =&gt; {&#10;  return (&#10;    &lt;Dialog {...props}&gt;&#10;      &lt;DialogContent className=&quot;overflow-hidden p-0 shadow-lg&quot;&gt;&#10;        &lt;Command className=&quot;[&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground [&amp;_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&amp;_[cmdk-group]]:px-2 [&amp;_[cmdk-input-wrapper]_svg]:h-5 [&amp;_[cmdk-input-wrapper]_svg]:w-5 [&amp;_[cmdk-input]]:h-12 [&amp;_[cmdk-item]]:px-2 [&amp;_[cmdk-item]]:py-3 [&amp;_[cmdk-item]_svg]:h-5 [&amp;_[cmdk-item]_svg]:w-5&quot;&gt;&#10;          {children}&#10;        &lt;/Command&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};&#10;&#10;const CommandInput = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Input&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Input&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div className=&quot;flex items-center border-b px-3&quot; cmdk-input-wrapper=&quot;&quot;&gt;&#10;    &lt;Search className=&quot;mr-2 h-4 w-4 shrink-0 opacity-50&quot; /&gt;&#10;    &lt;CommandPrimitive.Input&#10;      ref={ref}&#10;      className={cn(&#10;        'flex h-11 w-full rounded-2xl bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;));&#10;&#10;CommandInput.displayName = CommandPrimitive.Input.displayName;&#10;&#10;const CommandList = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.List&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.List&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.List&#10;    ref={ref}&#10;    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandList.displayName = CommandPrimitive.List.displayName;&#10;&#10;const CommandEmpty = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Empty&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Empty&gt;&#10;&gt;((props, ref) =&gt; (&#10;  &lt;CommandPrimitive.Empty&#10;    ref={ref}&#10;    className=&quot;py-6 text-center text-sm&quot;&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandEmpty.displayName = CommandPrimitive.Empty.displayName;&#10;&#10;const CommandGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Group&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Group&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Group&#10;    ref={ref}&#10;    className={cn(&#10;      'overflow-hidden p-1 text-foreground [&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:py-1.5 [&amp;_[cmdk-group-heading]]:text-xs [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandGroup.displayName = CommandPrimitive.Group.displayName;&#10;&#10;const CommandSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 h-px bg-border', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;CommandSeparator.displayName = CommandPrimitive.Separator.displayName;&#10;&#10;const CommandItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      &quot;relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50&quot;,&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandItem.displayName = CommandPrimitive.Item.displayName;&#10;&#10;const CommandShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;CommandShortcut.displayName = 'CommandShortcut';&#10;&#10;export {&#10;  Command,&#10;  CommandDialog,&#10;  CommandInput,&#10;  CommandList,&#10;  CommandEmpty,&#10;  CommandGroup,&#10;  CommandItem,&#10;  CommandShortcut,&#10;  CommandSeparator,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { type DialogProps } from '@radix-ui/react-dialog';&#10;import { Command as CommandPrimitive } from 'cmdk';&#10;import { SearchIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { Dialog, DialogContent } from '@/components/ui/dialog';&#10;&#10;const Command = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive&#10;    ref={ref}&#10;    className={cn(&#10;      'flex h-full w-full flex-col overflow-hidden rounded-2xl bg-popover text-popover-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;Command.displayName = CommandPrimitive.displayName;&#10;&#10;interface CommandDialogProps extends DialogProps {}&#10;&#10;const CommandDialog = ({ children, ...props }: CommandDialogProps) =&gt; {&#10;  return (&#10;    &lt;Dialog {...props}&gt;&#10;      &lt;DialogContent className=&quot;overflow-hidden p-0 shadow-lg&quot;&gt;&#10;        &lt;Command className=&quot;[&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground [&amp;_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&amp;_[cmdk-group]]:px-2 [&amp;_[cmdk-input-wrapper]_svg]:h-5 [&amp;_[cmdk-input-wrapper]_svg]:w-5 [&amp;_[cmdk-input]]:h-12 [&amp;_[cmdk-item]]:px-2 [&amp;_[cmdk-item]]:py-3 [&amp;_[cmdk-item]_svg]:h-5 [&amp;_[cmdk-item]_svg]:w-5&quot;&gt;&#10;          {children}&#10;        &lt;/Command&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};&#10;&#10;const CommandInput = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Input&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Input&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div className=&quot;flex items-center border-b px-3&quot; cmdk-input-wrapper=&quot;&quot;&gt;&#10;    &lt;SearchIcon className=&quot;mr-2 h-4 w-4 shrink-0 opacity-50&quot; /&gt;&#10;    &lt;CommandPrimitive.Input&#10;      ref={ref}&#10;      className={cn(&#10;        'flex h-11 w-full rounded-2xl bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;));&#10;&#10;CommandInput.displayName = CommandPrimitive.Input.displayName;&#10;&#10;const CommandList = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.List&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.List&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.List&#10;    ref={ref}&#10;    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandList.displayName = CommandPrimitive.List.displayName;&#10;&#10;const CommandEmpty = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Empty&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Empty&gt;&#10;&gt;((props, ref) =&gt; (&#10;  &lt;CommandPrimitive.Empty&#10;    ref={ref}&#10;    className=&quot;py-6 text-center text-sm&quot;&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandEmpty.displayName = CommandPrimitive.Empty.displayName;&#10;&#10;const CommandGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Group&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Group&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Group&#10;    ref={ref}&#10;    className={cn(&#10;      'overflow-hidden p-1 text-foreground [&amp;_[cmdk-group-heading]]:px-2 [&amp;_[cmdk-group-heading]]:py-1.5 [&amp;_[cmdk-group-heading]]:text-xs [&amp;_[cmdk-group-heading]]:font-medium [&amp;_[cmdk-group-heading]]:text-muted-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandGroup.displayName = CommandPrimitive.Group.displayName;&#10;&#10;const CommandSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 h-px bg-border', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;CommandSeparator.displayName = CommandPrimitive.Separator.displayName;&#10;&#10;const CommandItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof CommandPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof CommandPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;CommandPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      &quot;relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50&quot;,&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;CommandItem.displayName = CommandPrimitive.Item.displayName;&#10;&#10;const CommandShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;CommandShortcut.displayName = 'CommandShortcut';&#10;&#10;export {&#10;  Command,&#10;  CommandDialog,&#10;  CommandInput,&#10;  CommandList,&#10;  CommandEmpty,&#10;  CommandGroup,&#10;  CommandItem,&#10;  CommandShortcut,&#10;  CommandSeparator,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/context-menu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/context-menu.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';&#10;import { Check, ChevronRight, Circle } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ContextMenu = ContextMenuPrimitive.Root;&#10;&#10;const ContextMenuTrigger = ContextMenuPrimitive.Trigger;&#10;&#10;const ContextMenuGroup = ContextMenuPrimitive.Group;&#10;&#10;const ContextMenuPortal = ContextMenuPrimitive.Portal;&#10;&#10;const ContextMenuSub = ContextMenuPrimitive.Sub;&#10;&#10;const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;&#10;&#10;const ContextMenuSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRight className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/ContextMenuPrimitive.SubTrigger&gt;&#10;));&#10;ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;&#10;&#10;const ContextMenuSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;&#10;&#10;const ContextMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Content&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Portal&gt;&#10;    &lt;ContextMenuPrimitive.Content&#10;      ref={ref}&#10;      className={cn(&#10;        'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/ContextMenuPrimitive.Portal&gt;&#10;));&#10;ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;&#10;&#10;const ContextMenuItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;&#10;&#10;const ContextMenuCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;ContextMenuPrimitive.ItemIndicator&gt;&#10;        &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/ContextMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/ContextMenuPrimitive.CheckboxItem&gt;&#10;));&#10;ContextMenuCheckboxItem.displayName =&#10;  ContextMenuPrimitive.CheckboxItem.displayName;&#10;&#10;const ContextMenuRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;ContextMenuPrimitive.ItemIndicator&gt;&#10;        &lt;Circle className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/ContextMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/ContextMenuPrimitive.RadioItem&gt;&#10;));&#10;ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;&#10;&#10;const ContextMenuLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold text-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;&#10;&#10;const ContextMenuSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-border', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;&#10;&#10;const ContextMenuShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;ContextMenuShortcut.displayName = 'ContextMenuShortcut';&#10;&#10;export {&#10;  ContextMenu,&#10;  ContextMenuTrigger,&#10;  ContextMenuContent,&#10;  ContextMenuItem,&#10;  ContextMenuCheckboxItem,&#10;  ContextMenuRadioItem,&#10;  ContextMenuLabel,&#10;  ContextMenuSeparator,&#10;  ContextMenuShortcut,&#10;  ContextMenuGroup,&#10;  ContextMenuPortal,&#10;  ContextMenuSub,&#10;  ContextMenuSubContent,&#10;  ContextMenuSubTrigger,&#10;  ContextMenuRadioGroup,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';&#10;import { CheckIcon, ChevronRightIcon, CircleIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ContextMenu = ContextMenuPrimitive.Root;&#10;&#10;const ContextMenuTrigger = ContextMenuPrimitive.Trigger;&#10;&#10;const ContextMenuGroup = ContextMenuPrimitive.Group;&#10;&#10;const ContextMenuPortal = ContextMenuPrimitive.Portal;&#10;&#10;const ContextMenuSub = ContextMenuPrimitive.Sub;&#10;&#10;const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;&#10;&#10;const ContextMenuSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRightIcon className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/ContextMenuPrimitive.SubTrigger&gt;&#10;));&#10;ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;&#10;&#10;const ContextMenuSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;&#10;&#10;const ContextMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Content&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Portal&gt;&#10;    &lt;ContextMenuPrimitive.Content&#10;      ref={ref}&#10;      className={cn(&#10;        'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/ContextMenuPrimitive.Portal&gt;&#10;));&#10;ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;&#10;&#10;const ContextMenuItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;&#10;&#10;const ContextMenuCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;ContextMenuPrimitive.ItemIndicator&gt;&#10;        &lt;CheckIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/ContextMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/ContextMenuPrimitive.CheckboxItem&gt;&#10;));&#10;ContextMenuCheckboxItem.displayName =&#10;  ContextMenuPrimitive.CheckboxItem.displayName;&#10;&#10;const ContextMenuRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;ContextMenuPrimitive.ItemIndicator&gt;&#10;        &lt;CircleIcon className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/ContextMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/ContextMenuPrimitive.RadioItem&gt;&#10;));&#10;ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;&#10;&#10;const ContextMenuLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold text-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;&#10;&#10;const ContextMenuSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof ContextMenuPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof ContextMenuPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ContextMenuPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-border', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;&#10;&#10;const ContextMenuShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;ContextMenuShortcut.displayName = 'ContextMenuShortcut';&#10;&#10;export {&#10;  ContextMenu,&#10;  ContextMenuTrigger,&#10;  ContextMenuContent,&#10;  ContextMenuItem,&#10;  ContextMenuCheckboxItem,&#10;  ContextMenuRadioItem,&#10;  ContextMenuLabel,&#10;  ContextMenuSeparator,&#10;  ContextMenuShortcut,&#10;  ContextMenuGroup,&#10;  ContextMenuPortal,&#10;  ContextMenuSub,&#10;  ContextMenuSubContent,&#10;  ContextMenuSubTrigger,&#10;  ContextMenuRadioGroup,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/dropdown-menu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/dropdown-menu.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';&#10;import { Check, ChevronRight, Circle } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const DropdownMenu = DropdownMenuPrimitive.Root;&#10;&#10;const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;&#10;&#10;const DropdownMenuGroup = DropdownMenuPrimitive.Group;&#10;&#10;const DropdownMenuPortal = DropdownMenuPrimitive.Portal;&#10;&#10;const DropdownMenuSub = DropdownMenuPrimitive.Sub;&#10;&#10;const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;&#10;&#10;const DropdownMenuSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRight className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/DropdownMenuPrimitive.SubTrigger&gt;&#10;));&#10;DropdownMenuSubTrigger.displayName =&#10;  DropdownMenuPrimitive.SubTrigger.displayName;&#10;&#10;const DropdownMenuSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuSubContent.displayName =&#10;  DropdownMenuPrimitive.SubContent.displayName;&#10;&#10;const DropdownMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Content&gt;&#10;&gt;(({ className, sideOffset = 4, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Portal&gt;&#10;    &lt;DropdownMenuPrimitive.Content&#10;      ref={ref}&#10;      sideOffset={sideOffset}&#10;      className={cn(&#10;        'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/DropdownMenuPrimitive.Portal&gt;&#10;));&#10;DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;&#10;&#10;const DropdownMenuItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;&#10;&#10;const DropdownMenuCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;DropdownMenuPrimitive.ItemIndicator&gt;&#10;        &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/DropdownMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/DropdownMenuPrimitive.CheckboxItem&gt;&#10;));&#10;DropdownMenuCheckboxItem.displayName =&#10;  DropdownMenuPrimitive.CheckboxItem.displayName;&#10;&#10;const DropdownMenuRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;DropdownMenuPrimitive.ItemIndicator&gt;&#10;        &lt;Circle className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/DropdownMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/DropdownMenuPrimitive.RadioItem&gt;&#10;));&#10;DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;&#10;&#10;const DropdownMenuLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;&#10;&#10;const DropdownMenuSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-muted', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;&#10;&#10;const DropdownMenuShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn('ml-auto text-xs  opacity-60', className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';&#10;&#10;export {&#10;  DropdownMenu,&#10;  DropdownMenuTrigger,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuCheckboxItem,&#10;  DropdownMenuRadioItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuShortcut,&#10;  DropdownMenuGroup,&#10;  DropdownMenuPortal,&#10;  DropdownMenuSub,&#10;  DropdownMenuSubContent,&#10;  DropdownMenuSubTrigger,&#10;  DropdownMenuRadioGroup,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';&#10;import { CheckIcon, ChevronRightIcon, CircleIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const DropdownMenu = DropdownMenuPrimitive.Root;&#10;&#10;const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;&#10;&#10;const DropdownMenuGroup = DropdownMenuPrimitive.Group;&#10;&#10;const DropdownMenuPortal = DropdownMenuPrimitive.Portal;&#10;&#10;const DropdownMenuSub = DropdownMenuPrimitive.Sub;&#10;&#10;const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;&#10;&#10;const DropdownMenuSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRightIcon className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/DropdownMenuPrimitive.SubTrigger&gt;&#10;));&#10;DropdownMenuSubTrigger.displayName =&#10;  DropdownMenuPrimitive.SubTrigger.displayName;&#10;&#10;const DropdownMenuSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuSubContent.displayName =&#10;  DropdownMenuPrimitive.SubContent.displayName;&#10;&#10;const DropdownMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Content&gt;&#10;&gt;(({ className, sideOffset = 4, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Portal&gt;&#10;    &lt;DropdownMenuPrimitive.Content&#10;      ref={ref}&#10;      sideOffset={sideOffset}&#10;      className={cn(&#10;        'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/DropdownMenuPrimitive.Portal&gt;&#10;));&#10;DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;&#10;&#10;const DropdownMenuItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;&#10;&#10;const DropdownMenuCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;DropdownMenuPrimitive.ItemIndicator&gt;&#10;        &lt;CheckIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/DropdownMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/DropdownMenuPrimitive.CheckboxItem&gt;&#10;));&#10;DropdownMenuCheckboxItem.displayName =&#10;  DropdownMenuPrimitive.CheckboxItem.displayName;&#10;&#10;const DropdownMenuRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;DropdownMenuPrimitive.ItemIndicator&gt;&#10;        &lt;CircleIcon className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/DropdownMenuPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/DropdownMenuPrimitive.RadioItem&gt;&#10;));&#10;DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;&#10;&#10;const DropdownMenuLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;&#10;&#10;const DropdownMenuSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof DropdownMenuPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof DropdownMenuPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;DropdownMenuPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-muted', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;&#10;&#10;const DropdownMenuShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn('ml-auto text-xs  opacity-60', className)}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;DropdownMenuShortcut.displayName = 'DropdownMenuShortcut';&#10;&#10;export {&#10;  DropdownMenu,&#10;  DropdownMenuTrigger,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuCheckboxItem,&#10;  DropdownMenuRadioItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuShortcut,&#10;  DropdownMenuGroup,&#10;  DropdownMenuPortal,&#10;  DropdownMenuSub,&#10;  DropdownMenuSubContent,&#10;  DropdownMenuSubTrigger,&#10;  DropdownMenuRadioGroup,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/input-otp.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/input-otp.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { OTPInput, OTPInputContext } from 'input-otp';&#10;import { Dot } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const InputOTP = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof OTPInput&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof OTPInput&gt;&#10;&gt;(({ className, containerClassName, ...props }, ref) =&gt; (&#10;  &lt;OTPInput&#10;    ref={ref}&#10;    containerClassName={cn(&#10;      'flex items-center gap-2 has-[:disabled]:opacity-50',&#10;      containerClassName&#10;    )}&#10;    className={cn('disabled:cursor-not-allowed', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;InputOTP.displayName = 'InputOTP';&#10;&#10;const InputOTPGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div ref={ref} className={cn('flex items-center', className)} {...props} /&gt;&#10;));&#10;InputOTPGroup.displayName = 'InputOTPGroup';&#10;&#10;const InputOTPSlot = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt; &amp; { index: number }&#10;&gt;(({ index, className, ...props }, ref) =&gt; {&#10;  const inputOTPContext = React.useContext(OTPInputContext);&#10;  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];&#10;&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={cn(&#10;        'relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',&#10;        isActive &amp;&amp; 'z-10 ring-2 ring-ring ring-offset-background',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {char}&#10;      {hasFakeCaret &amp;&amp; (&#10;        &lt;div className=&quot;pointer-events-none absolute inset-0 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;h-4 w-px animate-caret-blink bg-foreground duration-1000&quot; /&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;InputOTPSlot.displayName = 'InputOTPSlot';&#10;&#10;const InputOTPSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt;&#10;&gt;(({ ...props }, ref) =&gt; (&#10;  &lt;div ref={ref} role=&quot;separator&quot; {...props}&gt;&#10;    &lt;Dot /&gt;&#10;  &lt;/div&gt;&#10;));&#10;InputOTPSeparator.displayName = 'InputOTPSeparator';&#10;&#10;export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import { OTPInput, OTPInputContext } from 'input-otp';&#10;import { DotIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const InputOTP = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof OTPInput&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof OTPInput&gt;&#10;&gt;(({ className, containerClassName, ...props }, ref) =&gt; (&#10;  &lt;OTPInput&#10;    ref={ref}&#10;    containerClassName={cn(&#10;      'flex items-center gap-2 has-[:disabled]:opacity-50',&#10;      containerClassName&#10;    )}&#10;    className={cn('disabled:cursor-not-allowed', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;InputOTP.displayName = 'InputOTP';&#10;&#10;const InputOTPGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div ref={ref} className={cn('flex items-center', className)} {...props} /&gt;&#10;));&#10;InputOTPGroup.displayName = 'InputOTPGroup';&#10;&#10;const InputOTPSlot = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt; &amp; { index: number }&#10;&gt;(({ index, className, ...props }, ref) =&gt; {&#10;  const inputOTPContext = React.useContext(OTPInputContext);&#10;  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];&#10;&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={cn(&#10;        'relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md',&#10;        isActive &amp;&amp; 'z-10 ring-2 ring-ring ring-offset-background',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      {char}&#10;      {hasFakeCaret &amp;&amp; (&#10;        &lt;div className=&quot;pointer-events-none absolute inset-0 flex items-center justify-center&quot;&gt;&#10;          &lt;div className=&quot;h-4 w-px animate-caret-blink bg-foreground duration-1000&quot; /&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;});&#10;InputOTPSlot.displayName = 'InputOTPSlot';&#10;&#10;const InputOTPSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;'div'&gt;,&#10;  React.ComponentPropsWithoutRef&lt;'div'&gt;&#10;&gt;(({ ...props }, ref) =&gt; (&#10;  &lt;div ref={ref} role=&quot;separator&quot; {...props}&gt;&#10;    &lt;DotIcon /&gt;&#10;  &lt;/div&gt;&#10;));&#10;InputOTPSeparator.displayName = 'InputOTPSeparator';&#10;&#10;export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/menubar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/menubar.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as MenubarPrimitive from '@radix-ui/react-menubar';&#10;import { Check, ChevronRight, Circle } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const MenubarMenu = MenubarPrimitive.Menu;&#10;&#10;const MenubarGroup = MenubarPrimitive.Group;&#10;&#10;const MenubarPortal = MenubarPrimitive.Portal;&#10;&#10;const MenubarSub = MenubarPrimitive.Sub;&#10;&#10;const MenubarRadioGroup = MenubarPrimitive.RadioGroup;&#10;&#10;const Menubar = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'flex h-10 items-center space-x-1 rounded-2xl border bg-background p-1',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;Menubar.displayName = MenubarPrimitive.Root.displayName;&#10;&#10;const MenubarTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Trigger&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Trigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;&#10;&#10;const MenubarSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRight className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/MenubarPrimitive.SubTrigger&gt;&#10;));&#10;MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;&#10;&#10;const MenubarSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;&#10;&#10;const MenubarContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Content&gt;&#10;&gt;(&#10;  (&#10;    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },&#10;    ref&#10;  ) =&gt; (&#10;    &lt;MenubarPrimitive.Portal&gt;&#10;      &lt;MenubarPrimitive.Content&#10;        ref={ref}&#10;        align={align}&#10;        alignOffset={alignOffset}&#10;        sideOffset={sideOffset}&#10;        className={cn(&#10;          'z-50 min-w-[12rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;          className&#10;        )}&#10;        {...props}&#10;      /&gt;&#10;    &lt;/MenubarPrimitive.Portal&gt;&#10;  )&#10;);&#10;MenubarContent.displayName = MenubarPrimitive.Content.displayName;&#10;&#10;const MenubarItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarItem.displayName = MenubarPrimitive.Item.displayName;&#10;&#10;const MenubarCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;MenubarPrimitive.ItemIndicator&gt;&#10;        &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/MenubarPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/MenubarPrimitive.CheckboxItem&gt;&#10;));&#10;MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;&#10;&#10;const MenubarRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;MenubarPrimitive.ItemIndicator&gt;&#10;        &lt;Circle className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/MenubarPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/MenubarPrimitive.RadioItem&gt;&#10;));&#10;MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;&#10;&#10;const MenubarLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarLabel.displayName = MenubarPrimitive.Label.displayName;&#10;&#10;const MenubarSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-muted', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;&#10;&#10;const MenubarShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;MenubarShortcut.displayname = 'MenubarShortcut';&#10;&#10;export {&#10;  Menubar,&#10;  MenubarMenu,&#10;  MenubarTrigger,&#10;  MenubarContent,&#10;  MenubarItem,&#10;  MenubarSeparator,&#10;  MenubarLabel,&#10;  MenubarCheckboxItem,&#10;  MenubarRadioGroup,&#10;  MenubarRadioItem,&#10;  MenubarPortal,&#10;  MenubarSubContent,&#10;  MenubarSubTrigger,&#10;  MenubarGroup,&#10;  MenubarSub,&#10;  MenubarShortcut,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as MenubarPrimitive from '@radix-ui/react-menubar';&#10;import { CheckIcon, ChevronRightIcon, CircleIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const MenubarMenu = MenubarPrimitive.Menu;&#10;&#10;const MenubarGroup = MenubarPrimitive.Group;&#10;&#10;const MenubarPortal = MenubarPrimitive.Portal;&#10;&#10;const MenubarSub = MenubarPrimitive.Sub;&#10;&#10;const MenubarRadioGroup = MenubarPrimitive.RadioGroup;&#10;&#10;const Menubar = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'flex h-10 items-center space-x-1 rounded-2xl border bg-background p-1',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;Menubar.displayName = MenubarPrimitive.Root.displayName;&#10;&#10;const MenubarTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Trigger&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Trigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;&#10;&#10;const MenubarSubTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.SubTrigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.SubTrigger&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, children, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.SubTrigger&#10;    ref={ref}&#10;    className={cn(&#10;      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;ChevronRightIcon className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;  &lt;/MenubarPrimitive.SubTrigger&gt;&#10;));&#10;MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;&#10;&#10;const MenubarSubContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.SubContent&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.SubContent&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.SubContent&#10;    ref={ref}&#10;    className={cn(&#10;      'z-50 min-w-[8rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;&#10;&#10;const MenubarContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Content&gt;&#10;&gt;(&#10;  (&#10;    { className, align = 'start', alignOffset = -4, sideOffset = 8, ...props },&#10;    ref&#10;  ) =&gt; (&#10;    &lt;MenubarPrimitive.Portal&gt;&#10;      &lt;MenubarPrimitive.Content&#10;        ref={ref}&#10;        align={align}&#10;        alignOffset={alignOffset}&#10;        sideOffset={sideOffset}&#10;        className={cn(&#10;          'z-50 min-w-[12rem] overflow-hidden rounded-2xl border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',&#10;          className&#10;        )}&#10;        {...props}&#10;      /&gt;&#10;    &lt;/MenubarPrimitive.Portal&gt;&#10;  )&#10;);&#10;MenubarContent.displayName = MenubarPrimitive.Content.displayName;&#10;&#10;const MenubarItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Item&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Item&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarItem.displayName = MenubarPrimitive.Item.displayName;&#10;&#10;const MenubarCheckboxItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.CheckboxItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.CheckboxItem&gt;&#10;&gt;(({ className, children, checked, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.CheckboxItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    checked={checked}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;MenubarPrimitive.ItemIndicator&gt;&#10;        &lt;CheckIcon className=&quot;h-4 w-4&quot; /&gt;&#10;      &lt;/MenubarPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/MenubarPrimitive.CheckboxItem&gt;&#10;));&#10;MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;&#10;&#10;const MenubarRadioItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.RadioItem&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.RadioItem&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.RadioItem&#10;    ref={ref}&#10;    className={cn(&#10;      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;span className=&quot;absolute left-2 flex h-3.5 w-3.5 items-center justify-center&quot;&gt;&#10;      &lt;MenubarPrimitive.ItemIndicator&gt;&#10;        &lt;CircleIcon className=&quot;h-2 w-2 fill-current&quot; /&gt;&#10;      &lt;/MenubarPrimitive.ItemIndicator&gt;&#10;    &lt;/span&gt;&#10;    {children}&#10;  &lt;/MenubarPrimitive.RadioItem&gt;&#10;));&#10;MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;&#10;&#10;const MenubarLabel = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Label&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Label&gt; &amp; {&#10;    inset?: boolean;&#10;  }&#10;&gt;(({ className, inset, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Label&#10;    ref={ref}&#10;    className={cn(&#10;      'px-2 py-1.5 text-sm font-semibold',&#10;      inset &amp;&amp; 'pl-8',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarLabel.displayName = MenubarPrimitive.Label.displayName;&#10;&#10;const MenubarSeparator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof MenubarPrimitive.Separator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof MenubarPrimitive.Separator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;MenubarPrimitive.Separator&#10;    ref={ref}&#10;    className={cn('-mx-1 my-1 h-px bg-muted', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;&#10;&#10;const MenubarShortcut = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLSpanElement&gt;) =&gt; {&#10;  return (&#10;    &lt;span&#10;      className={cn(&#10;        'ml-auto text-xs  text-muted-foreground',&#10;        className&#10;      )}&#10;      {...props}&#10;    /&gt;&#10;  );&#10;};&#10;MenubarShortcut.displayname = 'MenubarShortcut';&#10;&#10;export {&#10;  Menubar,&#10;  MenubarMenu,&#10;  MenubarTrigger,&#10;  MenubarContent,&#10;  MenubarItem,&#10;  MenubarSeparator,&#10;  MenubarLabel,&#10;  MenubarCheckboxItem,&#10;  MenubarRadioGroup,&#10;  MenubarRadioItem,&#10;  MenubarPortal,&#10;  MenubarSubContent,&#10;  MenubarSubTrigger,&#10;  MenubarGroup,&#10;  MenubarSub,&#10;  MenubarShortcut,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/navigation-menu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/navigation-menu.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';&#10;import { cva } from 'class-variance-authority';&#10;import { ChevronDown } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const NavigationMenu = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Root&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'relative z-10 flex max-w-max flex-1 items-center justify-center',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;NavigationMenuViewport /&gt;&#10;  &lt;/NavigationMenuPrimitive.Root&gt;&#10;));&#10;NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;&#10;&#10;const NavigationMenuList = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.List&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.List&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.List&#10;    ref={ref}&#10;    className={cn(&#10;      'group flex flex-1 list-none items-center justify-center space-x-1',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;&#10;&#10;const NavigationMenuItem = NavigationMenuPrimitive.Item;&#10;&#10;const navigationMenuTriggerStyle = cva(&#10;  'group inline-flex h-10 w-max items-center justify-center rounded-2xl bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'&#10;);&#10;&#10;const NavigationMenuTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Trigger&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Trigger&#10;    ref={ref}&#10;    className={cn(navigationMenuTriggerStyle(), 'group', className)}&#10;    {...props}&#10;  &gt;&#10;    {children}{' '}&#10;    &lt;ChevronDown&#10;      className=&quot;relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180&quot;&#10;      aria-hidden=&quot;true&quot;&#10;    /&gt;&#10;  &lt;/NavigationMenuPrimitive.Trigger&gt;&#10;));&#10;NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;&#10;&#10;const NavigationMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Content&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Content&#10;    ref={ref}&#10;    className={cn(&#10;      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;&#10;&#10;const NavigationMenuLink = NavigationMenuPrimitive.Link;&#10;&#10;const NavigationMenuViewport = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Viewport&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Viewport&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div className={cn('absolute left-0 top-full flex justify-center')}&gt;&#10;    &lt;NavigationMenuPrimitive.Viewport&#10;      className={cn(&#10;        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-2xl border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',&#10;        className&#10;      )}&#10;      ref={ref}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;));&#10;NavigationMenuViewport.displayName =&#10;  NavigationMenuPrimitive.Viewport.displayName;&#10;&#10;const NavigationMenuIndicator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Indicator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Indicator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Indicator&#10;    ref={ref}&#10;    className={cn(&#10;      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;div className=&quot;relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md&quot; /&gt;&#10;  &lt;/NavigationMenuPrimitive.Indicator&gt;&#10;));&#10;NavigationMenuIndicator.displayName =&#10;  NavigationMenuPrimitive.Indicator.displayName;&#10;&#10;export {&#10;  navigationMenuTriggerStyle,&#10;  NavigationMenu,&#10;  NavigationMenuList,&#10;  NavigationMenuItem,&#10;  NavigationMenuContent,&#10;  NavigationMenuTrigger,&#10;  NavigationMenuLink,&#10;  NavigationMenuIndicator,&#10;  NavigationMenuViewport,&#10;};&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';&#10;import { cva } from 'class-variance-authority';&#10;import { ChevronDownIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const NavigationMenu = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Root&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Root&#10;    ref={ref}&#10;    className={cn(&#10;      'relative z-10 flex max-w-max flex-1 items-center justify-center',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {children}&#10;    &lt;NavigationMenuViewport /&gt;&#10;  &lt;/NavigationMenuPrimitive.Root&gt;&#10;));&#10;NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;&#10;&#10;const NavigationMenuList = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.List&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.List&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.List&#10;    ref={ref}&#10;    className={cn(&#10;      'group flex flex-1 list-none items-center justify-center space-x-1',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;&#10;&#10;const NavigationMenuItem = NavigationMenuPrimitive.Item;&#10;&#10;const navigationMenuTriggerStyle = cva(&#10;  'group inline-flex h-10 w-max items-center justify-center rounded-2xl bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50'&#10;);&#10;&#10;const NavigationMenuTrigger = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Trigger&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Trigger&gt;&#10;&gt;(({ className, children, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Trigger&#10;    ref={ref}&#10;    className={cn(navigationMenuTriggerStyle(), 'group', className)}&#10;    {...props}&#10;  &gt;&#10;    {children}{' '}&#10;    &lt;ChevronDownIcon&#10;      className=&quot;relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180&quot;&#10;      aria-hidden=&quot;true&quot;&#10;    /&gt;&#10;  &lt;/NavigationMenuPrimitive.Trigger&gt;&#10;));&#10;NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;&#10;&#10;const NavigationMenuContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Content&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Content&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Content&#10;    ref={ref}&#10;    className={cn(&#10;      'left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;));&#10;NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;&#10;&#10;const NavigationMenuLink = NavigationMenuPrimitive.Link;&#10;&#10;const NavigationMenuViewport = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Viewport&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Viewport&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;div className={cn('absolute left-0 top-full flex justify-center')}&gt;&#10;    &lt;NavigationMenuPrimitive.Viewport&#10;      className={cn(&#10;        'origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-2xl border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]',&#10;        className&#10;      )}&#10;      ref={ref}&#10;      {...props}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;));&#10;NavigationMenuViewport.displayName =&#10;  NavigationMenuPrimitive.Viewport.displayName;&#10;&#10;const NavigationMenuIndicator = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof NavigationMenuPrimitive.Indicator&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof NavigationMenuPrimitive.Indicator&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;NavigationMenuPrimitive.Indicator&#10;    ref={ref}&#10;    className={cn(&#10;      'top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    &lt;div className=&quot;relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md&quot; /&gt;&#10;  &lt;/NavigationMenuPrimitive.Indicator&gt;&#10;));&#10;NavigationMenuIndicator.displayName =&#10;  NavigationMenuPrimitive.Indicator.displayName;&#10;&#10;export {&#10;  navigationMenuTriggerStyle,&#10;  NavigationMenu,&#10;  NavigationMenuList,&#10;  NavigationMenuItem,&#10;  NavigationMenuContent,&#10;  NavigationMenuTrigger,&#10;  NavigationMenuLink,&#10;  NavigationMenuIndicator,&#10;  NavigationMenuViewport,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/pagination.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/pagination.tsx" />
              <option name="originalContent" value="import * as React from 'react';&#10;import { ChevronLeft, ChevronRight, MoreHorizontal } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { ButtonProps, buttonVariants } from '@/components/ui/button';&#10;&#10;const Pagination = ({ className, ...props }: React.ComponentProps&lt;'nav'&gt;) =&gt; (&#10;  &lt;nav&#10;    role=&quot;navigation&quot;&#10;    aria-label=&quot;pagination&quot;&#10;    className={cn('mx-auto flex w-full justify-center', className)}&#10;    {...props}&#10;  /&gt;&#10;);&#10;Pagination.displayName = 'Pagination';&#10;&#10;const PaginationContent = React.forwardRef&lt;&#10;  HTMLUListElement,&#10;  React.ComponentProps&lt;'ul'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ul&#10;    ref={ref}&#10;    className={cn('flex flex-row items-center gap-1', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;PaginationContent.displayName = 'PaginationContent';&#10;&#10;const PaginationItem = React.forwardRef&lt;&#10;  HTMLLIElement,&#10;  React.ComponentProps&lt;'li'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;li ref={ref} className={cn('', className)} {...props} /&gt;&#10;));&#10;PaginationItem.displayName = 'PaginationItem';&#10;&#10;type PaginationLinkProps = {&#10;  isActive?: boolean;&#10;} &amp; Pick&lt;ButtonProps, 'size'&gt; &amp;&#10;  React.ComponentProps&lt;'a'&gt;;&#10;&#10;const PaginationLink = ({&#10;  className,&#10;  isActive,&#10;  size = 'icon',&#10;  ...props&#10;}: PaginationLinkProps) =&gt; (&#10;  &lt;a&#10;    aria-current={isActive ? 'page' : undefined}&#10;    className={cn(&#10;      buttonVariants({&#10;        variant: isActive ? 'outline' : 'ghost',&#10;        size,&#10;      }),&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;PaginationLink.displayName = 'PaginationLink';&#10;&#10;const PaginationPrevious = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof PaginationLink&gt;) =&gt; (&#10;  &lt;PaginationLink&#10;    aria-label=&quot;Go to previous page&quot;&#10;    size=&quot;default&quot;&#10;    className={cn('gap-1 pl-2.5', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;ChevronLeft className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span&gt;Previous&lt;/span&gt;&#10;  &lt;/PaginationLink&gt;&#10;);&#10;PaginationPrevious.displayName = 'PaginationPrevious';&#10;&#10;const PaginationNext = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof PaginationLink&gt;) =&gt; (&#10;  &lt;PaginationLink&#10;    aria-label=&quot;Go to next page&quot;&#10;    size=&quot;default&quot;&#10;    className={cn('gap-1 pr-2.5', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;span&gt;Next&lt;/span&gt;&#10;    &lt;ChevronRight className=&quot;h-4 w-4&quot; /&gt;&#10;  &lt;/PaginationLink&gt;&#10;);&#10;PaginationNext.displayName = 'PaginationNext';&#10;&#10;const PaginationEllipsis = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'span'&gt;) =&gt; (&#10;  &lt;span&#10;    aria-hidden&#10;    className={cn('flex h-9 w-9 items-center justify-center', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span className=&quot;sr-only&quot;&gt;More pages&lt;/span&gt;&#10;  &lt;/span&gt;&#10;);&#10;PaginationEllipsis.displayName = 'PaginationEllipsis';&#10;&#10;export {&#10;  Pagination,&#10;  PaginationContent,&#10;  PaginationEllipsis,&#10;  PaginationItem,&#10;  PaginationLink,&#10;  PaginationNext,&#10;  PaginationPrevious,&#10;};&#10;" />
              <option name="updatedContent" value="import * as React from 'react';&#10;import { ChevronLeftIcon, ChevronRightIcon, MoreHorizontalIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;import { ButtonProps, buttonVariants } from '@/components/ui/button';&#10;&#10;const Pagination = ({ className, ...props }: React.ComponentProps&lt;'nav'&gt;) =&gt; (&#10;  &lt;nav&#10;    role=&quot;navigation&quot;&#10;    aria-label=&quot;pagination&quot;&#10;    className={cn('mx-auto flex w-full justify-center', className)}&#10;    {...props}&#10;  /&gt;&#10;);&#10;Pagination.displayName = 'Pagination';&#10;&#10;const PaginationContent = React.forwardRef&lt;&#10;  HTMLUListElement,&#10;  React.ComponentProps&lt;'ul'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;ul&#10;    ref={ref}&#10;    className={cn('flex flex-row items-center gap-1', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;PaginationContent.displayName = 'PaginationContent';&#10;&#10;const PaginationItem = React.forwardRef&lt;&#10;  HTMLLIElement,&#10;  React.ComponentProps&lt;'li'&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;li ref={ref} className={cn('', className)} {...props} /&gt;&#10;));&#10;PaginationItem.displayName = 'PaginationItem';&#10;&#10;type PaginationLinkProps = {&#10;  isActive?: boolean;&#10;} &amp; Pick&lt;ButtonProps, 'size'&gt; &amp;&#10;  React.ComponentProps&lt;'a'&gt;;&#10;&#10;const PaginationLink = ({&#10;  className,&#10;  isActive,&#10;  size = 'icon',&#10;  ...props&#10;}: PaginationLinkProps) =&gt; (&#10;  &lt;a&#10;    aria-current={isActive ? 'page' : undefined}&#10;    className={cn(&#10;      buttonVariants({&#10;        variant: isActive ? 'outline' : 'ghost',&#10;        size,&#10;      }),&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;PaginationLink.displayName = 'PaginationLink';&#10;&#10;const PaginationPrevious = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof PaginationLink&gt;) =&gt; (&#10;  &lt;PaginationLink&#10;    aria-label=&quot;Go to previous page&quot;&#10;    size=&quot;default&quot;&#10;    className={cn('gap-1 pl-2.5', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;ChevronLeftIcon className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span&gt;Previous&lt;/span&gt;&#10;  &lt;/PaginationLink&gt;&#10;);&#10;PaginationPrevious.displayName = 'PaginationPrevious';&#10;&#10;const PaginationNext = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof PaginationLink&gt;) =&gt; (&#10;  &lt;PaginationLink&#10;    aria-label=&quot;Go to next page&quot;&#10;    size=&quot;default&quot;&#10;    className={cn('gap-1 pr-2.5', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;span&gt;Next&lt;/span&gt;&#10;    &lt;ChevronRightIcon className=&quot;h-4 w-4&quot; /&gt;&#10;  &lt;/PaginationLink&gt;&#10;);&#10;PaginationNext.displayName = 'PaginationNext';&#10;&#10;const PaginationEllipsis = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;'span'&gt;) =&gt; (&#10;  &lt;span&#10;    aria-hidden&#10;    className={cn('flex h-9 w-9 items-center justify-center', className)}&#10;    {...props}&#10;  &gt;&#10;    &lt;MoreHorizontalIcon className=&quot;h-4 w-4&quot; /&gt;&#10;    &lt;span className=&quot;sr-only&quot;&gt;More pages&lt;/span&gt;&#10;  &lt;/span&gt;&#10;);&#10;PaginationEllipsis.displayName = 'PaginationEllipsis';&#10;&#10;export {&#10;  Pagination,&#10;  PaginationContent,&#10;  PaginationEllipsis,&#10;  PaginationItem,&#10;  PaginationLink,&#10;  PaginationNext,&#10;  PaginationPrevious,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/radio-group.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/radio-group.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';&#10;import { Circle } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const RadioGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof RadioGroupPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;RadioGroupPrimitive.Root&#10;      className={cn('grid gap-2', className)}&#10;      {...props}&#10;      ref={ref}&#10;    /&gt;&#10;  );&#10;});&#10;RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;&#10;&#10;const RadioGroupItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof RadioGroupPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;RadioGroupPrimitive.Item&#10;      ref={ref}&#10;      className={cn(&#10;        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      &lt;RadioGroupPrimitive.Indicator className=&quot;flex items-center justify-center&quot;&gt;&#10;        &lt;Circle className=&quot;h-2.5 w-2.5 fill-current text-current&quot; /&gt;&#10;      &lt;/RadioGroupPrimitive.Indicator&gt;&#10;    &lt;/RadioGroupPrimitive.Item&gt;&#10;  );&#10;});&#10;RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;&#10;&#10;export { RadioGroup, RadioGroupItem };&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';&#10;import { CircleIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const RadioGroup = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof RadioGroupPrimitive.Root&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Root&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;RadioGroupPrimitive.Root&#10;      className={cn('grid gap-2', className)}&#10;      {...props}&#10;      ref={ref}&#10;    /&gt;&#10;  );&#10;});&#10;RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;&#10;&#10;const RadioGroupItem = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof RadioGroupPrimitive.Item&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof RadioGroupPrimitive.Item&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;RadioGroupPrimitive.Item&#10;      ref={ref}&#10;      className={cn(&#10;        'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',&#10;        className&#10;      )}&#10;      {...props}&#10;    &gt;&#10;      &lt;RadioGroupPrimitive.Indicator className=&quot;flex items-center justify-center&quot;&gt;&#10;        &lt;CircleIcon className=&quot;h-2.5 w-2.5 fill-current text-current&quot; /&gt;&#10;      &lt;/RadioGroupPrimitive.Indicator&gt;&#10;    &lt;/RadioGroupPrimitive.Item&gt;&#10;  );&#10;});&#10;RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;&#10;&#10;export { RadioGroup, RadioGroupItem };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/resizable.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/resizable.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { GripVertical } from '@phosphor-icons/react';&#10;import * as ResizablePrimitive from 'react-resizable-panels';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ResizablePanelGroup = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof ResizablePrimitive.PanelGroup&gt;) =&gt; (&#10;  &lt;ResizablePrimitive.PanelGroup&#10;    className={cn(&#10;      'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;&#10;const ResizablePanel = ResizablePrimitive.Panel;&#10;&#10;const ResizableHandle = ({&#10;  withHandle,&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof ResizablePrimitive.PanelResizeHandle&gt; &amp; {&#10;  withHandle?: boolean;&#10;}) =&gt; (&#10;  &lt;ResizablePrimitive.PanelResizeHandle&#10;    className={cn(&#10;      'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&amp;[data-panel-group-direction=vertical]&gt;div]:rotate-90',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {withHandle &amp;&amp; (&#10;      &lt;div className=&quot;z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border&quot;&gt;&#10;        &lt;GripVertical className=&quot;h-2.5 w-2.5&quot; /&gt;&#10;      &lt;/div&gt;&#10;    )}&#10;  &lt;/ResizablePrimitive.PanelResizeHandle&gt;&#10;);&#10;&#10;export { ResizablePanelGroup, ResizablePanel, ResizableHandle };&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { GripVerticalIcon } from '@phosphor-icons/react';&#10;import * as ResizablePrimitive from 'react-resizable-panels';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const ResizablePanelGroup = ({&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof ResizablePrimitive.PanelGroup&gt;) =&gt; (&#10;  &lt;ResizablePrimitive.PanelGroup&#10;    className={cn(&#10;      'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;&#10;const ResizablePanel = ResizablePrimitive.Panel;&#10;&#10;const ResizableHandle = ({&#10;  withHandle,&#10;  className,&#10;  ...props&#10;}: React.ComponentProps&lt;typeof ResizablePrimitive.PanelResizeHandle&gt; &amp; {&#10;  withHandle?: boolean;&#10;}) =&gt; (&#10;  &lt;ResizablePrimitive.PanelResizeHandle&#10;    className={cn(&#10;      'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&amp;[data-panel-group-direction=vertical]&gt;div]:rotate-90',&#10;      className&#10;    )}&#10;    {...props}&#10;  &gt;&#10;    {withHandle &amp;&amp; (&#10;      &lt;div className=&quot;z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border&quot;&gt;&#10;        &lt;GripVerticalIcon className=&quot;h-2.5 w-2.5&quot; /&gt;&#10;      &lt;/div&gt;&#10;    )}&#10;  &lt;/ResizablePrimitive.PanelResizeHandle&gt;&#10;);&#10;&#10;export { ResizablePanelGroup, ResizablePanel, ResizableHandle };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/sheet.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/sheet.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as SheetPrimitive from '@radix-ui/react-dialog';&#10;import { cva, type VariantProps } from 'class-variance-authority';&#10;import { X } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Sheet = SheetPrimitive.Root;&#10;&#10;const SheetTrigger = SheetPrimitive.Trigger;&#10;&#10;const SheetClose = SheetPrimitive.Close;&#10;&#10;const SheetPortal = SheetPrimitive.Portal;&#10;&#10;const SheetOverlay = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Overlay&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Overlay&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Overlay&#10;    className={cn(&#10;      'fixed inset-0 z-50 bg-primary-900/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',&#10;      className&#10;    )}&#10;    {...props}&#10;    ref={ref}&#10;  /&gt;&#10;));&#10;SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;&#10;&#10;const sheetVariants = cva(&#10;  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',&#10;  {&#10;    variants: {&#10;      side: {&#10;        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',&#10;        bottom:&#10;          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',&#10;        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',&#10;        right:&#10;          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',&#10;      },&#10;    },&#10;    defaultVariants: {&#10;      side: 'right',&#10;    },&#10;  }&#10;);&#10;&#10;interface SheetContentProps&#10;  extends React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Content&gt;,&#10;    VariantProps&lt;typeof sheetVariants&gt; {}&#10;&#10;const SheetContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Content&gt;,&#10;  SheetContentProps&#10;&gt;(({ side = 'right', className, children, ...props }, ref) =&gt; (&#10;  &lt;SheetPortal&gt;&#10;    &lt;SheetOverlay /&gt;&#10;    &lt;SheetPrimitive.Content&#10;      ref={ref}&#10;      className={cn(sheetVariants({ side }), className)}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;SheetPrimitive.Close className=&quot;absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary&quot;&gt;&#10;        &lt;X className=&quot;h-4 w-4&quot; /&gt;&#10;        &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&#10;      &lt;/SheetPrimitive.Close&gt;&#10;    &lt;/SheetPrimitive.Content&gt;&#10;  &lt;/SheetPortal&gt;&#10;));&#10;SheetContent.displayName = SheetPrimitive.Content.displayName;&#10;&#10;const SheetHeader = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col space-y-2 text-center sm:text-left',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;SheetHeader.displayName = 'SheetHeader';&#10;&#10;const SheetFooter = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;SheetFooter.displayName = 'SheetFooter';&#10;&#10;const SheetTitle = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Title&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Title&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Title&#10;    ref={ref}&#10;    className={cn('text-lg font-semibold text-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;SheetTitle.displayName = SheetPrimitive.Title.displayName;&#10;&#10;const SheetDescription = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Description&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Description&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Description&#10;    ref={ref}&#10;    className={cn('text-sm text-muted-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;SheetDescription.displayName = SheetPrimitive.Description.displayName;&#10;&#10;export {&#10;  Sheet,&#10;  SheetPortal,&#10;  SheetOverlay,&#10;  SheetTrigger,&#10;  SheetClose,&#10;  SheetContent,&#10;  SheetHeader,&#10;  SheetFooter,&#10;  SheetTitle,&#10;  SheetDescription,&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import * as React from 'react';&#10;import * as SheetPrimitive from '@radix-ui/react-dialog';&#10;import { cva, type VariantProps } from 'class-variance-authority';&#10;import { XIcon } from '@phosphor-icons/react';&#10;&#10;import { cn } from '@/lib/utils';&#10;&#10;const Sheet = SheetPrimitive.Root;&#10;&#10;const SheetTrigger = SheetPrimitive.Trigger;&#10;&#10;const SheetClose = SheetPrimitive.Close;&#10;&#10;const SheetPortal = SheetPrimitive.Portal;&#10;&#10;const SheetOverlay = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Overlay&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Overlay&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Overlay&#10;    className={cn(&#10;      'fixed inset-0 z-50 bg-primary-900/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',&#10;      className&#10;    )}&#10;    {...props}&#10;    ref={ref}&#10;  /&gt;&#10;));&#10;SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;&#10;&#10;const sheetVariants = cva(&#10;  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',&#10;  {&#10;    variants: {&#10;      side: {&#10;        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',&#10;        bottom:&#10;          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',&#10;        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',&#10;        right:&#10;          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',&#10;      },&#10;    },&#10;    defaultVariants: {&#10;      side: 'right',&#10;    },&#10;  }&#10;);&#10;&#10;interface SheetContentProps&#10;  extends React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Content&gt;,&#10;    VariantProps&lt;typeof sheetVariants&gt; {}&#10;&#10;const SheetContent = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Content&gt;,&#10;  SheetContentProps&#10;&gt;(({ side = 'right', className, children, ...props }, ref) =&gt; (&#10;  &lt;SheetPortal&gt;&#10;    &lt;SheetOverlay /&gt;&#10;    &lt;SheetPrimitive.Content&#10;      ref={ref}&#10;      className={cn(sheetVariants({ side }), className)}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;      &lt;SheetPrimitive.Close className=&quot;absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary&quot;&gt;&#10;        &lt;XIcon className=&quot;h-4 w-4&quot; /&gt;&#10;        &lt;span className=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&#10;      &lt;/SheetPrimitive.Close&gt;&#10;    &lt;/SheetPrimitive.Content&gt;&#10;  &lt;/SheetPortal&gt;&#10;));&#10;SheetContent.displayName = SheetPrimitive.Content.displayName;&#10;&#10;const SheetHeader = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col space-y-2 text-center sm:text-left',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;SheetHeader.displayName = 'SheetHeader';&#10;&#10;const SheetFooter = ({&#10;  className,&#10;  ...props&#10;}: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div&#10;    className={cn(&#10;      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',&#10;      className&#10;    )}&#10;    {...props}&#10;  /&gt;&#10;);&#10;SheetFooter.displayName = 'SheetFooter';&#10;&#10;const SheetTitle = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Title&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Title&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Title&#10;    ref={ref}&#10;    className={cn('text-lg font-semibold text-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;SheetTitle.displayName = SheetPrimitive.Title.displayName;&#10;&#10;const SheetDescription = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof SheetPrimitive.Description&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof SheetPrimitive.Description&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;SheetPrimitive.Description&#10;    ref={ref}&#10;    className={cn('text-sm text-muted-foreground', className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;SheetDescription.displayName = SheetPrimitive.Description.displayName;&#10;&#10;export {&#10;  Sheet,&#10;  SheetPortal,&#10;  SheetOverlay,&#10;  SheetTrigger,&#10;  SheetClose,&#10;  SheetContent,&#10;  SheetHeader,&#10;  SheetFooter,&#10;  SheetTitle,&#10;  SheetDescription,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/table.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/table.tsx" />
              <option name="originalContent" value="import React from &quot;react&quot;;&#10;import {&#10;  Table as HeroTable,&#10;  TableHeader as HeroTableHeader,&#10;  TableColumn as HeroTableColumn,&#10;  TableBody as HeroTableBody,&#10;  TableRow as HeroTableRow,&#10;  TableCell as HeroTableCell,&#10;} from &quot;@heroui/table&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;&#10;const Table = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTable&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTable&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTable&#10;    ref={ref}&#10;    className={cn(&quot;w-full&quot;, className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;Table.displayName = &quot;Table&quot;;&#10;&#10;export {&#10;  Table,&#10;  HeroTableHeader as TableHeader,&#10;  HeroTableColumn as TableColumn,&#10;  HeroTableBody as TableBody,&#10;  HeroTableRow as TableRow,&#10;  HeroTableCell as TableCell,&#10;};&#10;" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#10;import {&#10;  Table as HeroTable,&#10;  TableHeader as HeroTableHeader,&#10;  TableColumn as HeroTableColumn,&#10;  TableBody as HeroTableBody,&#10;  TableRow as HeroTableRow,&#10;  TableCell as HeroTableCell,&#10;} from &quot;@heroui/table&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;&#10;const Table = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTable&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTable&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTable&#10;    ref={ref}&#10;    className={cn(&quot;w-full&quot;, className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableHeader = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableHeader&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableHeader&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableHeader&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableColumn = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableColumn&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableColumn&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableColumn&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableBody = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableBody&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableBody&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableBody&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableRow = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableRow&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableRow&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableRow&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;const TableCell = React.forwardRef&lt;&#10;  React.ElementRef&lt;typeof HeroTableCell&gt;,&#10;  React.ComponentPropsWithoutRef&lt;typeof HeroTableCell&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; (&#10;  &lt;HeroTableCell&#10;    ref={ref}&#10;    className={cn(className)}&#10;    {...props}&#10;  /&gt;&#10;));&#10;&#10;Table.displayName = &quot;Table&quot;;&#10;TableHeader.displayName = &quot;TableHeader&quot;;&#10;TableColumn.displayName = &quot;TableColumn&quot;;&#10;TableBody.displayName = &quot;TableBody&quot;;&#10;TableRow.displayName = &quot;TableRow&quot;;&#10;TableCell.displayName = &quot;TableCell&quot;;&#10;&#10;export {&#10;  Table,&#10;  TableHeader,&#10;  TableColumn,&#10;  TableBody,&#10;  TableRow,&#10;  TableCell,&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/weighing/video-verification.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/weighing/video-verification.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import {useState, useRef, useCallback} from &quot;react&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Card, CardContent, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {Badge} from &quot;@/components/ui/badge&quot;;&#10;import {CameraIcon, CheckCircleIcon, XCircleIcon, IdentificationCardIcon} from &quot;@phosphor-icons/react&quot;;&#10;import {apiClient} from &quot;@/lib/api&quot;;&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;&#10;interface VideoVerificationProps {&#10;  onDriverVerified: (driverId: number, driverName: string) =&gt; void;&#10;  onPlateDetected: (plate: string) =&gt; void;&#10;  onVerificationComplete: (success: boolean) =&gt; void;&#10;}&#10;&#10;export function VideoVerification({&#10;  onDriverVerified,&#10;  onPlateDetected,&#10;  onVerificationComplete&#10;}: VideoVerificationProps) {&#10;  const videoRef = useRef&lt;HTMLVideoElement&gt;(null);&#10;  const canvasRef = useRef&lt;HTMLCanvasElement&gt;(null);&#10;  const [isStreaming, setIsStreaming] = useState(false);&#10;  const [verificationState, setVerificationState] = useState&lt;{&#10;    driver: { verified: boolean; name?: string; confidence?: number };&#10;    plate: { detected: boolean; value?: string };&#10;    loading: boolean;&#10;  }&gt;({&#10;    driver: { verified: false },&#10;    plate: { detected: false },&#10;    loading: false&#10;  });&#10;&#10;  const startCamera = useCallback(async () =&gt; {&#10;    try {&#10;      const stream = await navigator.mediaDevices.getUserMedia({&#10;        video: {&#10;          width: { ideal: 640 },&#10;          height: { ideal: 480 },&#10;          facingMode: 'user'&#10;        }&#10;      });&#10;&#10;      if (videoRef.current) {&#10;        videoRef.current.srcObject = stream;&#10;        setIsStreaming(true);&#10;      }&#10;    } catch (error) {&#10;      console.error('Erro ao acessar câmera:', error);&#10;    }&#10;  }, []);&#10;&#10;  const stopCamera = useCallback(() =&gt; {&#10;    if (videoRef.current?.srcObject) {&#10;      const tracks = (videoRef.current.srcObject as MediaStream).getTracks();&#10;      tracks.forEach(track =&gt; track.stop());&#10;      videoRef.current.srcObject = null;&#10;      setIsStreaming(false);&#10;    }&#10;  }, []);&#10;&#10;  const captureImage = useCallback((): Blob | null =&gt; {&#10;    if (!videoRef.current || !canvasRef.current) return null;&#10;&#10;    const canvas = canvasRef.current;&#10;    const video = videoRef.current;&#10;    const context = canvas.getContext('2d');&#10;&#10;    if (!context) return null;&#10;&#10;    canvas.width = video.videoWidth;&#10;    canvas.height = video.videoHeight;&#10;    context.drawImage(video, 0, 0);&#10;&#10;    return new Promise((resolve) =&gt; {&#10;      canvas.toBlob(resolve, 'image/jpeg', 0.8);&#10;    }) as Promise&lt;Blob&gt;;&#10;  }, []);&#10;&#10;  const verifyDriver = useCallback(async () =&gt; {&#10;    const imageBlob = await captureImage();&#10;    if (!imageBlob) return;&#10;&#10;    setVerificationState(prev =&gt; ({ ...prev, loading: true }));&#10;&#10;    const formData = new FormData();&#10;    formData.append('imagem_rosto', imageBlob, 'driver.jpg');&#10;&#10;    const response = await apiClient.reconhecerMotorista(formData);&#10;&#10;    if (response.data?.motorista_reconhecido) {&#10;      const driverData = {&#10;        verified: true,&#10;        name: response.data.motorista_nome,&#10;        confidence: response.data.confianca&#10;      };&#10;&#10;      setVerificationState(prev =&gt; ({ ...prev, driver: driverData, loading: false }));&#10;&#10;      if (response.data.motorista_id &amp;&amp; response.data.motorista_nome) {&#10;        onDriverVerified(response.data.motorista_id, response.data.motorista_nome);&#10;      }&#10;    } else {&#10;      setVerificationState(prev =&gt; ({&#10;        ...prev,&#10;        driver: { verified: false },&#10;        loading: false&#10;      }));&#10;    }&#10;  }, [captureImage, onDriverVerified]);&#10;&#10;  const detectPlate = useCallback(async () =&gt; {&#10;    const imageBlob = await captureImage();&#10;    if (!imageBlob) return;&#10;&#10;    setVerificationState(prev =&gt; ({ ...prev, loading: true }));&#10;&#10;    const formData = new FormData();&#10;    formData.append('imagem_placa', imageBlob, 'plate.jpg');&#10;&#10;    const response = await apiClient.reconhecerPlaca(formData);&#10;&#10;    if (response.data?.placa) {&#10;      const plateData = {&#10;        detected: true,&#10;        value: response.data.placa&#10;      };&#10;&#10;      setVerificationState(prev =&gt; ({ ...prev, plate: plateData, loading: false }));&#10;      onPlateDetected(response.data.placa);&#10;    } else {&#10;      setVerificationState(prev =&gt; ({&#10;        ...prev,&#10;        plate: { detected: false },&#10;        loading: false&#10;      }));&#10;    }&#10;  }, [captureImage, onPlateDetected]);&#10;&#10;  const performCompleteVerification = useCallback(async () =&gt; {&#10;    const imageBlob = await captureImage();&#10;    if (!imageBlob) return;&#10;&#10;    setVerificationState(prev =&gt; ({ ...prev, loading: true }));&#10;&#10;    const formData = new FormData();&#10;    formData.append('imagem_rosto', imageBlob, 'driver.jpg');&#10;    formData.append('imagem_placa', imageBlob, 'plate.jpg');&#10;&#10;    const response = await apiClient.reconhecimentoCompleto(formData);&#10;&#10;    if (response.data) {&#10;      const newState = {&#10;        driver: {&#10;          verified: response.data.motorista_reconhecido,&#10;          name: response.data.motorista_nome,&#10;          confidence: response.data.confianca_motorista&#10;        },&#10;        plate: {&#10;          detected: response.data.placa_valida,&#10;          value: response.data.placa_reconhecida&#10;        },&#10;        loading: false&#10;      };&#10;&#10;      setVerificationState(newState);&#10;&#10;      if (response.data.motorista_reconhecido &amp;&amp; response.data.motorista_id &amp;&amp; response.data.motorista_nome) {&#10;        onDriverVerified(response.data.motorista_id, response.data.motorista_nome);&#10;      }&#10;&#10;      if (response.data.placa_reconhecida) {&#10;        onPlateDetected(response.data.placa_reconhecida);&#10;      }&#10;&#10;      onVerificationComplete(response.data.motorista_reconhecido &amp;&amp; response.data.placa_valida);&#10;    }&#10;&#10;    setVerificationState(prev =&gt; ({ ...prev, loading: false }));&#10;  }, [captureImage, onDriverVerified, onPlateDetected, onVerificationComplete]);&#10;&#10;  return (&#10;    &lt;Card className=&quot;w-full&quot;&gt;&#10;      &lt;CardHeader&gt;&#10;        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;CameraIcon className=&quot;h-5 w-5&quot;/&gt;&#10;          Verificação por Vídeo&#10;        &lt;/CardTitle&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;        &lt;div className=&quot;relative&quot;&gt;&#10;          &lt;video&#10;            ref={videoRef}&#10;            autoPlay&#10;            playsInline&#10;            muted&#10;            className=&quot;w-full h-64 bg-gray-100 rounded-lg object-cover&quot;&#10;          /&gt;&#10;          &lt;canvas&#10;            ref={canvasRef}&#10;            className=&quot;hidden&quot;&#10;          /&gt;&#10;&#10;          {!isStreaming &amp;&amp; (&#10;            &lt;div className=&quot;absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg&quot;&gt;&#10;              &lt;div className=&quot;text-center&quot;&gt;&#10;                &lt;CameraIcon className=&quot;h-12 w-12 text-gray-400 mx-auto mb-2&quot;/&gt;&#10;                &lt;p className=&quot;text-gray-500&quot;&gt;Câmera desativada&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;span className=&quot;text-sm font-medium&quot;&gt;Motorista:&lt;/span&gt;&#10;              &lt;Badge&#10;                variant=&quot;secondary&quot;&#10;                className={cn(&#10;                  verificationState.driver.verified&#10;                    ? &quot;bg-green-100 text-green-700&quot;&#10;                    : &quot;bg-gray-100 text-gray-700&quot;&#10;                )}&#10;              &gt;&#10;                {verificationState.driver.verified ? (&#10;                  &lt;CheckCircleIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#10;                ) : (&#10;                  &lt;XCircleIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#10;                )}&#10;                {verificationState.driver.verified ? &quot;Verificado&quot; : &quot;Não verificado&quot;}&#10;              &lt;/Badge&gt;&#10;            &lt;/div&gt;&#10;            {verificationState.driver.name &amp;&amp; (&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{verificationState.driver.name}&lt;/p&gt;&#10;            )}&#10;            {verificationState.driver.confidence &amp;&amp; (&#10;              &lt;p className=&quot;text-xs text-gray-500&quot;&gt;&#10;                Confiança: {Math.round(verificationState.driver.confidence * 100)}%&#10;              &lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;span className=&quot;text-sm font-medium&quot;&gt;Placa:&lt;/span&gt;&#10;              &lt;Badge&#10;                variant=&quot;secondary&quot;&#10;                className={cn(&#10;                  verificationState.plate.detected&#10;                    ? &quot;bg-green-100 text-green-700&quot;&#10;                    : &quot;bg-gray-100 text-gray-700&quot;&#10;                )}&#10;              &gt;&#10;                {verificationState.plate.detected ? (&#10;                  &lt;CheckCircleIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#10;                ) : (&#10;                  &lt;XCircleIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#10;                )}&#10;                {verificationState.plate.detected ? &quot;Detectada&quot; : &quot;Não detectada&quot;}&#10;              &lt;/Badge&gt;&#10;            &lt;/div&gt;&#10;            {verificationState.plate.value &amp;&amp; (&#10;              &lt;p className=&quot;text-sm font-medium&quot;&gt;{verificationState.plate.value}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex flex-col sm:flex-row gap-2&quot;&gt;&#10;          {!isStreaming ? (&#10;            &lt;Button onClick={startCamera} className=&quot;flex-1&quot;&gt;&#10;              &lt;CameraIcon className=&quot;w-4 h-4 mr-2&quot;/&gt;&#10;              Ativar Câmera&#10;            &lt;/Button&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;Button&#10;                onClick={stopCamera}&#10;                variant=&quot;outline&quot;&#10;                className=&quot;flex-1&quot;&#10;              &gt;&#10;                Parar Câmera&#10;              &lt;/Button&gt;&#10;              &lt;Button&#10;                onClick={verifyDriver}&#10;                disabled={verificationState.loading}&#10;                variant=&quot;secondary&quot;&#10;                className=&quot;flex-1&quot;&#10;              &gt;&#10;                {verificationState.loading ? &quot;Verificando...&quot; : &quot;Verificar Motorista&quot;}&#10;              &lt;/Button&gt;&#10;              &lt;Button&#10;                onClick={detectPlate}&#10;                disabled={verificationState.loading}&#10;                variant=&quot;secondary&quot;&#10;                className=&quot;flex-1&quot;&#10;              &gt;&#10;                {verificationState.loading ? &quot;Detectando...&quot; : &quot;Detectar Placa&quot;}&#10;              &lt;/Button&gt;&#10;              &lt;Button&#10;                onClick={performCompleteVerification}&#10;                disabled={verificationState.loading}&#10;                className=&quot;flex-1&quot;&#10;              &gt;&#10;                {verificationState.loading ? &quot;Verificando...&quot; : &quot;Verificação Completa&quot;}&#10;              &lt;/Button&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import {useState, useRef, useCallback} from &quot;react&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {Card, CardContent, CardHeader, CardTitle} from &quot;@/components/ui/card&quot;;&#10;import {Badge} from &quot;@/components/ui/badge&quot;;&#10;import {CameraIcon, CheckCircleIcon, XCircleIcon, IdentificationCardIcon} from &quot;@phosphor-icons/react&quot;;&#10;import {apiClient} from &quot;@/lib/api&quot;;&#10;import {cn} from &quot;@/lib/utils&quot;;&#10;&#10;interface VideoVerificationProps {&#10;  onDriverVerified: (driverId: number, driverName: string) =&gt; void;&#10;  onPlateDetected: (plate: string) =&gt; void;&#10;  onVerificationComplete: (success: boolean) =&gt; void;&#10;}&#10;&#10;export function VideoVerification({&#10;  onDriverVerified,&#10;  onPlateDetected,&#10;  onVerificationComplete&#10;}: VideoVerificationProps) {&#10;  const videoRef = useRef&lt;HTMLVideoElement&gt;(null);&#10;  const canvasRef = useRef&lt;HTMLCanvasElement&gt;(null);&#10;  const [isStreaming, setIsStreaming] = useState(false);&#10;  const [verificationState, setVerificationState] = useState&lt;{&#10;    driver: { verified: boolean; name?: string; confidence?: number };&#10;    plate: { detected: boolean; value?: string };&#10;    loading: boolean;&#10;  }&gt;({&#10;    driver: { verified: false },&#10;    plate: { detected: false },&#10;    loading: false&#10;  });&#10;&#10;  const startCamera = useCallback(async () =&gt; {&#10;    try {&#10;      const stream = await navigator.mediaDevices.getUserMedia({&#10;        video: {&#10;          width: { ideal: 640 },&#10;          height: { ideal: 480 },&#10;          facingMode: 'user'&#10;        }&#10;      });&#10;&#10;      if (videoRef.current) {&#10;        videoRef.current.srcObject = stream;&#10;        setIsStreaming(true);&#10;      }&#10;    } catch (error) {&#10;      console.error('Erro ao acessar câmera:', error);&#10;    }&#10;  }, []);&#10;&#10;  const stopCamera = useCallback(() =&gt; {&#10;    if (videoRef.current?.srcObject) {&#10;      const tracks = (videoRef.current.srcObject as MediaStream).getTracks();&#10;      tracks.forEach(track =&gt; track.stop());&#10;      videoRef.current.srcObject = null;&#10;      setIsStreaming(false);&#10;    }&#10;  }, []);&#10;&#10;  const captureImage = useCallback((): Promise&lt;Blob | null&gt; =&gt; {&#10;    if (!videoRef.current || !canvasRef.current) return Promise.resolve(null);&#10;&#10;    const canvas = canvasRef.current;&#10;    const video = videoRef.current;&#10;    const context = canvas.getContext('2d');&#10;    &#10;    if (!context) return Promise.resolve(null);&#10;&#10;    canvas.width = video.videoWidth;&#10;    canvas.height = video.videoHeight;&#10;    context.drawImage(video, 0, 0);&#10;&#10;    return new Promise((resolve) =&gt; {&#10;      canvas.toBlob((blob) =&gt; {&#10;        resolve(blob);&#10;      }, 'image/jpeg', 0.8);&#10;    });&#10;  }, []);&#10;&#10;  const verifyDriver = useCallback(async () =&gt; {&#10;    const imageBlob = await captureImage();&#10;    if (!imageBlob) return;&#10;&#10;    setVerificationState(prev =&gt; ({ ...prev, loading: true }));&#10;&#10;    const formData = new FormData();&#10;    formData.append('imagem_rosto', imageBlob, 'driver.jpg');&#10;&#10;    const response = await apiClient.reconhecerMotorista(formData);&#10;&#10;    if (response.data?.motorista_reconhecido) {&#10;      const driverData = {&#10;        verified: true,&#10;        name: response.data.motorista_nome,&#10;        confidence: response.data.confianca&#10;      };&#10;&#10;      setVerificationState(prev =&gt; ({ ...prev, driver: driverData, loading: false }));&#10;&#10;      if (response.data.motorista_id &amp;&amp; response.data.motorista_nome) {&#10;        onDriverVerified(response.data.motorista_id, response.data.motorista_nome);&#10;      }&#10;    } else {&#10;      setVerificationState(prev =&gt; ({&#10;        ...prev,&#10;        driver: { verified: false },&#10;        loading: false&#10;      }));&#10;    }&#10;  }, [captureImage, onDriverVerified]);&#10;&#10;  const detectPlate = useCallback(async () =&gt; {&#10;    const imageBlob = await captureImage();&#10;    if (!imageBlob) return;&#10;&#10;    setVerificationState(prev =&gt; ({ ...prev, loading: true }));&#10;&#10;    const formData = new FormData();&#10;    formData.append('imagem_placa', imageBlob, 'plate.jpg');&#10;&#10;    const response = await apiClient.reconhecerPlaca(formData);&#10;&#10;    if (response.data?.placa) {&#10;      const plateData = {&#10;        detected: true,&#10;        value: response.data.placa&#10;      };&#10;&#10;      setVerificationState(prev =&gt; ({ ...prev, plate: plateData, loading: false }));&#10;      onPlateDetected(response.data.placa);&#10;    } else {&#10;      setVerificationState(prev =&gt; ({&#10;        ...prev,&#10;        plate: { detected: false },&#10;        loading: false&#10;      }));&#10;    }&#10;  }, [captureImage, onPlateDetected]);&#10;&#10;  const performCompleteVerification = useCallback(async () =&gt; {&#10;    const imageBlob = await captureImage();&#10;    if (!imageBlob) return;&#10;&#10;    setVerificationState(prev =&gt; ({ ...prev, loading: true }));&#10;&#10;    const formData = new FormData();&#10;    formData.append('imagem_rosto', imageBlob, 'driver.jpg');&#10;    formData.append('imagem_placa', imageBlob, 'plate.jpg');&#10;&#10;    const response = await apiClient.reconhecimentoCompleto(formData);&#10;&#10;    if (response.data) {&#10;      const newState = {&#10;        driver: {&#10;          verified: response.data.motorista_reconhecido,&#10;          name: response.data.motorista_nome,&#10;          confidence: response.data.confianca_motorista&#10;        },&#10;        plate: {&#10;          detected: response.data.placa_valida,&#10;          value: response.data.placa_reconhecida&#10;        },&#10;        loading: false&#10;      };&#10;&#10;      setVerificationState(newState);&#10;&#10;      if (response.data.motorista_reconhecido &amp;&amp; response.data.motorista_id &amp;&amp; response.data.motorista_nome) {&#10;        onDriverVerified(response.data.motorista_id, response.data.motorista_nome);&#10;      }&#10;&#10;      if (response.data.placa_reconhecida) {&#10;        onPlateDetected(response.data.placa_reconhecida);&#10;      }&#10;&#10;      onVerificationComplete(response.data.motorista_reconhecido &amp;&amp; response.data.placa_valida);&#10;    }&#10;&#10;    setVerificationState(prev =&gt; ({ ...prev, loading: false }));&#10;  }, [captureImage, onDriverVerified, onPlateDetected, onVerificationComplete]);&#10;&#10;  return (&#10;    &lt;Card className=&quot;w-full&quot;&gt;&#10;      &lt;CardHeader&gt;&#10;        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;CameraIcon className=&quot;h-5 w-5&quot;/&gt;&#10;          Verificação por Vídeo&#10;        &lt;/CardTitle&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;        &lt;div className=&quot;relative&quot;&gt;&#10;          &lt;video&#10;            ref={videoRef}&#10;            autoPlay&#10;            playsInline&#10;            muted&#10;            className=&quot;w-full h-64 bg-gray-100 rounded-lg object-cover&quot;&#10;          /&gt;&#10;          &lt;canvas&#10;            ref={canvasRef}&#10;            className=&quot;hidden&quot;&#10;          /&gt;&#10;&#10;          {!isStreaming &amp;&amp; (&#10;            &lt;div className=&quot;absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg&quot;&gt;&#10;              &lt;div className=&quot;text-center&quot;&gt;&#10;                &lt;CameraIcon className=&quot;h-12 w-12 text-gray-400 mx-auto mb-2&quot;/&gt;&#10;                &lt;p className=&quot;text-gray-500&quot;&gt;Câmera desativada&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;span className=&quot;text-sm font-medium&quot;&gt;Motorista:&lt;/span&gt;&#10;              &lt;Badge&#10;                variant=&quot;secondary&quot;&#10;                className={cn(&#10;                  verificationState.driver.verified&#10;                    ? &quot;bg-green-100 text-green-700&quot;&#10;                    : &quot;bg-gray-100 text-gray-700&quot;&#10;                )}&#10;              &gt;&#10;                {verificationState.driver.verified ? (&#10;                  &lt;CheckCircleIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#10;                ) : (&#10;                  &lt;XCircleIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#10;                )}&#10;                {verificationState.driver.verified ? &quot;Verificado&quot; : &quot;Não verificado&quot;}&#10;              &lt;/Badge&gt;&#10;            &lt;/div&gt;&#10;            {verificationState.driver.name &amp;&amp; (&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{verificationState.driver.name}&lt;/p&gt;&#10;            )}&#10;            {verificationState.driver.confidence &amp;&amp; (&#10;              &lt;p className=&quot;text-xs text-gray-500&quot;&gt;&#10;                Confiança: {Math.round(verificationState.driver.confidence * 100)}%&#10;              &lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;              &lt;span className=&quot;text-sm font-medium&quot;&gt;Placa:&lt;/span&gt;&#10;              &lt;Badge&#10;                variant=&quot;secondary&quot;&#10;                className={cn(&#10;                  verificationState.plate.detected&#10;                    ? &quot;bg-green-100 text-green-700&quot;&#10;                    : &quot;bg-gray-100 text-gray-700&quot;&#10;                )}&#10;              &gt;&#10;                {verificationState.plate.detected ? (&#10;                  &lt;CheckCircleIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#10;                ) : (&#10;                  &lt;XCircleIcon className=&quot;w-3 h-3 mr-1&quot;/&gt;&#10;                )}&#10;                {verificationState.plate.detected ? &quot;Detectada&quot; : &quot;Não detectada&quot;}&#10;              &lt;/Badge&gt;&#10;            &lt;/div&gt;&#10;            {verificationState.plate.value &amp;&amp; (&#10;              &lt;p className=&quot;text-sm font-medium&quot;&gt;{verificationState.plate.value}&lt;/p&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex flex-col sm:flex-row gap-2&quot;&gt;&#10;          {!isStreaming ? (&#10;            &lt;Button onClick={startCamera} className=&quot;flex-1&quot;&gt;&#10;              &lt;CameraIcon className=&quot;w-4 h-4 mr-2&quot;/&gt;&#10;              Ativar Câmera&#10;            &lt;/Button&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;Button&#10;                onClick={stopCamera}&#10;                variant=&quot;outline&quot;&#10;                className=&quot;flex-1&quot;&#10;              &gt;&#10;                Parar Câmera&#10;              &lt;/Button&gt;&#10;              &lt;Button&#10;                onClick={verifyDriver}&#10;                disabled={verificationState.loading}&#10;                variant=&quot;secondary&quot;&#10;                className=&quot;flex-1&quot;&#10;              &gt;&#10;                {verificationState.loading ? &quot;Verificando...&quot; : &quot;Verificar Motorista&quot;}&#10;              &lt;/Button&gt;&#10;              &lt;Button&#10;                onClick={detectPlate}&#10;                disabled={verificationState.loading}&#10;                variant=&quot;secondary&quot;&#10;                className=&quot;flex-1&quot;&#10;              &gt;&#10;                {verificationState.loading ? &quot;Detectando...&quot; : &quot;Detectar Placa&quot;}&#10;              &lt;/Button&gt;&#10;              &lt;Button&#10;                onClick={performCompleteVerification}&#10;                disabled={verificationState.loading}&#10;                className=&quot;flex-1&quot;&#10;              &gt;&#10;                {verificationState.loading ? &quot;Verificando...&quot; : &quot;Verificação Completa&quot;}&#10;              &lt;/Button&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/api.ts" />
              <option name="originalContent" value="const BASE_URL = 'https://14533dbc8cb2.ngrok-free.app/api';&#10;&#10;interface ApiResponse&lt;T&gt; {&#10;  data?: T;&#10;  error?: string;&#10;}&#10;&#10;class ApiClient {&#10;  private async request&lt;T&gt;(&#10;    endpoint: string,&#10;    options: RequestInit = {}&#10;  ): Promise&lt;ApiResponse&lt;T&gt;&gt; {&#10;    try {&#10;      const response = await fetch(`${BASE_URL}${endpoint}`, {&#10;        headers: {&#10;          'ngrok-skip-browser-warning': 'true',&#10;          ...options.headers,&#10;        },&#10;        ...options,&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json().catch(() =&gt; ({}));&#10;        return { error: errorData.error || errorData.erro || 'Erro na requisição' };&#10;      }&#10;&#10;      const data = await response.json();&#10;      return { data };&#10;    } catch (error) {&#10;      return { error: 'Erro de conexão com o servidor' };&#10;    }&#10;  }&#10;&#10;  async getMotoristas(): Promise&lt;ApiResponse&lt;{ id: number; nome: string }[]&gt;&gt; {&#10;    return this.request('/balanca/motoristas');&#10;  }&#10;&#10;  async registrarEntrada(data: {&#10;    placa: string;&#10;    motorista_id: number;&#10;    peso: number;&#10;  }): Promise&lt;ApiResponse&lt;{ id_evento: number }&gt;&gt; {&#10;    return this.request('/balanca/entrada', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify(data),&#10;    });&#10;  }&#10;&#10;  async registrarSaida(data: {&#10;    evento_id: number;&#10;    peso: number;&#10;  }): Promise&lt;ApiResponse&lt;void&gt;&gt; {&#10;    return this.request('/balanca/saida', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify(data),&#10;    });&#10;  }&#10;&#10;  async getCiclosAbertos(): Promise&lt;ApiResponse&lt;{&#10;    id_pesagem: number;&#10;    placa: string;&#10;    motorista: string;&#10;  }[]&gt;&gt; {&#10;    return this.request('/balanca/ciclos-abertos');&#10;  }&#10;&#10;  async getHistorico(): Promise&lt;ApiResponse&lt;any[]&gt;&gt; {&#10;    return this.request('/balanca/historico');&#10;  }&#10;&#10;  async cadastrarMotorista(formData: FormData): Promise&lt;ApiResponse&lt;any&gt;&gt; {&#10;    return this.request('/cadastro/motorista', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;&#10;  async cadastrarCaminhaoManual(data: {&#10;    placa: string;&#10;    modelo: string;&#10;    empresa: string;&#10;  }): Promise&lt;ApiResponse&lt;{ id_caminhao: number }&gt;&gt; {&#10;    return this.request('/cadastro/caminhao/manual', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify(data),&#10;    });&#10;  }&#10;&#10;  async cadastrarCaminhaoPorImagem(formData: FormData): Promise&lt;ApiResponse&lt;{&#10;    id_caminhao: number;&#10;    placa: string;&#10;  }&gt;&gt; {&#10;    return this.request('/cadastro/caminhao/imagem', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;&#10;  async reconhecimentoCompleto(formData: FormData): Promise&lt;ApiResponse&lt;any&gt;&gt; {&#10;    return this.request('/reconhecimento/completo', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;&#10;  async reconhecerMotorista(formData: FormData): Promise&lt;ApiResponse&lt;any&gt;&gt; {&#10;    return this.request('/reconhecimento/motorista', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;}&#10;&#10;export const apiClient = new ApiClient();&#10;" />
              <option name="updatedContent" value="const BASE_URL = 'https://14533dbc8cb2.ngrok-free.app/api';&#10;&#10;interface ApiResponse&lt;T&gt; {&#10;  data?: T;&#10;  error?: string;&#10;}&#10;&#10;class ApiClient {&#10;  private async request&lt;T&gt;(&#10;    endpoint: string,&#10;    options: RequestInit = {}&#10;  ): Promise&lt;ApiResponse&lt;T&gt;&gt; {&#10;    try {&#10;      const response = await fetch(`${BASE_URL}${endpoint}`, {&#10;        headers: {&#10;          'ngrok-skip-browser-warning': 'true',&#10;          ...options.headers,&#10;        },&#10;        ...options,&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json().catch(() =&gt; ({}));&#10;        return { error: errorData.error || errorData.erro || 'Erro na requisição' };&#10;      }&#10;&#10;      const data = await response.json();&#10;      return { data };&#10;    } catch (error) {&#10;      return { error: 'Erro de conexão com o servidor' };&#10;    }&#10;  }&#10;&#10;  async getMotoristas(): Promise&lt;ApiResponse&lt;{ id: number; nome: string }[]&gt;&gt; {&#10;    return this.request('/balanca/motoristas');&#10;  }&#10;&#10;  async registrarEntrada(data: {&#10;    placa: string;&#10;    motorista_id: number;&#10;    peso: number;&#10;  }): Promise&lt;ApiResponse&lt;{ id_evento: number }&gt;&gt; {&#10;    return this.request('/balanca/entrada', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify(data),&#10;    });&#10;  }&#10;&#10;  async registrarSaida(data: {&#10;    evento_id: number;&#10;    peso: number;&#10;  }): Promise&lt;ApiResponse&lt;void&gt;&gt; {&#10;    return this.request('/balanca/saida', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify(data),&#10;    });&#10;  }&#10;&#10;  async getCiclosAbertos(): Promise&lt;ApiResponse&lt;{&#10;    id_pesagem: number;&#10;    placa: string;&#10;    motorista: string;&#10;  }[]&gt;&gt; {&#10;    return this.request('/balanca/ciclos-abertos');&#10;  }&#10;&#10;  async getHistorico(): Promise&lt;ApiResponse&lt;any[]&gt;&gt; {&#10;    return this.request('/balanca/historico');&#10;  }&#10;&#10;  async cadastrarMotorista(formData: FormData): Promise&lt;ApiResponse&lt;any&gt;&gt; {&#10;    return this.request('/cadastro/motorista', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;&#10;  async cadastrarCaminhaoManual(data: {&#10;    placa: string;&#10;    modelo: string;&#10;    empresa: string;&#10;  }): Promise&lt;ApiResponse&lt;{ id_caminhao: number }&gt;&gt; {&#10;    return this.request('/cadastro/caminhao/manual', {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify(data),&#10;    });&#10;  }&#10;&#10;  async cadastrarCaminhaoPorImagem(formData: FormData): Promise&lt;ApiResponse&lt;{&#10;    id_caminhao: number;&#10;    placa: string;&#10;  }&gt;&gt; {&#10;    return this.request('/cadastro/caminhao/imagem', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;&#10;  async reconhecimentoCompleto(formData: FormData): Promise&lt;ApiResponse&lt;{&#10;    motorista_reconhecido: boolean;&#10;    motorista_id?: number;&#10;    motorista_nome?: string;&#10;    confianca_motorista?: number;&#10;    placa_reconhecida?: string;&#10;    placa_valida: boolean;&#10;  }&gt;&gt; {&#10;    return this.request('/reconhecimento/completo', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;&#10;  async reconhecerMotorista(formData: FormData): Promise&lt;ApiResponse&lt;{&#10;    motorista_reconhecido: boolean;&#10;    motorista_id?: number;&#10;    motorista_nome?: string;&#10;    confianca?: number;&#10;  }&gt;&gt; {&#10;    return this.request('/reconhecimento/motorista', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;&#10;  async reconhecerPlaca(formData: FormData): Promise&lt;ApiResponse&lt;{&#10;    placa: string;&#10;  }&gt;&gt; {&#10;    return this.request('/reconhecimento/placa', {&#10;      method: 'POST',&#10;      body: formData,&#10;    });&#10;  }&#10;}&#10;&#10;export const apiClient = new ApiClient();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>