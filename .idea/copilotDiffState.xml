<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/components/drivers/driver-management.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/drivers/driver-management.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { User, Plus, Eye, Edit, Trash2, Phone, Mail } from &quot;lucide-react&quot;;&#10;&#10;export function DriverManagement() {&#10;  const drivers = [&#10;    {&#10;      id: 1,&#10;      name: &quot;João Silva&quot;,&#10;      document: &quot;CNH: 1234567890&quot;,&#10;      cpf: &quot;123.456.789-01&quot;,&#10;      phone: &quot;(11) 99999-9999&quot;,&#10;      email: &quot;joao@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;    {&#10;      id: 2,&#10;      name: &quot;Maria Santos&quot;,&#10;      document: &quot;CNH: 0987654321&quot;,&#10;      cpf: &quot;987.654.321-09&quot;,&#10;      phone: &quot;(11) 88888-8888&quot;,&#10;      email: &quot;maria@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;w-full space-y-8 page-animation&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#10;            Motoristas&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;Gerencie os motoristas cadastrados&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;Button className=&quot;bg-primary-900 hover:bg-primary-900/70&quot;&gt;&#10;          &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;          Novo Motorista&#10;        &lt;/Button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-1 gap-6 lg:grid-cols-3&quot;&gt;&#10;        {drivers.map((driver) =&gt; (&#10;          &lt;Card key={driver.id} className=&quot;relative&quot;&gt;&#10;            &lt;CardHeader className=&quot;pb-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                  &lt;div className=&quot;h-12 w-12 rounded-2xl bg-primary-100 flex items-center justify-center&quot;&gt;&#10;                    &lt;User className=&quot;h-6 w-6 text-primary-600&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;CardTitle className=&quot;text-lg font-bold&quot;&gt;&#10;                      {driver.name}&#10;                    &lt;/CardTitle&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{driver.document}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;Badge&#10;                  variant=&quot;default&quot;&#10;                  className=&quot;bg-primary-100 text-primary-700&quot;&#10;                &gt;&#10;                  {driver.status}&#10;                &lt;/Badge&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-600&quot;&gt;CPF&lt;/p&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-900&quot;&gt;{driver.cpf}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                  &lt;Phone className=&quot;h-4 w-4 text-gray-400&quot; /&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-900&quot;&gt;{driver.phone}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                  &lt;Mail className=&quot;h-4 w-4 text-gray-400&quot; /&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-900&quot;&gt;{driver.email}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex gap-2 mt-6&quot;&gt;&#10;                &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; className=&quot;flex-1&quot;&gt;&#10;                  &lt;Eye className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                  Ver&#10;                &lt;/Button&gt;&#10;                &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; className=&quot;flex-1&quot;&gt;&#10;                  &lt;Edit className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                  Editar&#10;                &lt;/Button&gt;&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  size=&quot;sm&quot;&#10;                  className=&quot;text-primary-600 border-primary-200 hover:bg-primary-50&quot;&#10;                &gt;&#10;                  &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { User, Plus, Eye, Edit, Trash2, Phone, Mail } from &quot;lucide-react&quot;;&#10;&#10;export function DriverManagement() {&#10;  const drivers = [&#10;    {&#10;      id: 1,&#10;      name: &quot;João Silva&quot;,&#10;      document: &quot;CNH: 1234567890&quot;,&#10;      cpf: &quot;123.456.789-01&quot;,&#10;      phone: &quot;(11) 99999-9999&quot;,&#10;      email: &quot;joao@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;    {&#10;      id: 2,&#10;      name: &quot;Maria Santos&quot;,&#10;      document: &quot;CNH: 0987654321&quot;,&#10;      cpf: &quot;987.654.321-09&quot;,&#10;      phone: &quot;(11) 88888-8888&quot;,&#10;      email: &quot;maria@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;    {&#10;      id: 3,&#10;      name: &quot;Pedro Oliveira&quot;,&#10;      document: &quot;CNH: 5566778899&quot;,&#10;      cpf: &quot;456.789.123-45&quot;,&#10;      phone: &quot;(11) 97777-7777&quot;,&#10;      email: &quot;pedro.oliveira@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;    {&#10;      id: 4,&#10;      name: &quot;Ana Costa&quot;,&#10;      document: &quot;CNH: 1122334455&quot;,&#10;      cpf: &quot;789.123.456-78&quot;,&#10;      phone: &quot;(11) 96666-6666&quot;,&#10;      email: &quot;ana.costa@email.com&quot;,&#10;      status: &quot;Inativo&quot;,&#10;    },&#10;    {&#10;      id: 5,&#10;      name: &quot;Carlos Lima&quot;,&#10;      document: &quot;CNH: 9988776655&quot;,&#10;      cpf: &quot;321.654.987-32&quot;,&#10;      phone: &quot;(11) 95555-5555&quot;,&#10;      email: &quot;carlos.lima@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;    {&#10;      id: 6,&#10;      name: &quot;Fernanda Rocha&quot;,&#10;      document: &quot;CNH: 4433221100&quot;,&#10;      cpf: &quot;654.321.987-65&quot;,&#10;      phone: &quot;(11) 94444-4444&quot;,&#10;      email: &quot;fernanda.rocha@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;    {&#10;      id: 7,&#10;      name: &quot;Roberto Mendes&quot;,&#10;      document: &quot;CNH: 7788990011&quot;,&#10;      cpf: &quot;159.753.486-15&quot;,&#10;      phone: &quot;(11) 93333-3333&quot;,&#10;      email: &quot;roberto.mendes@email.com&quot;,&#10;      status: &quot;Suspenso&quot;,&#10;    },&#10;    {&#10;      id: 8,&#10;      name: &quot;Juliana Ferreira&quot;,&#10;      document: &quot;CNH: 2233445566&quot;,&#10;      cpf: &quot;357.159.753-35&quot;,&#10;      phone: &quot;(11) 92222-2222&quot;,&#10;      email: &quot;juliana.ferreira@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;    {&#10;      id: 9,&#10;      name: &quot;Ricardo Barbosa&quot;,&#10;      document: &quot;CNH: 6677889900&quot;,&#10;      cpf: &quot;741.852.963-74&quot;,&#10;      phone: &quot;(11) 91111-1111&quot;,&#10;      email: &quot;ricardo.barbosa@email.com&quot;,&#10;      status: &quot;Ativo&quot;,&#10;    },&#10;    {&#10;      id: 10,&#10;      name: &quot;Patrícia Alves&quot;,&#10;      document: &quot;CNH: 3344556677&quot;,&#10;      cpf: &quot;852.963.741-85&quot;,&#10;      phone: &quot;(11) 90000-0000&quot;,&#10;      email: &quot;patricia.alves@email.com&quot;,&#10;      status: &quot;Inativo&quot;,&#10;    },&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;w-full space-y-8 page-animation&quot;&gt;&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#10;            Motoristas&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;Gerencie os motoristas cadastrados&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &lt;Button className=&quot;bg-primary-900 hover:bg-primary-900/70&quot;&gt;&#10;          &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;          Novo Motorista&#10;        &lt;/Button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid grid-cols-1 gap-6 lg:grid-cols-3&quot;&gt;&#10;        {drivers.map((driver) =&gt; (&#10;          &lt;Card key={driver.id} className=&quot;relative&quot;&gt;&#10;            &lt;CardHeader className=&quot;pb-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                  &lt;div className=&quot;h-12 w-12 rounded-2xl bg-primary-100 flex items-center justify-center&quot;&gt;&#10;                    &lt;User className=&quot;h-6 w-6 text-primary-600&quot; /&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div&gt;&#10;                    &lt;CardTitle className=&quot;text-lg font-bold&quot;&gt;&#10;                      {driver.name}&#10;                    &lt;/CardTitle&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600&quot;&gt;{driver.document}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;Badge&#10;                  variant=&quot;default&quot;&#10;                  className=&quot;bg-primary-100 text-primary-700&quot;&#10;                &gt;&#10;                  {driver.status}&#10;                &lt;/Badge&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-600&quot;&gt;CPF&lt;/p&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-900&quot;&gt;{driver.cpf}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                  &lt;Phone className=&quot;h-4 w-4 text-gray-400&quot; /&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-900&quot;&gt;{driver.phone}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                  &lt;Mail className=&quot;h-4 w-4 text-gray-400&quot; /&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-900&quot;&gt;{driver.email}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;flex gap-2 mt-6&quot;&gt;&#10;                &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; className=&quot;flex-1&quot;&gt;&#10;                  &lt;Eye className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                  Ver&#10;                &lt;/Button&gt;&#10;                &lt;Button variant=&quot;outline&quot; size=&quot;sm&quot; className=&quot;flex-1&quot;&gt;&#10;                  &lt;Edit className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                  Editar&#10;                &lt;/Button&gt;&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  size=&quot;sm&quot;&#10;                  className=&quot;text-primary-600 border-primary-200 hover:bg-primary-50&quot;&#10;                &gt;&#10;                  &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/filters-card.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/filters-card.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import {&#10;  Select,&#10;  SelectContent,&#10;  SelectItem,&#10;  SelectTrigger,&#10;  SelectValue,&#10;} from &quot;@/components/ui/select&quot;;&#10;import { Filter, X } from &quot;lucide-react&quot;;&#10;&#10;interface FilterState {&#10;  startDate: string;&#10;  endDate: string;&#10;  driver: string;&#10;  company: string;&#10;  cargoType: string;&#10;  plate: string;&#10;}&#10;&#10;interface FiltersCardProps {&#10;  filters: FilterState;&#10;  setFilters: (filters: FilterState) =&gt; void;&#10;  onClearFilters: () =&gt; void;&#10;}&#10;&#10;export function FiltersCard({ filters, setFilters, onClearFilters }: FiltersCardProps) {&#10;  return (&#10;    &lt;Card className=&quot;w-full lg:w-80 h-fit&quot;&gt;&#10;      &lt;CardHeader className=&quot;flex flex-row justify-between pb-4&quot;&gt;&#10;        &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;          &lt;Filter className=&quot;h-5 w-5 text-primary-600&quot; /&gt;&#10;          Filtros&#10;        &lt;/CardTitle&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent&gt;&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;startDate&quot;&gt;Data Início&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;startDate&quot;&#10;              type=&quot;date&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.startDate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, startDate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;endDate&quot;&gt;Data Fim&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;endDate&quot;&#10;              type=&quot;date&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.endDate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, endDate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;plate&quot;&gt;Placa do Veículo&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;plate&quot;&#10;              placeholder=&quot;ABC-1234&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.plate}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, plate: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;driver-filter&quot;&gt;Motorista&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;driver-filter&quot;&#10;              placeholder=&quot;Nome do motorista&quot;&#10;              className=&quot;mt-1&quot;&#10;              value={filters.driver}&#10;              onChange={(e) =&gt;&#10;                setFilters({ ...filters, driver: e.target.value })&#10;              }&#10;            /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;company-filter&quot;&gt;Empresa&lt;/Label&gt;&#10;            &lt;Select value={filters.company} onValueChange={(value) =&gt; setFilters({ ...filters, company: value })}&gt;&#10;              &lt;SelectTrigger className=&quot;mt-1&quot;&gt;&#10;                &lt;SelectValue placeholder=&quot;Todas as empresas&quot; /&gt;&#10;              &lt;/SelectTrigger&gt;&#10;              &lt;SelectContent&gt;&#10;                &lt;SelectItem value=&quot;all&quot;&gt;Todas as empresas&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Agro Brasil Ltda&quot;&gt;Agro Brasil Ltda&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Transportes Campo&quot;&gt;Transportes Campo&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Rural Express&quot;&gt;Rural Express&lt;/SelectItem&gt;&#10;              &lt;/SelectContent&gt;&#10;            &lt;/Select&gt;&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;Label htmlFor=&quot;cargo-filter&quot;&gt;Tipo de Carga&lt;/Label&gt;&#10;            &lt;Select value={filters.cargoType} onValueChange={(value) =&gt; setFilters({ ...filters, cargoType: value })}&gt;&#10;              &lt;SelectTrigger className=&quot;mt-1&quot;&gt;&#10;                &lt;SelectValue placeholder=&quot;Todos os tipos&quot; /&gt;&#10;              &lt;/SelectTrigger&gt;&#10;              &lt;SelectContent&gt;&#10;                &lt;SelectItem value=&quot;all&quot;&gt;Todos os tipos&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Soja&quot;&gt;Soja&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Milho&quot;&gt;Milho&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Fertilizante&quot;&gt;Fertilizante&lt;/SelectItem&gt;&#10;                &lt;SelectItem value=&quot;Ração&quot;&gt;Ração&lt;/SelectItem&gt;&#10;              &lt;/SelectContent&gt;&#10;            &lt;/Select&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button&#10;            variant=&quot;outline&quot;&#10;            onClick={onClearFilters}&#10;            className=&quot;w-full&quot;&#10;          &gt;&#10;            &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            Limpar&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/weighing-history-header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/weighing-history-header.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Download } from &quot;lucide-react&quot;;&#10;&#10;interface WeighingHistoryHeaderProps {&#10;  onExport: () =&gt; void;&#10;}&#10;&#10;export function WeighingHistoryHeader({ onExport }: WeighingHistoryHeaderProps) {&#10;  return (&#10;    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;      &lt;div&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold tracking-tight text-white&quot;&gt;&#10;          Histórico de Pesagens&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-gray-200 mt-1&quot;&gt;&#10;          Consulte o histórico completo de pesagens&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;      &lt;Button className=&quot;bg-primary-900 hover:bg-primary-900/70&quot; onClick={onExport}&gt;&#10;        &lt;Download className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;        Exportar&#10;      &lt;/Button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/history/components/weighing-table.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/history/components/weighing-table.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from &quot;@/components/ui/table&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import {&#10;  Weight,&#10;  CheckCircle,&#10;  Clock,&#10;  ChevronUp,&#10;  ChevronDown,&#10;  ChevronsUpDown,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;&#10;interface WeighingRecord {&#10;  id: number;&#10;  date: string;&#10;  time: string;&#10;  plate: string;&#10;  driver: string;&#10;  company: string;&#10;  cargo: string;&#10;  entryWeight: string;&#10;  exitWeight: string;&#10;  netWeight: string;&#10;  status: string;&#10;}&#10;&#10;interface SortConfig {&#10;  key: string;&#10;  direction: &quot;asc&quot; | &quot;desc&quot;;&#10;}&#10;&#10;interface WeighingTableProps {&#10;  records: WeighingRecord[];&#10;  sortConfig: SortConfig;&#10;  onSort: (key: string) =&gt; void;&#10;}&#10;&#10;const tableCols = [&#10;  { label: &quot;Data/Hora&quot;, key: &quot;date&quot; },&#10;  { label: &quot;Caminhão&quot;, key: &quot;plate&quot; },&#10;  { label: &quot;Motorista&quot;, key: &quot;driver&quot; },&#10;  { label: &quot;Empresa&quot;, key: &quot;company&quot; },&#10;  { label: &quot;Carga&quot;, key: &quot;cargo&quot; },&#10;  { label: &quot;Entrada (kg)&quot;, key: &quot;entryWeight&quot; },&#10;  { label: &quot;Saída (kg)&quot;, key: &quot;exitWeight&quot; },&#10;  { label: &quot;Líquido (kg)&quot;, key: &quot;netWeight&quot; },&#10;  { label: &quot;Status&quot;, key: &quot;status&quot; },&#10;];&#10;&#10;export function WeighingTable({ records, sortConfig, onSort }: WeighingTableProps) {&#10;  const getSortIcon = (columnKey: string) =&gt; {&#10;    if (sortConfig.key !== columnKey) {&#10;      return &lt;ChevronsUpDown className=&quot;h-4 w-4 text-gray-400&quot; /&gt;;&#10;    }&#10;    return sortConfig.direction === &quot;asc&quot; &#10;      ? &lt;ChevronUp className=&quot;h-4 w-4 text-primary-600&quot; /&gt;&#10;      : &lt;ChevronDown className=&quot;h-4 w-4 text-primary-600&quot; /&gt;;&#10;  };&#10;&#10;  return (&#10;    &lt;Card className=&quot;flex-1&quot;&gt;&#10;      &lt;CardHeader&gt;&#10;        &lt;CardTitle className=&quot;text-lg font-semibold flex items-center gap-2&quot;&gt;&#10;          &lt;Weight className=&quot;h-5 w-5 text-primary-600&quot; /&gt;&#10;          Registros de Pesagem&#10;        &lt;/CardTitle&gt;&#10;      &lt;/CardHeader&gt;&#10;      &lt;CardContent&gt;&#10;        &lt;div className=&quot;overflow-x-auto rounded-2xl&quot;&gt;&#10;          &lt;Table&gt;&#10;            &lt;TableHeader&gt;&#10;              &lt;TableRow&gt;&#10;                {tableCols.map((col, index) =&gt; (&#10;                  &lt;TableHead &#10;                    key={index} &#10;                    className=&quot;cursor-pointer hover:bg-gray-50 select-none&quot;&#10;                    onClick={() =&gt; onSort(col.key)}&#10;                  &gt;&#10;                    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                      {col.label}&#10;                      {getSortIcon(col.key)}&#10;                    &lt;/div&gt;&#10;                  &lt;/TableHead&gt;&#10;                ))}&#10;              &lt;/TableRow&gt;&#10;            &lt;/TableHeader&gt;&#10;            &lt;TableBody&gt;&#10;              {records.map((record) =&gt; (&#10;                &lt;TableRow key={record.id}&gt;&#10;                  &lt;TableCell&gt;&#10;                    &lt;div className=&quot;text-sm&quot;&gt;&#10;                      &lt;div className=&quot;font-medium&quot;&gt;{record.date}&lt;/div&gt;&#10;                      &lt;div className=&quot;text-gray-500&quot;&gt;{record.time}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;&#10;                    {record.plate}&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.driver}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.company}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.cargo}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.entryWeight}&lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;{record.exitWeight}&lt;/TableCell&gt;&#10;                  &lt;TableCell className=&quot;font-medium&quot;&gt;&#10;                    {record.netWeight}&#10;                  &lt;/TableCell&gt;&#10;                  &lt;TableCell&gt;&#10;                    &lt;Badge&#10;                      variant=&quot;secondary&quot;&#10;                      className={cn(&#10;                        &quot;flex items-center w-fit space-x-1&quot;,&#10;                        record.status === &quot;Concluído&quot;&#10;                        ? &quot;bg-green-100 text-green-700&quot;&#10;                        : &quot;bg-amber-100 text-amber-700&quot;&#10;                      )}&#10;                    &gt;&#10;                      &lt;span&gt;&#10;                        {record.status}&#10;                      &lt;/span&gt;&#10;                      {&#10;                        record.status === &quot;Concluído&quot;&#10;                          ? &lt;CheckCircle className=&quot;w-4 h-4&quot;/&gt;&#10;                          : &lt;Clock className=&quot;w-4 h-4&quot;/&gt;&#10;                      }&#10;                    &lt;/Badge&gt;&#10;                  &lt;/TableCell&gt;&#10;                &lt;/TableRow&gt;&#10;              ))}&#10;            &lt;/TableBody&gt;&#10;          &lt;/Table&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/layout/sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/layout/sidebar.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Fragment, useState, useEffect } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { Dialog } from &quot;@radix-ui/react-dialog&quot;;&#10;import { Transition } from &quot;@headlessui/react&quot;;&#10;import {&#10;  LayoutDashboard,&#10;  Weight,&#10;  History,&#10;  Truck,&#10;  IdCardLanyard,&#10;  Handshake,&#10;  Settings,&#10;  X, LucideIcon,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface NavItem {&#10;  name: string;&#10;  href: string;&#10;  icon: LucideIcon;&#10;}&#10;&#10;const navigation: NavItem[] = [&#10;  { name: &quot;Dashboard&quot;, href: &quot;/&quot;, icon: LayoutDashboard },&#10;  { name: &quot;Pesagem Ativa&quot;, href: &quot;/weighing&quot;, icon: Weight },&#10;  { name: &quot;Histórico&quot;, href: &quot;/history&quot;, icon: History },&#10;  { name: &quot;Frota&quot;, href: &quot;/fleet&quot;, icon: Truck },&#10;  { name: &quot;Motoristas&quot;, href: &quot;/drivers&quot;, icon: IdCardLanyard },&#10;  { name: &quot;Parceiros&quot;, href: &quot;/partners&quot;, icon: Handshake },&#10;];&#10;&#10;const systemNavigation: NavItem[] = [&#10;  { name: &quot;Configurações&quot;, href: &quot;/settings&quot;, icon: Settings },&#10;];&#10;&#10;interface SidebarProps {&#10;  open: boolean;&#10;  setOpen: (open: boolean) =&gt; void;&#10;}&#10;&#10;export function Sidebar({ open, setOpen }: SidebarProps) {&#10;  const pathname = usePathname();&#10;&#10;  const selectedLinkIndex = navigation.findIndex((item) =&gt; item.href === pathname);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;teste&quot;)&#10;  }, [])&#10;&#10;  const NavItem = ({item} : {item: NavItem}) =&gt; {&#10;    return (&#10;      &lt;Link&#10;        href={item.href}&#10;        className={cn(&#10;          &quot;flex items-center gap-x-3 py-3.5 px-6&quot;,&#10;          &quot;text-sm leading-6 text-gray-700&quot;,&#10;          &quot;transition-colors group&quot;,&#10;          &quot;hover:text-black hover:bg-gray-100&quot;,&#10;          pathname === item.href &amp;&amp; &quot;text-primary-600&quot;&#10;        )}&#10;      &gt;&#10;        &lt;item.icon&#10;          className={cn(&#10;            pathname === item.href&#10;              ? &quot;text-primary-600&quot;&#10;              : &quot;text-gray-400 group-hover:text-black&quot;,&#10;            &quot;h-5 w-5 shrink-0 transition-colors&quot;&#10;          )}&#10;          aria-hidden=&quot;true&quot;&#10;        /&gt;&#10;        {item.name}&#10;      &lt;/Link&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col w-[230px] z-20 fixed min-h-screen gap-y-7 bg-white shadow-lg&quot;&gt;&#10;      &lt;div className=&quot;flex items-center gap-3 px-6 pt-4 shrink-0&quot;&gt;&#10;        &lt;Image&#10;          src=&quot;/images/logo.png&quot;&#10;          alt=&quot;Logo&quot;&#10;          width={74}&#10;          height={74}&#10;          className=&quot;h-10 w-auto&quot;&#10;        /&gt;&#10;        &lt;div className=&quot;flex flex-col&quot;&gt;&#10;          &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;Semensol&lt;/h1&gt;&#10;          &lt;p className=&quot;text-xs text-gray-500 font-medium&quot;&gt;Sistema de pesagem&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;nav className=&quot;flex flex-col h-full gap-y-7 relative&quot;&gt;&#10;        &lt;div&#10;          style={{&#10;            top: selectedLinkIndex === 0 ? 32 : (52 * selectedLinkIndex) + 32&#10;          }}&#10;          className=&quot;&#10;            absolute bg-primary-100 w-full h-[52px]&#10;            border-l-4 border-primary-500&#10;            transition-all duration-300&#10;            z-0&#10;          &quot;&#10;        /&gt;&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            OPERAÇÕES&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {navigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mt-auto&quot;&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            SISTEMA&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {systemNavigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;      &lt;div className=&quot;flex flex-col mt-auto&quot;&gt;&#10;        &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;          STATUS&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center gap-3 mb-2 mt-auto px-6 py-4&quot;&gt;&#10;          &lt;div className=&quot;h-2 w-2 rounded-full bg-green-500&quot;&gt;&lt;/div&gt;&#10;          &lt;span className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;            Sistema Online&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Fragment, useState, useEffect } from &quot;react&quot;;&#10;import Link from &quot;next/link&quot;;&#10;import { usePathname } from &quot;next/navigation&quot;;&#10;import { Dialog } from &quot;@radix-ui/react-dialog&quot;;&#10;import { Transition } from &quot;@headlessui/react&quot;;&#10;import {&#10;  LayoutDashboard,&#10;  Weight,&#10;  History,&#10;  Truck,&#10;  IdCardLanyard,&#10;  Handshake,&#10;  Settings,&#10;  X, LucideIcon,&#10;} from &quot;lucide-react&quot;;&#10;import { cn } from &quot;@/lib/utils&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import Image from &quot;next/image&quot;;&#10;&#10;interface NavItem {&#10;  name: string;&#10;  href: string;&#10;  icon: LucideIcon;&#10;}&#10;&#10;const navigation: NavItem[] = [&#10;  { name: &quot;Dashboard&quot;, href: &quot;/&quot;, icon: LayoutDashboard },&#10;  { name: &quot;Pesagem Ativa&quot;, href: &quot;/weighing&quot;, icon: Weight },&#10;  { name: &quot;Histórico&quot;, href: &quot;/history&quot;, icon: History },&#10;  { name: &quot;Frota&quot;, href: &quot;/fleet&quot;, icon: Truck },&#10;  { name: &quot;Motoristas&quot;, href: &quot;/drivers&quot;, icon: IdCardLanyard },&#10;  { name: &quot;Parceiros&quot;, href: &quot;/partners&quot;, icon: Handshake },&#10;];&#10;&#10;const systemNavigation: NavItem[] = [&#10;  { name: &quot;Configurações&quot;, href: &quot;/settings&quot;, icon: Settings },&#10;];&#10;&#10;interface SidebarProps {&#10;  open: boolean;&#10;  setOpen: (open: boolean) =&gt; void;&#10;}&#10;&#10;export function Sidebar({ open, setOpen }: SidebarProps) {&#10;  const pathname = usePathname();&#10;&#10;  const selectedLinkIndex = navigation.findIndex((item) =&gt; item.href === pathname);&#10;&#10;  useEffect(() =&gt; {&#10;    console.log(&quot;teste&quot;)&#10;  }, [])&#10;&#10;  const NavItem = ({item} : {item: NavItem}) =&gt; {&#10;    return (&#10;      &lt;Link&#10;        href={item.href}&#10;        className={cn(&#10;          &quot;flex items-center gap-x-3 py-3.5 px-6&quot;,&#10;          &quot;text-sm leading-6 text-gray-700&quot;,&#10;          &quot;transition-colors group&quot;,&#10;          &quot;hover:text-black hover:bg-gray-100&quot;,&#10;          pathname === item.href &amp;&amp; &quot;text-primary-600&quot;&#10;        )}&#10;      &gt;&#10;        &lt;item.icon&#10;          className={cn(&#10;            pathname === item.href&#10;              ? &quot;text-primary-600&quot;&#10;              : &quot;text-gray-400 group-hover:text-black&quot;,&#10;            &quot;h-5 w-5 shrink-0 transition-colors&quot;&#10;          )}&#10;          aria-hidden=&quot;true&quot;&#10;        /&gt;&#10;        {item.name}&#10;      &lt;/Link&gt;&#10;    )&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex flex-col w-[230px] z-20 fixed min-h-screen gap-y-7 bg-white shadow-lg&quot;&gt;&#10;      &lt;div className=&quot;flex items-center gap-3 px-6 pt-4 shrink-0&quot;&gt;&#10;        &lt;Image&#10;          src=&quot;/images/logo.png&quot;&#10;          alt=&quot;Logo&quot;&#10;          width={74}&#10;          height={74}&#10;          className=&quot;h-10 w-auto&quot;&#10;        /&gt;&#10;        &lt;div className=&quot;flex flex-col&quot;&gt;&#10;          &lt;h1 className=&quot;text-xl font-bold text-gray-900&quot;&gt;Semensol&lt;/h1&gt;&#10;          &lt;p className=&quot;text-xs text-gray-500 font-medium&quot;&gt;Sistema de pesagem&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;nav className=&quot;flex flex-col h-full gap-y-7 relative&quot;&gt;&#10;        &lt;div&#10;          style={{&#10;            top: selectedLinkIndex === 0 ? 32 : (52 * selectedLinkIndex) + 32&#10;          }}&#10;          className=&quot;&#10;            absolute bg-primary-100 w-full h-[52px]&#10;            border-l-4 border-primary-500&#10;            transition-all duration-300&#10;            z-0&#10;          &quot;&#10;        /&gt;&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            OPERAÇÕES&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {navigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mt-auto&quot;&gt;&#10;          &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;            SISTEMA&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            {systemNavigation.map((item) =&gt; &lt;NavItem key={item.name} item={item} /&gt;)}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;      &lt;div className=&quot;flex flex-col mt-auto&quot;&gt;&#10;        &lt;div className=&quot;text-xs font-semibold leading-6 text-gray-400 uppercase tracking-wider px-6&quot;&gt;&#10;          STATUS&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex items-center gap-3 mb-2 mt-auto px-6 py-4&quot;&gt;&#10;          &lt;div className=&quot;h-2 w-2 rounded-full bg-green-500&quot;&gt;&lt;/div&gt;&#10;          &lt;span className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;            Sistema Online&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/hooks/use-weighing-history.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/hooks/use-weighing-history.ts" />
              <option name="updatedContent" value="import { useState, useMemo } from &quot;react&quot;;&#10;&#10;export interface WeighingRecord {&#10;  id: number;&#10;  date: string;&#10;  time: string;&#10;  plate: string;&#10;  driver: string;&#10;  company: string;&#10;  cargo: string;&#10;  entryWeight: string;&#10;  exitWeight: string;&#10;  netWeight: string;&#10;  status: string;&#10;}&#10;&#10;export interface FilterState {&#10;  startDate: string;&#10;  endDate: string;&#10;  driver: string;&#10;  company: string;&#10;  cargoType: string;&#10;  plate: string;&#10;}&#10;&#10;export interface SortConfig {&#10;  key: string;&#10;  direction: &quot;asc&quot; | &quot;desc&quot;;&#10;}&#10;&#10;const mockWeighingRecords: WeighingRecord[] = [&#10;  {&#10;    id: 1,&#10;    date: &quot;19/01/2025&quot;,&#10;    time: &quot;08:30&quot;,&#10;    plate: &quot;ABC-1234&quot;,&#10;    driver: &quot;João Silva&quot;,&#10;    company: &quot;Agro Brasil Ltda&quot;,&#10;    cargo: &quot;Soja&quot;,&#10;    entryWeight: &quot;45.200&quot;,&#10;    exitWeight: &quot;15.800&quot;,&#10;    netWeight: &quot;29.400&quot;,&#10;    status: &quot;Concluído&quot;,&#10;  },&#10;  {&#10;    id: 2,&#10;    date: &quot;19/01/2025&quot;,&#10;    time: &quot;09:15&quot;,&#10;    plate: &quot;DEF-5678&quot;,&#10;    driver: &quot;Maria Santos&quot;,&#10;    company: &quot;Transportes Campo&quot;,&#10;    cargo: &quot;Milho&quot;,&#10;    entryWeight: &quot;38.900&quot;,&#10;    exitWeight: &quot;14.200&quot;,&#10;    netWeight: &quot;24.700&quot;,&#10;    status: &quot;Concluído&quot;,&#10;  },&#10;  {&#10;    id: 3,&#10;    date: &quot;19/01/2025&quot;,&#10;    time: &quot;10:45&quot;,&#10;    plate: &quot;GHI-9012&quot;,&#10;    driver: &quot;Pedro Oliveira&quot;,&#10;    company: &quot;Rural Express&quot;,&#10;    cargo: &quot;Fertilizante&quot;,&#10;    entryWeight: &quot;42.100&quot;,&#10;    exitWeight: &quot;16.500&quot;,&#10;    netWeight: &quot;25.600&quot;,&#10;    status: &quot;Concluído&quot;,&#10;  },&#10;  {&#10;    id: 4,&#10;    date: &quot;18/01/2025&quot;,&#10;    time: &quot;16:20&quot;,&#10;    plate: &quot;JKL-3456&quot;,&#10;    driver: &quot;Ana Costa&quot;,&#10;    company: &quot;Agro Brasil Ltda&quot;,&#10;    cargo: &quot;Ração&quot;,&#10;    entryWeight: &quot;39.800&quot;,&#10;    exitWeight: &quot;13.900&quot;,&#10;    netWeight: &quot;25.900&quot;,&#10;    status: &quot;Em andamento&quot;,&#10;  },&#10;  {&#10;    id: 5,&#10;    date: &quot;18/01/2025&quot;,&#10;    time: &quot;14:10&quot;,&#10;    plate: &quot;MNO-7890&quot;,&#10;    driver: &quot;Carlos Lima&quot;,&#10;    company: &quot;Transportes Campo&quot;,&#10;    cargo: &quot;Soja&quot;,&#10;    entryWeight: &quot;41.300&quot;,&#10;    exitWeight: &quot;15.100&quot;,&#10;    netWeight: &quot;26.200&quot;,&#10;    status: &quot;Concluído&quot;,&#10;  },&#10;];&#10;&#10;export function useWeighingHistory() {&#10;  const [filters, setFilters] = useState&lt;FilterState&gt;({&#10;    startDate: &quot;&quot;,&#10;    endDate: &quot;&quot;,&#10;    driver: &quot;&quot;,&#10;    company: &quot;&quot;,&#10;    cargoType: &quot;&quot;,&#10;    plate: &quot;&quot;,&#10;  });&#10;&#10;  const [sortConfig, setSortConfig] = useState&lt;SortConfig&gt;({&#10;    key: &quot;&quot;,&#10;    direction: &quot;asc&quot;&#10;  });&#10;&#10;  const filteredRecords = useMemo(() =&gt; {&#10;    return mockWeighingRecords.filter(record =&gt; {&#10;      const recordDate = record.date.split('/').reverse().join('-');&#10;      if (filters.startDate &amp;&amp; recordDate &lt; filters.startDate) return false;&#10;      if (filters.endDate &amp;&amp; recordDate &gt; filters.endDate) return false;&#10;      &#10;      if (filters.driver &amp;&amp; !record.driver.toLowerCase().includes(filters.driver.toLowerCase())) return false;&#10;      if (filters.plate &amp;&amp; !record.plate.toLowerCase().includes(filters.plate.toLowerCase())) return false;&#10;      if (filters.company &amp;&amp; filters.company !== &quot;all&quot; &amp;&amp; record.company !== filters.company) return false;&#10;      if (filters.cargoType &amp;&amp; filters.cargoType !== &quot;all&quot; &amp;&amp; record.cargo !== filters.cargoType) return false;&#10;      &#10;      return true;&#10;    });&#10;  }, [filters]);&#10;  &#10;  const sortedRecords = useMemo(() =&gt; {&#10;    return [...filteredRecords].sort((a, b) =&gt; {&#10;      if (!sortConfig.key) return 0;&#10;      &#10;      let aValue: any, bValue: any;&#10;      &#10;      switch (sortConfig.key) {&#10;        case &quot;date&quot;:&#10;          aValue = new Date(a.date.split('/').reverse().join('-') + ' ' + a.time);&#10;          bValue = new Date(b.date.split('/').reverse().join('-') + ' ' + b.time);&#10;          break;&#10;        case &quot;entryWeight&quot;:&#10;        case &quot;exitWeight&quot;:&#10;        case &quot;netWeight&quot;:&#10;          aValue = parseFloat((a as any)[sortConfig.key].replace('.', ''));&#10;          bValue = parseFloat((b as any)[sortConfig.key].replace('.', ''));&#10;          break;&#10;        default:&#10;          aValue = (a as any)[sortConfig.key]?.toLowerCase() || '';&#10;          bValue = (b as any)[sortConfig.key]?.toLowerCase() || '';&#10;      }&#10;      &#10;      if (aValue &lt; bValue) return sortConfig.direction === &quot;asc&quot; ? -1 : 1;&#10;      if (aValue &gt; bValue) return sortConfig.direction === &quot;asc&quot; ? 1 : -1;&#10;      return 0;&#10;    });&#10;  }, [filteredRecords, sortConfig]);&#10;&#10;  const clearFilters = () =&gt; {&#10;    setFilters({&#10;      startDate: &quot;&quot;,&#10;      endDate: &quot;&quot;,&#10;      driver: &quot;&quot;,&#10;      company: &quot;&quot;,&#10;      cargoType: &quot;&quot;,&#10;      plate: &quot;&quot;,&#10;    });&#10;  };&#10;&#10;  const handleSort = (key: string) =&gt; {&#10;    setSortConfig(prevConfig =&gt; ({&#10;      key,&#10;      direction: prevConfig.key === key &amp;&amp; prevConfig.direction === &quot;asc&quot; ? &quot;desc&quot; : &quot;asc&quot;&#10;    }));&#10;  };&#10;&#10;  const handleExport = () =&gt; {&#10;    // Export logic here&#10;    console.log(&quot;Exporting weighing history...&quot;);&#10;  };&#10;&#10;  return {&#10;    filters,&#10;    setFilters,&#10;    sortConfig,&#10;    sortedRecords,&#10;    clearFilters,&#10;    handleSort,&#10;    handleExport,&#10;  };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>